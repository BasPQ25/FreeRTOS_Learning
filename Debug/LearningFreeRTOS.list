
LearningFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ce8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08007eb8  08007eb8  00008eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008044  08008044  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008044  08008044  00009044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800804c  0800804c  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800804c  0800804c  0000904c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008050  08008050  00009050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008054  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000142b0  2000006c  080080c0  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001431c  080080c0  0000a31c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159ad  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033f2  00000000  00000000  0001fa49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  00022e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa9  00000000  00000000  000242a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024902  00000000  00000000  00025249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018305  00000000  00000000  00049b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddb30  00000000  00000000  00061e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f980  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a60  00000000  00000000  0013f9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ae  00000000  00000000  00145424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ea0 	.word	0x08007ea0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08007ea0 	.word	0x08007ea0

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012ffc 	.word	0x20012ffc
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b96a 	b.w	800063c <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	460c      	mov	r4, r1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14e      	bne.n	800042a <__udivmoddi4+0xaa>
 800038c:	4694      	mov	ip, r2
 800038e:	458c      	cmp	ip, r1
 8000390:	4686      	mov	lr, r0
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	d962      	bls.n	800045e <__udivmoddi4+0xde>
 8000398:	b14a      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039a:	f1c2 0320 	rsb	r3, r2, #32
 800039e:	4091      	lsls	r1, r2
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	4319      	orrs	r1, r3
 80003aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f f68c 	uxth.w	r6, ip
 80003b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003be:	fb07 1114 	mls	r1, r7, r4, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb04 f106 	mul.w	r1, r4, r6
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003d6:	f080 8112 	bcs.w	80005fe <__udivmoddi4+0x27e>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 810f 	bls.w	80005fe <__udivmoddi4+0x27e>
 80003e0:	3c02      	subs	r4, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ee:	fb07 1110 	mls	r1, r7, r0, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb00 f606 	mul.w	r6, r0, r6
 80003fa:	429e      	cmp	r6, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x94>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 31ff 	add.w	r1, r0, #4294967295
 8000406:	f080 80fc 	bcs.w	8000602 <__udivmoddi4+0x282>
 800040a:	429e      	cmp	r6, r3
 800040c:	f240 80f9 	bls.w	8000602 <__udivmoddi4+0x282>
 8000410:	4463      	add	r3, ip
 8000412:	3802      	subs	r0, #2
 8000414:	1b9b      	subs	r3, r3, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	2100      	movs	r1, #0
 800041c:	b11d      	cbz	r5, 8000426 <__udivmoddi4+0xa6>
 800041e:	40d3      	lsrs	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	e9c5 3200 	strd	r3, r2, [r5]
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d905      	bls.n	800043a <__udivmoddi4+0xba>
 800042e:	b10d      	cbz	r5, 8000434 <__udivmoddi4+0xb4>
 8000430:	e9c5 0100 	strd	r0, r1, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	4608      	mov	r0, r1
 8000438:	e7f5      	b.n	8000426 <__udivmoddi4+0xa6>
 800043a:	fab3 f183 	clz	r1, r3
 800043e:	2900      	cmp	r1, #0
 8000440:	d146      	bne.n	80004d0 <__udivmoddi4+0x150>
 8000442:	42a3      	cmp	r3, r4
 8000444:	d302      	bcc.n	800044c <__udivmoddi4+0xcc>
 8000446:	4290      	cmp	r0, r2
 8000448:	f0c0 80f0 	bcc.w	800062c <__udivmoddi4+0x2ac>
 800044c:	1a86      	subs	r6, r0, r2
 800044e:	eb64 0303 	sbc.w	r3, r4, r3
 8000452:	2001      	movs	r0, #1
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0e6      	beq.n	8000426 <__udivmoddi4+0xa6>
 8000458:	e9c5 6300 	strd	r6, r3, [r5]
 800045c:	e7e3      	b.n	8000426 <__udivmoddi4+0xa6>
 800045e:	2a00      	cmp	r2, #0
 8000460:	f040 8090 	bne.w	8000584 <__udivmoddi4+0x204>
 8000464:	eba1 040c 	sub.w	r4, r1, ip
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	2101      	movs	r1, #1
 8000472:	fbb4 f6f8 	udiv	r6, r4, r8
 8000476:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800047a:	fb08 4416 	mls	r4, r8, r6, r4
 800047e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000482:	fb07 f006 	mul.w	r0, r7, r6
 8000486:	4298      	cmp	r0, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x11c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x11a>
 8000494:	4298      	cmp	r0, r3
 8000496:	f200 80cd 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 800049a:	4626      	mov	r6, r4
 800049c:	1a1c      	subs	r4, r3, r0
 800049e:	fa1f f38e 	uxth.w	r3, lr
 80004a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004a6:	fb08 4410 	mls	r4, r8, r0, r4
 80004aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ae:	fb00 f707 	mul.w	r7, r0, r7
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x148>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80004be:	d202      	bcs.n	80004c6 <__udivmoddi4+0x146>
 80004c0:	429f      	cmp	r7, r3
 80004c2:	f200 80b0 	bhi.w	8000626 <__udivmoddi4+0x2a6>
 80004c6:	4620      	mov	r0, r4
 80004c8:	1bdb      	subs	r3, r3, r7
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	e7a5      	b.n	800041c <__udivmoddi4+0x9c>
 80004d0:	f1c1 0620 	rsb	r6, r1, #32
 80004d4:	408b      	lsls	r3, r1
 80004d6:	fa22 f706 	lsr.w	r7, r2, r6
 80004da:	431f      	orrs	r7, r3
 80004dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e0:	fa04 f301 	lsl.w	r3, r4, r1
 80004e4:	ea43 030c 	orr.w	r3, r3, ip
 80004e8:	40f4      	lsrs	r4, r6
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	0c38      	lsrs	r0, r7, #16
 80004f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004f4:	fbb4 fef0 	udiv	lr, r4, r0
 80004f8:	fa1f fc87 	uxth.w	ip, r7
 80004fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000500:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000504:	fb0e f90c 	mul.w	r9, lr, ip
 8000508:	45a1      	cmp	r9, r4
 800050a:	fa02 f201 	lsl.w	r2, r2, r1
 800050e:	d90a      	bls.n	8000526 <__udivmoddi4+0x1a6>
 8000510:	193c      	adds	r4, r7, r4
 8000512:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000516:	f080 8084 	bcs.w	8000622 <__udivmoddi4+0x2a2>
 800051a:	45a1      	cmp	r9, r4
 800051c:	f240 8081 	bls.w	8000622 <__udivmoddi4+0x2a2>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443c      	add	r4, r7
 8000526:	eba4 0409 	sub.w	r4, r4, r9
 800052a:	fa1f f983 	uxth.w	r9, r3
 800052e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000532:	fb00 4413 	mls	r4, r0, r3, r4
 8000536:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800053a:	fb03 fc0c 	mul.w	ip, r3, ip
 800053e:	45a4      	cmp	ip, r4
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x1d2>
 8000542:	193c      	adds	r4, r7, r4
 8000544:	f103 30ff 	add.w	r0, r3, #4294967295
 8000548:	d267      	bcs.n	800061a <__udivmoddi4+0x29a>
 800054a:	45a4      	cmp	ip, r4
 800054c:	d965      	bls.n	800061a <__udivmoddi4+0x29a>
 800054e:	3b02      	subs	r3, #2
 8000550:	443c      	add	r4, r7
 8000552:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000556:	fba0 9302 	umull	r9, r3, r0, r2
 800055a:	eba4 040c 	sub.w	r4, r4, ip
 800055e:	429c      	cmp	r4, r3
 8000560:	46ce      	mov	lr, r9
 8000562:	469c      	mov	ip, r3
 8000564:	d351      	bcc.n	800060a <__udivmoddi4+0x28a>
 8000566:	d04e      	beq.n	8000606 <__udivmoddi4+0x286>
 8000568:	b155      	cbz	r5, 8000580 <__udivmoddi4+0x200>
 800056a:	ebb8 030e 	subs.w	r3, r8, lr
 800056e:	eb64 040c 	sbc.w	r4, r4, ip
 8000572:	fa04 f606 	lsl.w	r6, r4, r6
 8000576:	40cb      	lsrs	r3, r1
 8000578:	431e      	orrs	r6, r3
 800057a:	40cc      	lsrs	r4, r1
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e750      	b.n	8000426 <__udivmoddi4+0xa6>
 8000584:	f1c2 0320 	rsb	r3, r2, #32
 8000588:	fa20 f103 	lsr.w	r1, r0, r3
 800058c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000590:	fa24 f303 	lsr.w	r3, r4, r3
 8000594:	4094      	lsls	r4, r2
 8000596:	430c      	orrs	r4, r1
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a0:	fa1f f78c 	uxth.w	r7, ip
 80005a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005a8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b2:	fb00 f107 	mul.w	r1, r0, r7
 80005b6:	4299      	cmp	r1, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x24c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 36ff 	add.w	r6, r0, #4294967295
 80005c2:	d22c      	bcs.n	800061e <__udivmoddi4+0x29e>
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d92a      	bls.n	800061e <__udivmoddi4+0x29e>
 80005c8:	3802      	subs	r0, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	1a5b      	subs	r3, r3, r1
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005d4:	fb08 3311 	mls	r3, r8, r1, r3
 80005d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005dc:	fb01 f307 	mul.w	r3, r1, r7
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x276>
 80005e4:	eb1c 0404 	adds.w	r4, ip, r4
 80005e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ec:	d213      	bcs.n	8000616 <__udivmoddi4+0x296>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d911      	bls.n	8000616 <__udivmoddi4+0x296>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4464      	add	r4, ip
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005fc:	e739      	b.n	8000472 <__udivmoddi4+0xf2>
 80005fe:	4604      	mov	r4, r0
 8000600:	e6f0      	b.n	80003e4 <__udivmoddi4+0x64>
 8000602:	4608      	mov	r0, r1
 8000604:	e706      	b.n	8000414 <__udivmoddi4+0x94>
 8000606:	45c8      	cmp	r8, r9
 8000608:	d2ae      	bcs.n	8000568 <__udivmoddi4+0x1e8>
 800060a:	ebb9 0e02 	subs.w	lr, r9, r2
 800060e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000612:	3801      	subs	r0, #1
 8000614:	e7a8      	b.n	8000568 <__udivmoddi4+0x1e8>
 8000616:	4631      	mov	r1, r6
 8000618:	e7ed      	b.n	80005f6 <__udivmoddi4+0x276>
 800061a:	4603      	mov	r3, r0
 800061c:	e799      	b.n	8000552 <__udivmoddi4+0x1d2>
 800061e:	4630      	mov	r0, r6
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0x24c>
 8000622:	46d6      	mov	lr, sl
 8000624:	e77f      	b.n	8000526 <__udivmoddi4+0x1a6>
 8000626:	4463      	add	r3, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e74d      	b.n	80004c8 <__udivmoddi4+0x148>
 800062c:	4606      	mov	r6, r0
 800062e:	4623      	mov	r3, r4
 8000630:	4608      	mov	r0, r1
 8000632:	e70f      	b.n	8000454 <__udivmoddi4+0xd4>
 8000634:	3e02      	subs	r6, #2
 8000636:	4463      	add	r3, ip
 8000638:	e730      	b.n	800049c <__udivmoddi4+0x11c>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 faa7 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f861 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f8cb 	bl	80007e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000); // SEGGER_SYSVIEW_Start() is includede
 8000652:	4824      	ldr	r0, [pc, #144]	@ (80006e4 <main+0xa4>)
 8000654:	f004 fc7a 	bl	8004f4c <SEGGER_UART_init>

  DWT_CTRL |= (1 << 0);
 8000658:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <main+0xa8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a22      	ldr	r2, [pc, #136]	@ (80006e8 <main+0xa8>)
 800065e:	f043 0301 	orr.w	r3, r3, #1
 8000662:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000664:	f004 fa9c 	bl	8004ba0 <SEGGER_SYSVIEW_Conf>

//  SEGGER_SYSVIEW_Start();


  status = xTaskCreate(task1_handler, "Numele fetei", 200, "Maria", 2, &task1_handle);
 8000668:	4b20      	ldr	r3, [pc, #128]	@ (80006ec <main+0xac>)
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	2302      	movs	r3, #2
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <main+0xb0>)
 8000672:	22c8      	movs	r2, #200	@ 0xc8
 8000674:	491f      	ldr	r1, [pc, #124]	@ (80006f4 <main+0xb4>)
 8000676:	4820      	ldr	r0, [pc, #128]	@ (80006f8 <main+0xb8>)
 8000678:	f002 fbf6 	bl	8002e68 <xTaskCreate>
 800067c:	4603      	mov	r3, r0
 800067e:	4a1f      	ldr	r2, [pc, #124]	@ (80006fc <main+0xbc>)
 8000680:	6013      	str	r3, [r2, #0]

  configASSERT(status == pdPASS);
 8000682:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <main+0xbc>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d00b      	beq.n	80006a2 <main+0x62>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800068a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800068e:	f383 8811 	msr	BASEPRI, r3
 8000692:	f3bf 8f6f 	isb	sy
 8000696:	f3bf 8f4f 	dsb	sy
 800069a:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	e7fd      	b.n	800069e <main+0x5e>

  status = xTaskCreate(task2_handler,"Numele baiat",200,"Paul",2,&task2_handle);
 80006a2:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <main+0xc0>)
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2302      	movs	r3, #2
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <main+0xc4>)
 80006ac:	22c8      	movs	r2, #200	@ 0xc8
 80006ae:	4916      	ldr	r1, [pc, #88]	@ (8000708 <main+0xc8>)
 80006b0:	4816      	ldr	r0, [pc, #88]	@ (800070c <main+0xcc>)
 80006b2:	f002 fbd9 	bl	8002e68 <xTaskCreate>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a10      	ldr	r2, [pc, #64]	@ (80006fc <main+0xbc>)
 80006ba:	6013      	str	r3, [r2, #0]

  configASSERT(status == pdPASS);
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <main+0xbc>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d00b      	beq.n	80006dc <main+0x9c>
        __asm volatile
 80006c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006c8:	f383 8811 	msr	BASEPRI, r3
 80006cc:	f3bf 8f6f 	isb	sy
 80006d0:	f3bf 8f4f 	dsb	sy
 80006d4:	603b      	str	r3, [r7, #0]
    }
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <main+0x98>

  vTaskStartScheduler();
 80006dc:	f002 fd1a 	bl	8003114 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <main+0xa0>
 80006e4:	0007a120 	.word	0x0007a120
 80006e8:	e0001000 	.word	0xe0001000
 80006ec:	20000088 	.word	0x20000088
 80006f0:	08007eb8 	.word	0x08007eb8
 80006f4:	08007ec0 	.word	0x08007ec0
 80006f8:	080008e5 	.word	0x080008e5
 80006fc:	20000090 	.word	0x20000090
 8000700:	2000008c 	.word	0x2000008c
 8000704:	08007ed0 	.word	0x08007ed0
 8000708:	08007ed8 	.word	0x08007ed8
 800070c:	08000921 	.word	0x08000921

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	@ 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2234      	movs	r2, #52	@ 0x34
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f006 ff36 	bl	8007590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemClock_Config+0xd0>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	4a28      	ldr	r2, [pc, #160]	@ (80007e0 <SystemClock_Config+0xd0>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	@ 0x40
 8000744:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemClock_Config+0xd0>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	2300      	movs	r3, #0
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	4b23      	ldr	r3, [pc, #140]	@ (80007e4 <SystemClock_Config+0xd4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a22      	ldr	r2, [pc, #136]	@ (80007e4 <SystemClock_Config+0xd4>)
 800075a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b20      	ldr	r3, [pc, #128]	@ (80007e4 <SystemClock_Config+0xd4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076c:	2301      	movs	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000774:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800077e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000784:	23a8      	movs	r3, #168	@ 0xa8
 8000786:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4618      	mov	r0, r3
 800079a:	f001 f837 	bl	800180c <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007a4:	f000 f8ec 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	2105      	movs	r1, #5
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fcb8 	bl	800113c <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007d2:	f000 f8d5 	bl	8000980 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	@ 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b35      	ldr	r3, [pc, #212]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a34      	ldr	r2, [pc, #208]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b32      	ldr	r3, [pc, #200]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b2e      	ldr	r3, [pc, #184]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a2d      	ldr	r2, [pc, #180]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b2b      	ldr	r3, [pc, #172]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b27      	ldr	r3, [pc, #156]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a26      	ldr	r2, [pc, #152]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b24      	ldr	r3, [pc, #144]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a1f      	ldr	r2, [pc, #124]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	481a      	ldr	r0, [pc, #104]	@ (80008dc <MX_GPIO_Init+0xf4>)
 8000874:	f000 fc48 	bl	8001108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	4814      	ldr	r0, [pc, #80]	@ (80008e0 <MX_GPIO_Init+0xf8>)
 8000890:	f000 faa6 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000894:	230c      	movs	r3, #12
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a4:	2307      	movs	r3, #7
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	480b      	ldr	r0, [pc, #44]	@ (80008dc <MX_GPIO_Init+0xf4>)
 80008b0:	f000 fa96 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b4:	2320      	movs	r3, #32
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_GPIO_Init+0xf4>)
 80008cc:	f000 fa88 	bl	8000de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	@ 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020800 	.word	0x40020800

080008e4 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	static char msg[100];
	while(1)
	{
		snprintf(msg,sizeof(msg),"%s\n",(char*)parameters);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a09      	ldr	r2, [pc, #36]	@ (8000914 <task1_handler+0x30>)
 80008f0:	2164      	movs	r1, #100	@ 0x64
 80008f2:	4809      	ldr	r0, [pc, #36]	@ (8000918 <task1_handler+0x34>)
 80008f4:	f006 fe08 	bl	8007508 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80008f8:	4807      	ldr	r0, [pc, #28]	@ (8000918 <task1_handler+0x34>)
 80008fa:	f006 fd67 	bl	80073cc <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80008fe:	4b07      	ldr	r3, [pc, #28]	@ (800091c <task1_handler+0x38>)
 8000900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	f3bf 8f4f 	dsb	sy
 800090a:	f3bf 8f6f 	isb	sy
		snprintf(msg,sizeof(msg),"%s\n",(char*)parameters);
 800090e:	bf00      	nop
 8000910:	e7ec      	b.n	80008ec <task1_handler+0x8>
 8000912:	bf00      	nop
 8000914:	08007ee8 	.word	0x08007ee8
 8000918:	20000094 	.word	0x20000094
 800091c:	e000ed04 	.word	0xe000ed04

08000920 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	static char msg[100];
	while(1)
	{
		snprintf(msg,sizeof(msg),"%s\n",(char*)parameters);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a09      	ldr	r2, [pc, #36]	@ (8000950 <task2_handler+0x30>)
 800092c:	2164      	movs	r1, #100	@ 0x64
 800092e:	4809      	ldr	r0, [pc, #36]	@ (8000954 <task2_handler+0x34>)
 8000930:	f006 fdea 	bl	8007508 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000934:	4807      	ldr	r0, [pc, #28]	@ (8000954 <task2_handler+0x34>)
 8000936:	f006 fd49 	bl	80073cc <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 800093a:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <task2_handler+0x38>)
 800093c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	f3bf 8f4f 	dsb	sy
 8000946:	f3bf 8f6f 	isb	sy
		snprintf(msg,sizeof(msg),"%s\n",(char*)parameters);
 800094a:	bf00      	nop
 800094c:	e7ec      	b.n	8000928 <task2_handler+0x8>
 800094e:	bf00      	nop
 8000950:	08007ee8 	.word	0x08007ee8
 8000954:	200000f8 	.word	0x200000f8
 8000958:	e000ed04 	.word	0xe000ed04

0800095c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a04      	ldr	r2, [pc, #16]	@ (800097c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d101      	bne.n	8000972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800096e:	f000 f935 	bl	8000bdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40001000 	.word	0x40001000

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <Error_Handler+0x8>

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	4a0f      	ldr	r2, [pc, #60]	@ (80009d8 <HAL_MspInit+0x4c>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a2:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80009ca:	f003 fd27 	bl	800441c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08e      	sub	sp, #56	@ 0x38
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	4b33      	ldr	r3, [pc, #204]	@ (8000ac0 <HAL_InitTick+0xe4>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f4:	4a32      	ldr	r2, [pc, #200]	@ (8000ac0 <HAL_InitTick+0xe4>)
 80009f6:	f043 0310 	orr.w	r3, r3, #16
 80009fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fc:	4b30      	ldr	r3, [pc, #192]	@ (8000ac0 <HAL_InitTick+0xe4>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a00:	f003 0310 	and.w	r3, r3, #16
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a08:	f107 0210 	add.w	r2, r7, #16
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4611      	mov	r1, r2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fc98 	bl	8001348 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a18:	6a3b      	ldr	r3, [r7, #32]
 8000a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d103      	bne.n	8000a2a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a22:	f000 fc7d 	bl	8001320 <HAL_RCC_GetPCLK1Freq>
 8000a26:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a28:	e004      	b.n	8000a34 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a2a:	f000 fc79 	bl	8001320 <HAL_RCC_GetPCLK1Freq>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a36:	4a23      	ldr	r2, [pc, #140]	@ (8000ac4 <HAL_InitTick+0xe8>)
 8000a38:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3c:	0c9b      	lsrs	r3, r3, #18
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a42:	4b21      	ldr	r3, [pc, #132]	@ (8000ac8 <HAL_InitTick+0xec>)
 8000a44:	4a21      	ldr	r2, [pc, #132]	@ (8000acc <HAL_InitTick+0xf0>)
 8000a46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <HAL_InitTick+0xec>)
 8000a4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a4e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a50:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac8 <HAL_InitTick+0xec>)
 8000a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a54:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <HAL_InitTick+0xec>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <HAL_InitTick+0xec>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <HAL_InitTick+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a68:	4817      	ldr	r0, [pc, #92]	@ (8000ac8 <HAL_InitTick+0xec>)
 8000a6a:	f001 f96d 	bl	8001d48 <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d11b      	bne.n	8000ab4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a7c:	4812      	ldr	r0, [pc, #72]	@ (8000ac8 <HAL_InitTick+0xec>)
 8000a7e:	f001 f9bd 	bl	8001dfc <HAL_TIM_Base_Start_IT>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d111      	bne.n	8000ab4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a90:	2036      	movs	r0, #54	@ 0x36
 8000a92:	f000 f997 	bl	8000dc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d808      	bhi.n	8000aae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	2036      	movs	r0, #54	@ 0x36
 8000aa2:	f000 f973 	bl	8000d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad0 <HAL_InitTick+0xf4>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	e002      	b.n	8000ab4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ab4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3738      	adds	r7, #56	@ 0x38
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	431bde83 	.word	0x431bde83
 8000ac8:	2000015c 	.word	0x2000015c
 8000acc:	40001000 	.word	0x40001000
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <NMI_Handler+0x4>

08000adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b10:	4802      	ldr	r0, [pc, #8]	@ (8000b1c <TIM6_DAC_IRQHandler+0x10>)
 8000b12:	f001 f9e3 	bl	8001edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000015c 	.word	0x2000015c

08000b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <SystemInit+0x20>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <SystemInit+0x20>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b48:	f7ff ffea 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b4e:	490d      	ldr	r1, [pc, #52]	@ (8000b84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b50:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b64:	4c0a      	ldr	r4, [pc, #40]	@ (8000b90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b72:	f006 fd15 	bl	80075a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b76:	f7ff fd63 	bl	8000640 <main>
  bx  lr    
 8000b7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b88:	08008054 	.word	0x08008054
  ldr r2, =_sbss
 8000b8c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b90:	2001431c 	.word	0x2001431c

08000b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC_IRQHandler>
	...

08000b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <HAL_Init+0x40>)
 8000ba2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <HAL_Init+0x40>)
 8000bae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <HAL_Init+0x40>)
 8000bba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 f8d8 	bl	8000d76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	f7ff ff08 	bl	80009dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bcc:	f7ff fede 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023c00 	.word	0x40023c00

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	200001a4 	.word	0x200001a4

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	200001a4 	.word	0x200001a4

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	@ (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4907      	ldr	r1, [pc, #28]	@ (8000cb8 <__NVIC_EnableIRQ+0x38>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	@ (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	@ (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	@ 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	@ 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ff4c 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
 8000d98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9e:	f7ff ff61 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000da2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	68b9      	ldr	r1, [r7, #8]
 8000da8:	6978      	ldr	r0, [r7, #20]
 8000daa:	f7ff ffb1 	bl	8000d10 <NVIC_EncodePriority>
 8000dae:	4602      	mov	r2, r0
 8000db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff80 	bl	8000cbc <__NVIC_SetPriority>
}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff54 	bl	8000c80 <__NVIC_EnableIRQ>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	@ 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
 8000dfa:	e165      	b.n	80010c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	f040 8154 	bne.w	80010c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d005      	beq.n	8000e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d130      	bne.n	8000e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	091b      	lsrs	r3, r3, #4
 8000e7e:	f003 0201 	and.w	r2, r3, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d017      	beq.n	8000ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d123      	bne.n	8000f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	69b9      	ldr	r1, [r7, #24]
 8000f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0203 	and.w	r2, r3, #3
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80ae 	beq.w	80010c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80010e0 <HAL_GPIO_Init+0x300>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	4a5c      	ldr	r2, [pc, #368]	@ (80010e0 <HAL_GPIO_Init+0x300>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f76:	4b5a      	ldr	r3, [pc, #360]	@ (80010e0 <HAL_GPIO_Init+0x300>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f82:	4a58      	ldr	r2, [pc, #352]	@ (80010e4 <HAL_GPIO_Init+0x304>)
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	3302      	adds	r3, #2
 8000f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	220f      	movs	r2, #15
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4f      	ldr	r2, [pc, #316]	@ (80010e8 <HAL_GPIO_Init+0x308>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d025      	beq.n	8000ffa <HAL_GPIO_Init+0x21a>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4e      	ldr	r2, [pc, #312]	@ (80010ec <HAL_GPIO_Init+0x30c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d01f      	beq.n	8000ff6 <HAL_GPIO_Init+0x216>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4d      	ldr	r2, [pc, #308]	@ (80010f0 <HAL_GPIO_Init+0x310>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d019      	beq.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4c      	ldr	r2, [pc, #304]	@ (80010f4 <HAL_GPIO_Init+0x314>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d013      	beq.n	8000fee <HAL_GPIO_Init+0x20e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4b      	ldr	r2, [pc, #300]	@ (80010f8 <HAL_GPIO_Init+0x318>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d00d      	beq.n	8000fea <HAL_GPIO_Init+0x20a>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4a      	ldr	r2, [pc, #296]	@ (80010fc <HAL_GPIO_Init+0x31c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_GPIO_Init+0x206>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a49      	ldr	r2, [pc, #292]	@ (8001100 <HAL_GPIO_Init+0x320>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d101      	bne.n	8000fe2 <HAL_GPIO_Init+0x202>
 8000fde:	2306      	movs	r3, #6
 8000fe0:	e00c      	b.n	8000ffc <HAL_GPIO_Init+0x21c>
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	e00a      	b.n	8000ffc <HAL_GPIO_Init+0x21c>
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	e008      	b.n	8000ffc <HAL_GPIO_Init+0x21c>
 8000fea:	2304      	movs	r3, #4
 8000fec:	e006      	b.n	8000ffc <HAL_GPIO_Init+0x21c>
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e004      	b.n	8000ffc <HAL_GPIO_Init+0x21c>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e002      	b.n	8000ffc <HAL_GPIO_Init+0x21c>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <HAL_GPIO_Init+0x21c>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	69fa      	ldr	r2, [r7, #28]
 8000ffe:	f002 0203 	and.w	r2, r2, #3
 8001002:	0092      	lsls	r2, r2, #2
 8001004:	4093      	lsls	r3, r2
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800100c:	4935      	ldr	r1, [pc, #212]	@ (80010e4 <HAL_GPIO_Init+0x304>)
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	3302      	adds	r3, #2
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101a:	4b3a      	ldr	r3, [pc, #232]	@ (8001104 <HAL_GPIO_Init+0x324>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800103e:	4a31      	ldr	r2, [pc, #196]	@ (8001104 <HAL_GPIO_Init+0x324>)
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001044:	4b2f      	ldr	r3, [pc, #188]	@ (8001104 <HAL_GPIO_Init+0x324>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001068:	4a26      	ldr	r2, [pc, #152]	@ (8001104 <HAL_GPIO_Init+0x324>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800106e:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <HAL_GPIO_Init+0x324>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001092:	4a1c      	ldr	r2, [pc, #112]	@ (8001104 <HAL_GPIO_Init+0x324>)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001098:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <HAL_GPIO_Init+0x324>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010bc:	4a11      	ldr	r2, [pc, #68]	@ (8001104 <HAL_GPIO_Init+0x324>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3301      	adds	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	2b0f      	cmp	r3, #15
 80010cc:	f67f ae96 	bls.w	8000dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3724      	adds	r7, #36	@ 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40013800 	.word	0x40013800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020400 	.word	0x40020400
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020c00 	.word	0x40020c00
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40021400 	.word	0x40021400
 8001100:	40021800 	.word	0x40021800
 8001104:	40013c00 	.word	0x40013c00

08001108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
 8001114:	4613      	mov	r3, r2
 8001116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001118:	787b      	ldrb	r3, [r7, #1]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001124:	e003      	b.n	800112e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	041a      	lsls	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	619a      	str	r2, [r3, #24]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e0cc      	b.n	80012ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001150:	4b68      	ldr	r3, [pc, #416]	@ (80012f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	d90c      	bls.n	8001178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115e:	4b65      	ldr	r3, [pc, #404]	@ (80012f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001166:	4b63      	ldr	r3, [pc, #396]	@ (80012f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d001      	beq.n	8001178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e0b8      	b.n	80012ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d020      	beq.n	80011c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001190:	4b59      	ldr	r3, [pc, #356]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	4a58      	ldr	r2, [pc, #352]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800119a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011a8:	4b53      	ldr	r3, [pc, #332]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4a52      	ldr	r2, [pc, #328]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b4:	4b50      	ldr	r3, [pc, #320]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	494d      	ldr	r1, [pc, #308]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d044      	beq.n	800125c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d107      	bne.n	80011ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011da:	4b47      	ldr	r3, [pc, #284]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d119      	bne.n	800121a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e07f      	b.n	80012ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d003      	beq.n	80011fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d107      	bne.n	800120a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011fa:	4b3f      	ldr	r3, [pc, #252]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d109      	bne.n	800121a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e06f      	b.n	80012ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120a:	4b3b      	ldr	r3, [pc, #236]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e067      	b.n	80012ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800121a:	4b37      	ldr	r3, [pc, #220]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f023 0203 	bic.w	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	4934      	ldr	r1, [pc, #208]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001228:	4313      	orrs	r3, r2
 800122a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800122c:	f7ff fcea 	bl	8000c04 <HAL_GetTick>
 8001230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001232:	e00a      	b.n	800124a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001234:	f7ff fce6 	bl	8000c04 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001242:	4293      	cmp	r3, r2
 8001244:	d901      	bls.n	800124a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e04f      	b.n	80012ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124a:	4b2b      	ldr	r3, [pc, #172]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 020c 	and.w	r2, r3, #12
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	429a      	cmp	r2, r3
 800125a:	d1eb      	bne.n	8001234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800125c:	4b25      	ldr	r3, [pc, #148]	@ (80012f4 <HAL_RCC_ClockConfig+0x1b8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 030f 	and.w	r3, r3, #15
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d20c      	bcs.n	8001284 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126a:	4b22      	ldr	r3, [pc, #136]	@ (80012f4 <HAL_RCC_ClockConfig+0x1b8>)
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001272:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d001      	beq.n	8001284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e032      	b.n	80012ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d008      	beq.n	80012a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001290:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	4916      	ldr	r1, [pc, #88]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d009      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012ae:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	490e      	ldr	r1, [pc, #56]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012c2:	f000 f873 	bl	80013ac <HAL_RCC_GetSysClockFreq>
 80012c6:	4602      	mov	r2, r0
 80012c8:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	490a      	ldr	r1, [pc, #40]	@ (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 80012d4:	5ccb      	ldrb	r3, [r1, r3]
 80012d6:	fa22 f303 	lsr.w	r3, r2, r3
 80012da:	4a09      	ldr	r2, [pc, #36]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <HAL_RCC_ClockConfig+0x1c8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb7a 	bl	80009dc <HAL_InitTick>

  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023c00 	.word	0x40023c00
 80012f8:	40023800 	.word	0x40023800
 80012fc:	08007fbc 	.word	0x08007fbc
 8001300:	20000000 	.word	0x20000000
 8001304:	20000004 	.word	0x20000004

08001308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <HAL_RCC_GetHCLKFreq+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000000 	.word	0x20000000

08001320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001324:	f7ff fff0 	bl	8001308 <HAL_RCC_GetHCLKFreq>
 8001328:	4602      	mov	r2, r0
 800132a:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	0a9b      	lsrs	r3, r3, #10
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	4903      	ldr	r1, [pc, #12]	@ (8001344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001336:	5ccb      	ldrb	r3, [r1, r3]
 8001338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800133c:	4618      	mov	r0, r3
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	08007fcc 	.word	0x08007fcc

08001348 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	220f      	movs	r2, #15
 8001356:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001358:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <HAL_RCC_GetClockConfig+0x5c>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0203 	and.w	r2, r3, #3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001364:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800137c:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <HAL_RCC_GetClockConfig+0x5c>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	08db      	lsrs	r3, r3, #3
 8001382:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800138a:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <HAL_RCC_GetClockConfig+0x60>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 020f 	and.w	r2, r3, #15
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	601a      	str	r2, [r3, #0]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40023c00 	.word	0x40023c00

080013ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013b0:	b0ae      	sub	sp, #184	@ 0xb8
 80013b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013d2:	4bcb      	ldr	r3, [pc, #812]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x354>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b0c      	cmp	r3, #12
 80013dc:	f200 8206 	bhi.w	80017ec <HAL_RCC_GetSysClockFreq+0x440>
 80013e0:	a201      	add	r2, pc, #4	@ (adr r2, 80013e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e6:	bf00      	nop
 80013e8:	0800141d 	.word	0x0800141d
 80013ec:	080017ed 	.word	0x080017ed
 80013f0:	080017ed 	.word	0x080017ed
 80013f4:	080017ed 	.word	0x080017ed
 80013f8:	08001425 	.word	0x08001425
 80013fc:	080017ed 	.word	0x080017ed
 8001400:	080017ed 	.word	0x080017ed
 8001404:	080017ed 	.word	0x080017ed
 8001408:	0800142d 	.word	0x0800142d
 800140c:	080017ed 	.word	0x080017ed
 8001410:	080017ed 	.word	0x080017ed
 8001414:	080017ed 	.word	0x080017ed
 8001418:	0800161d 	.word	0x0800161d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800141c:	4bb9      	ldr	r3, [pc, #740]	@ (8001704 <HAL_RCC_GetSysClockFreq+0x358>)
 800141e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001422:	e1e7      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001424:	4bb8      	ldr	r3, [pc, #736]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800142a:	e1e3      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800142c:	4bb4      	ldr	r3, [pc, #720]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x354>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001434:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001438:	4bb1      	ldr	r3, [pc, #708]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x354>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d071      	beq.n	8001528 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001444:	4bae      	ldr	r3, [pc, #696]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x354>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	099b      	lsrs	r3, r3, #6
 800144a:	2200      	movs	r2, #0
 800144c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001450:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001454:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800145c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800146a:	4622      	mov	r2, r4
 800146c:	462b      	mov	r3, r5
 800146e:	f04f 0000 	mov.w	r0, #0
 8001472:	f04f 0100 	mov.w	r1, #0
 8001476:	0159      	lsls	r1, r3, #5
 8001478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800147c:	0150      	lsls	r0, r2, #5
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4621      	mov	r1, r4
 8001484:	1a51      	subs	r1, r2, r1
 8001486:	6439      	str	r1, [r7, #64]	@ 0x40
 8001488:	4629      	mov	r1, r5
 800148a:	eb63 0301 	sbc.w	r3, r3, r1
 800148e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800149c:	4649      	mov	r1, r9
 800149e:	018b      	lsls	r3, r1, #6
 80014a0:	4641      	mov	r1, r8
 80014a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014a6:	4641      	mov	r1, r8
 80014a8:	018a      	lsls	r2, r1, #6
 80014aa:	4641      	mov	r1, r8
 80014ac:	1a51      	subs	r1, r2, r1
 80014ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80014b0:	4649      	mov	r1, r9
 80014b2:	eb63 0301 	sbc.w	r3, r3, r1
 80014b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80014c4:	4649      	mov	r1, r9
 80014c6:	00cb      	lsls	r3, r1, #3
 80014c8:	4641      	mov	r1, r8
 80014ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014ce:	4641      	mov	r1, r8
 80014d0:	00ca      	lsls	r2, r1, #3
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	4603      	mov	r3, r0
 80014d8:	4622      	mov	r2, r4
 80014da:	189b      	adds	r3, r3, r2
 80014dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80014de:	462b      	mov	r3, r5
 80014e0:	460a      	mov	r2, r1
 80014e2:	eb42 0303 	adc.w	r3, r2, r3
 80014e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014f4:	4629      	mov	r1, r5
 80014f6:	024b      	lsls	r3, r1, #9
 80014f8:	4621      	mov	r1, r4
 80014fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014fe:	4621      	mov	r1, r4
 8001500:	024a      	lsls	r2, r1, #9
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800150a:	2200      	movs	r2, #0
 800150c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001510:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001514:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001518:	f7fe ff1a 	bl	8000350 <__aeabi_uldivmod>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4613      	mov	r3, r2
 8001522:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001526:	e067      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001528:	4b75      	ldr	r3, [pc, #468]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x354>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	099b      	lsrs	r3, r3, #6
 800152e:	2200      	movs	r2, #0
 8001530:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001534:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001538:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800153c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001540:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001542:	2300      	movs	r3, #0
 8001544:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001546:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800154a:	4622      	mov	r2, r4
 800154c:	462b      	mov	r3, r5
 800154e:	f04f 0000 	mov.w	r0, #0
 8001552:	f04f 0100 	mov.w	r1, #0
 8001556:	0159      	lsls	r1, r3, #5
 8001558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800155c:	0150      	lsls	r0, r2, #5
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4621      	mov	r1, r4
 8001564:	1a51      	subs	r1, r2, r1
 8001566:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001568:	4629      	mov	r1, r5
 800156a:	eb63 0301 	sbc.w	r3, r3, r1
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800157c:	4649      	mov	r1, r9
 800157e:	018b      	lsls	r3, r1, #6
 8001580:	4641      	mov	r1, r8
 8001582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001586:	4641      	mov	r1, r8
 8001588:	018a      	lsls	r2, r1, #6
 800158a:	4641      	mov	r1, r8
 800158c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001590:	4649      	mov	r1, r9
 8001592:	eb63 0b01 	sbc.w	fp, r3, r1
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015aa:	4692      	mov	sl, r2
 80015ac:	469b      	mov	fp, r3
 80015ae:	4623      	mov	r3, r4
 80015b0:	eb1a 0303 	adds.w	r3, sl, r3
 80015b4:	623b      	str	r3, [r7, #32]
 80015b6:	462b      	mov	r3, r5
 80015b8:	eb4b 0303 	adc.w	r3, fp, r3
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015ca:	4629      	mov	r1, r5
 80015cc:	028b      	lsls	r3, r1, #10
 80015ce:	4621      	mov	r1, r4
 80015d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015d4:	4621      	mov	r1, r4
 80015d6:	028a      	lsls	r2, r1, #10
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015e0:	2200      	movs	r2, #0
 80015e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80015e4:	677a      	str	r2, [r7, #116]	@ 0x74
 80015e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015ea:	f7fe feb1 	bl	8000350 <__aeabi_uldivmod>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4613      	mov	r3, r2
 80015f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015f8:	4b41      	ldr	r3, [pc, #260]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x354>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	0c1b      	lsrs	r3, r3, #16
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	3301      	adds	r3, #1
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800160a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800160e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800161a:	e0eb      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800161c:	4b38      	ldr	r3, [pc, #224]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x354>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001628:	4b35      	ldr	r3, [pc, #212]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x354>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d06b      	beq.n	800170c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001634:	4b32      	ldr	r3, [pc, #200]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x354>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	099b      	lsrs	r3, r3, #6
 800163a:	2200      	movs	r2, #0
 800163c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800163e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001640:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001646:	663b      	str	r3, [r7, #96]	@ 0x60
 8001648:	2300      	movs	r3, #0
 800164a:	667b      	str	r3, [r7, #100]	@ 0x64
 800164c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001650:	4622      	mov	r2, r4
 8001652:	462b      	mov	r3, r5
 8001654:	f04f 0000 	mov.w	r0, #0
 8001658:	f04f 0100 	mov.w	r1, #0
 800165c:	0159      	lsls	r1, r3, #5
 800165e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001662:	0150      	lsls	r0, r2, #5
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4621      	mov	r1, r4
 800166a:	1a51      	subs	r1, r2, r1
 800166c:	61b9      	str	r1, [r7, #24]
 800166e:	4629      	mov	r1, r5
 8001670:	eb63 0301 	sbc.w	r3, r3, r1
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001682:	4659      	mov	r1, fp
 8001684:	018b      	lsls	r3, r1, #6
 8001686:	4651      	mov	r1, sl
 8001688:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800168c:	4651      	mov	r1, sl
 800168e:	018a      	lsls	r2, r1, #6
 8001690:	4651      	mov	r1, sl
 8001692:	ebb2 0801 	subs.w	r8, r2, r1
 8001696:	4659      	mov	r1, fp
 8001698:	eb63 0901 	sbc.w	r9, r3, r1
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016b0:	4690      	mov	r8, r2
 80016b2:	4699      	mov	r9, r3
 80016b4:	4623      	mov	r3, r4
 80016b6:	eb18 0303 	adds.w	r3, r8, r3
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	462b      	mov	r3, r5
 80016be:	eb49 0303 	adc.w	r3, r9, r3
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016d0:	4629      	mov	r1, r5
 80016d2:	024b      	lsls	r3, r1, #9
 80016d4:	4621      	mov	r1, r4
 80016d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016da:	4621      	mov	r1, r4
 80016dc:	024a      	lsls	r2, r1, #9
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016e6:	2200      	movs	r2, #0
 80016e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80016ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016f0:	f7fe fe2e 	bl	8000350 <__aeabi_uldivmod>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4613      	mov	r3, r2
 80016fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016fe:	e065      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x420>
 8001700:	40023800 	.word	0x40023800
 8001704:	00f42400 	.word	0x00f42400
 8001708:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170c:	4b3d      	ldr	r3, [pc, #244]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x458>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	099b      	lsrs	r3, r3, #6
 8001712:	2200      	movs	r2, #0
 8001714:	4618      	mov	r0, r3
 8001716:	4611      	mov	r1, r2
 8001718:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800171c:	653b      	str	r3, [r7, #80]	@ 0x50
 800171e:	2300      	movs	r3, #0
 8001720:	657b      	str	r3, [r7, #84]	@ 0x54
 8001722:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001726:	4642      	mov	r2, r8
 8001728:	464b      	mov	r3, r9
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	f04f 0100 	mov.w	r1, #0
 8001732:	0159      	lsls	r1, r3, #5
 8001734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001738:	0150      	lsls	r0, r2, #5
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4641      	mov	r1, r8
 8001740:	1a51      	subs	r1, r2, r1
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	4649      	mov	r1, r9
 8001746:	eb63 0301 	sbc.w	r3, r3, r1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001758:	4659      	mov	r1, fp
 800175a:	018b      	lsls	r3, r1, #6
 800175c:	4651      	mov	r1, sl
 800175e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001762:	4651      	mov	r1, sl
 8001764:	018a      	lsls	r2, r1, #6
 8001766:	4651      	mov	r1, sl
 8001768:	1a54      	subs	r4, r2, r1
 800176a:	4659      	mov	r1, fp
 800176c:	eb63 0501 	sbc.w	r5, r3, r1
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	00eb      	lsls	r3, r5, #3
 800177a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800177e:	00e2      	lsls	r2, r4, #3
 8001780:	4614      	mov	r4, r2
 8001782:	461d      	mov	r5, r3
 8001784:	4643      	mov	r3, r8
 8001786:	18e3      	adds	r3, r4, r3
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	464b      	mov	r3, r9
 800178c:	eb45 0303 	adc.w	r3, r5, r3
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800179e:	4629      	mov	r1, r5
 80017a0:	028b      	lsls	r3, r1, #10
 80017a2:	4621      	mov	r1, r4
 80017a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017a8:	4621      	mov	r1, r4
 80017aa:	028a      	lsls	r2, r1, #10
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017b4:	2200      	movs	r2, #0
 80017b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017be:	f7fe fdc7 	bl	8000350 <__aeabi_uldivmod>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4613      	mov	r3, r2
 80017c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	0f1b      	lsrs	r3, r3, #28
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80017da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017ea:	e003      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	37b8      	adds	r7, #184	@ 0xb8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	00f42400 	.word	0x00f42400

0800180c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e28d      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8083 	beq.w	8001932 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800182c:	4b94      	ldr	r3, [pc, #592]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b04      	cmp	r3, #4
 8001836:	d019      	beq.n	800186c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001838:	4b91      	ldr	r3, [pc, #580]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001840:	2b08      	cmp	r3, #8
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001844:	4b8e      	ldr	r3, [pc, #568]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800184c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001850:	d00c      	beq.n	800186c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001852:	4b8b      	ldr	r3, [pc, #556]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d112      	bne.n	8001884 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185e:	4b88      	ldr	r3, [pc, #544]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001866:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800186a:	d10b      	bne.n	8001884 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186c:	4b84      	ldr	r3, [pc, #528]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d05b      	beq.n	8001930 <HAL_RCC_OscConfig+0x124>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d157      	bne.n	8001930 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e25a      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800188c:	d106      	bne.n	800189c <HAL_RCC_OscConfig+0x90>
 800188e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a7b      	ldr	r2, [pc, #492]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e01d      	b.n	80018d8 <HAL_RCC_OscConfig+0xcc>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0xb4>
 80018a6:	4b76      	ldr	r3, [pc, #472]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a75      	ldr	r2, [pc, #468]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b73      	ldr	r3, [pc, #460]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a72      	ldr	r2, [pc, #456]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e00b      	b.n	80018d8 <HAL_RCC_OscConfig+0xcc>
 80018c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a6b      	ldr	r2, [pc, #428]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff f990 	bl	8000c04 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff f98c 	bl	8000c04 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	@ 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e21f      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b61      	ldr	r3, [pc, #388]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0xdc>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff f97c 	bl	8000c04 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff f978 	bl	8000c04 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	@ 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e20b      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	4b57      	ldr	r3, [pc, #348]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x104>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d06f      	beq.n	8001a1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800193e:	4b50      	ldr	r3, [pc, #320]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b00      	cmp	r3, #0
 8001948:	d017      	beq.n	800197a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800194a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001952:	2b08      	cmp	r3, #8
 8001954:	d105      	bne.n	8001962 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001956:	4b4a      	ldr	r3, [pc, #296]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00b      	beq.n	800197a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001962:	4b47      	ldr	r3, [pc, #284]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800196a:	2b0c      	cmp	r3, #12
 800196c:	d11c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196e:	4b44      	ldr	r3, [pc, #272]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d116      	bne.n	80019a8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	4b41      	ldr	r3, [pc, #260]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <HAL_RCC_OscConfig+0x186>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e1d3      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001992:	4b3b      	ldr	r3, [pc, #236]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4937      	ldr	r1, [pc, #220]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a6:	e03a      	b.n	8001a1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b0:	4b34      	ldr	r3, [pc, #208]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff f925 	bl	8000c04 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff f921 	bl	8000c04 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e1b4      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019dc:	4b28      	ldr	r3, [pc, #160]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4925      	ldr	r1, [pc, #148]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
 80019f0:	e015      	b.n	8001a1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f2:	4b24      	ldr	r3, [pc, #144]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f904 	bl	8000c04 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a00:	f7ff f900 	bl	8000c04 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e193      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	4b1b      	ldr	r3, [pc, #108]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d036      	beq.n	8001a98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d016      	beq.n	8001a60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_RCC_OscConfig+0x27c>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff f8e4 	bl	8000c04 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a40:	f7ff f8e0 	bl	8000c04 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e173      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x234>
 8001a5e:	e01b      	b.n	8001a98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_RCC_OscConfig+0x27c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a66:	f7ff f8cd 	bl	8000c04 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6c:	e00e      	b.n	8001a8c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6e:	f7ff f8c9 	bl	8000c04 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d907      	bls.n	8001a8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e15c      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
 8001a80:	40023800 	.word	0x40023800
 8001a84:	42470000 	.word	0x42470000
 8001a88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8c:	4b8a      	ldr	r3, [pc, #552]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1ea      	bne.n	8001a6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 8097 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aaa:	4b83      	ldr	r3, [pc, #524]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10f      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	4b7f      	ldr	r3, [pc, #508]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	4a7e      	ldr	r2, [pc, #504]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac6:	4b7c      	ldr	r3, [pc, #496]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad6:	4b79      	ldr	r3, [pc, #484]	@ (8001cbc <HAL_RCC_OscConfig+0x4b0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d118      	bne.n	8001b14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae2:	4b76      	ldr	r3, [pc, #472]	@ (8001cbc <HAL_RCC_OscConfig+0x4b0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a75      	ldr	r2, [pc, #468]	@ (8001cbc <HAL_RCC_OscConfig+0x4b0>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aee:	f7ff f889 	bl	8000c04 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7ff f885 	bl	8000c04 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e118      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b6c      	ldr	r3, [pc, #432]	@ (8001cbc <HAL_RCC_OscConfig+0x4b0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x31e>
 8001b1c:	4b66      	ldr	r3, [pc, #408]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b20:	4a65      	ldr	r2, [pc, #404]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b28:	e01c      	b.n	8001b64 <HAL_RCC_OscConfig+0x358>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x340>
 8001b32:	4b61      	ldr	r3, [pc, #388]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b36:	4a60      	ldr	r2, [pc, #384]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b3e:	4b5e      	ldr	r3, [pc, #376]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b42:	4a5d      	ldr	r2, [pc, #372]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b4a:	e00b      	b.n	8001b64 <HAL_RCC_OscConfig+0x358>
 8001b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b50:	4a59      	ldr	r2, [pc, #356]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	f023 0301 	bic.w	r3, r3, #1
 8001b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b58:	4b57      	ldr	r3, [pc, #348]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5c:	4a56      	ldr	r2, [pc, #344]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b5e:	f023 0304 	bic.w	r3, r3, #4
 8001b62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d015      	beq.n	8001b98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f84a 	bl	8000c04 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b74:	f7ff f846 	bl	8000c04 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e0d7      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0ee      	beq.n	8001b74 <HAL_RCC_OscConfig+0x368>
 8001b96:	e014      	b.n	8001bc2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b98:	f7ff f834 	bl	8000c04 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba0:	f7ff f830 	bl	8000c04 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e0c1      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb6:	4b40      	ldr	r3, [pc, #256]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1ee      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	4a3a      	ldr	r2, [pc, #232]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80ad 	beq.w	8001d38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bde:	4b36      	ldr	r3, [pc, #216]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d060      	beq.n	8001cac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d145      	bne.n	8001c7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b33      	ldr	r3, [pc, #204]	@ (8001cc0 <HAL_RCC_OscConfig+0x4b4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f804 	bl	8000c04 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff f800 	bl	8000c04 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e093      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c12:	4b29      	ldr	r3, [pc, #164]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2c:	019b      	lsls	r3, r3, #6
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	3b01      	subs	r3, #1
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c40:	061b      	lsls	r3, r3, #24
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c48:	071b      	lsls	r3, r3, #28
 8001c4a:	491b      	ldr	r1, [pc, #108]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c50:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <HAL_RCC_OscConfig+0x4b4>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7fe ffd5 	bl	8000c04 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7fe ffd1 	bl	8000c04 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e064      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x452>
 8001c7c:	e05c      	b.n	8001d38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_RCC_OscConfig+0x4b4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7fe ffbe 	bl	8000c04 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7fe ffba 	bl	8000c04 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e04d      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x480>
 8001caa:	e045      	b.n	8001d38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e040      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d44 <HAL_RCC_OscConfig+0x538>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d030      	beq.n	8001d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d129      	bne.n	8001d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d122      	bne.n	8001d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d119      	bne.n	8001d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d10f      	bne.n	8001d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d107      	bne.n	8001d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800

08001d48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e041      	b.n	8001dde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f839 	bl	8001de6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3304      	adds	r3, #4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4610      	mov	r0, r2
 8001d88:	f000 f9c0 	bl	800210c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d001      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e04e      	b.n	8001eb2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a23      	ldr	r2, [pc, #140]	@ (8001ec0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d022      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e3e:	d01d      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d018      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1c      	ldr	r2, [pc, #112]	@ (8001ecc <HAL_TIM_Base_Start_IT+0xd0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00e      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a19      	ldr	r2, [pc, #100]	@ (8001ed4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a18      	ldr	r2, [pc, #96]	@ (8001ed8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d111      	bne.n	8001ea0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d010      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9e:	e007      	b.n	8001eb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	40000400 	.word	0x40000400
 8001ec8:	40000800 	.word	0x40000800
 8001ecc:	40000c00 	.word	0x40000c00
 8001ed0:	40010400 	.word	0x40010400
 8001ed4:	40014000 	.word	0x40014000
 8001ed8:	40001800 	.word	0x40001800

08001edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d020      	beq.n	8001f40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d01b      	beq.n	8001f40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0202 	mvn.w	r2, #2
 8001f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8d2 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8001f2c:	e005      	b.n	8001f3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f8c4 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f8d5 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d020      	beq.n	8001f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01b      	beq.n	8001f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0204 	mvn.w	r2, #4
 8001f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2202      	movs	r2, #2
 8001f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8ac 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8001f78:	e005      	b.n	8001f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f89e 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f8af 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d020      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01b      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0208 	mvn.w	r2, #8
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2204      	movs	r2, #4
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f886 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f878 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f889 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d020      	beq.n	8002024 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01b      	beq.n	8002024 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0210 	mvn.w	r2, #16
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f860 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f852 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f863 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00c      	beq.n	8002048 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0201 	mvn.w	r2, #1
 8002040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe fc8a 	bl	800095c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00c      	beq.n	800206c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f906 	bl	8002278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f834 	bl	80020f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0220 	mvn.w	r2, #32
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f8d8 	bl	8002264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a46      	ldr	r2, [pc, #280]	@ (8002238 <TIM_Base_SetConfig+0x12c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d013      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800212a:	d00f      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a43      	ldr	r2, [pc, #268]	@ (800223c <TIM_Base_SetConfig+0x130>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00b      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a42      	ldr	r2, [pc, #264]	@ (8002240 <TIM_Base_SetConfig+0x134>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d007      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a41      	ldr	r2, [pc, #260]	@ (8002244 <TIM_Base_SetConfig+0x138>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d003      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a40      	ldr	r2, [pc, #256]	@ (8002248 <TIM_Base_SetConfig+0x13c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d108      	bne.n	800215e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a35      	ldr	r2, [pc, #212]	@ (8002238 <TIM_Base_SetConfig+0x12c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d02b      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800216c:	d027      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a32      	ldr	r2, [pc, #200]	@ (800223c <TIM_Base_SetConfig+0x130>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d023      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a31      	ldr	r2, [pc, #196]	@ (8002240 <TIM_Base_SetConfig+0x134>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a30      	ldr	r2, [pc, #192]	@ (8002244 <TIM_Base_SetConfig+0x138>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d01b      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2f      	ldr	r2, [pc, #188]	@ (8002248 <TIM_Base_SetConfig+0x13c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d017      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a2e      	ldr	r2, [pc, #184]	@ (800224c <TIM_Base_SetConfig+0x140>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a2d      	ldr	r2, [pc, #180]	@ (8002250 <TIM_Base_SetConfig+0x144>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00f      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002254 <TIM_Base_SetConfig+0x148>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00b      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002258 <TIM_Base_SetConfig+0x14c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a2a      	ldr	r2, [pc, #168]	@ (800225c <TIM_Base_SetConfig+0x150>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d003      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a29      	ldr	r2, [pc, #164]	@ (8002260 <TIM_Base_SetConfig+0x154>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d108      	bne.n	80021d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a10      	ldr	r2, [pc, #64]	@ (8002238 <TIM_Base_SetConfig+0x12c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d003      	beq.n	8002204 <TIM_Base_SetConfig+0xf8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a12      	ldr	r2, [pc, #72]	@ (8002248 <TIM_Base_SetConfig+0x13c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d103      	bne.n	800220c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d105      	bne.n	800222a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f023 0201 	bic.w	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	611a      	str	r2, [r3, #16]
  }
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40010000 	.word	0x40010000
 800223c:	40000400 	.word	0x40000400
 8002240:	40000800 	.word	0x40000800
 8002244:	40000c00 	.word	0x40000c00
 8002248:	40010400 	.word	0x40010400
 800224c:	40014000 	.word	0x40014000
 8002250:	40014400 	.word	0x40014400
 8002254:	40014800 	.word	0x40014800
 8002258:	40001800 	.word	0x40001800
 800225c:	40001c00 	.word	0x40001c00
 8002260:	40002000 	.word	0x40002000

08002264 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f103 0208 	add.w	r2, r3, #8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f103 0208 	add.w	r2, r3, #8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f103 0208 	add.w	r2, r3, #8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	601a      	str	r2, [r3, #0]
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800232e:	b480      	push	{r7}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d103      	bne.n	800234e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e00c      	b.n	8002368 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3308      	adds	r3, #8
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e002      	b.n	800235c <vListInsert+0x2e>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	429a      	cmp	r2, r3
 8002366:	d2f6      	bcs.n	8002356 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	601a      	str	r2, [r3, #0]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6892      	ldr	r2, [r2, #8]
 80023b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6852      	ldr	r2, [r2, #4]
 80023c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d103      	bne.n	80023d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	1e5a      	subs	r2, r3, #1
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10b      	bne.n	8002420 <xQueueGenericReset+0x2c>
        __asm volatile
 8002408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800240c:	f383 8811 	msr	BASEPRI, r3
 8002410:	f3bf 8f6f 	isb	sy
 8002414:	f3bf 8f4f 	dsb	sy
 8002418:	60bb      	str	r3, [r7, #8]
    }
 800241a:	bf00      	nop
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002420:	f002 f87c 	bl	800451c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242c:	68f9      	ldr	r1, [r7, #12]
 800242e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	441a      	add	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002450:	3b01      	subs	r3, #1
 8002452:	68f9      	ldr	r1, [r7, #12]
 8002454:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	441a      	add	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	22ff      	movs	r2, #255	@ 0xff
 8002464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	22ff      	movs	r2, #255	@ 0xff
 800246c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <xQueueGenericReset+0x96>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00f      	beq.n	800249e <xQueueGenericReset+0xaa>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3310      	adds	r3, #16
 8002482:	4618      	mov	r0, r3
 8002484:	f001 f8c6 	bl	8003614 <xTaskRemoveFromEventList>
 8002488:	e009      	b.n	800249e <xQueueGenericReset+0xaa>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3310      	adds	r3, #16
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fefc 	bl	800228c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3324      	adds	r3, #36	@ 0x24
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fef7 	bl	800228c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800249e:	f002 f86f 	bl	8004580 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80024a2:	2301      	movs	r3, #1
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	@ 0x30
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	4613      	mov	r3, r2
 80024b8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10b      	bne.n	80024d8 <xQueueGenericCreate+0x2c>
        __asm volatile
 80024c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	61bb      	str	r3, [r7, #24]
    }
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	fb02 f303 	mul.w	r3, r2, r3
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d006      	beq.n	80024f6 <xQueueGenericCreate+0x4a>
 80024e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d101      	bne.n	80024fa <xQueueGenericCreate+0x4e>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <xQueueGenericCreate+0x50>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10b      	bne.n	8002518 <xQueueGenericCreate+0x6c>
        __asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	617b      	str	r3, [r7, #20]
    }
 8002512:	bf00      	nop
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800251e:	d90b      	bls.n	8002538 <xQueueGenericCreate+0x8c>
        __asm volatile
 8002520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002524:	f383 8811 	msr	BASEPRI, r3
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	613b      	str	r3, [r7, #16]
    }
 8002532:	bf00      	nop
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	3350      	adds	r3, #80	@ 0x50
 800253c:	4618      	mov	r0, r3
 800253e:	f002 f91f 	bl	8004780 <pvPortMalloc>
 8002542:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00d      	beq.n	8002566 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3350      	adds	r3, #80	@ 0x50
 8002552:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002554:	79fa      	ldrb	r2, [r7, #7]
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	4613      	mov	r3, r2
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f805 	bl	8002570 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002566:	6a3b      	ldr	r3, [r7, #32]
    }
 8002568:	4618      	mov	r0, r3
 800256a:	3728      	adds	r7, #40	@ 0x28
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d103      	bne.n	800258c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e002      	b.n	8002592 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800259e:	2101      	movs	r1, #1
 80025a0:	69b8      	ldr	r0, [r7, #24]
 80025a2:	f7ff ff27 	bl	80023f4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	68f9      	ldr	r1, [r7, #12]
 80025b4:	2073      	movs	r0, #115	@ 0x73
 80025b6:	f004 f885 	bl	80066c4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b090      	sub	sp, #64	@ 0x40
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025d2:	2300      	movs	r3, #0
 80025d4:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80025da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <xQueueGenericSend+0x34>
        __asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <xQueueGenericSend+0x42>
 80025fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <xQueueGenericSend+0x46>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <xQueueGenericSend+0x48>
 800260a:	2300      	movs	r3, #0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10b      	bne.n	8002628 <xQueueGenericSend+0x64>
        __asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002622:	bf00      	nop
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d103      	bne.n	8002636 <xQueueGenericSend+0x72>
 800262e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <xQueueGenericSend+0x76>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <xQueueGenericSend+0x78>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10b      	bne.n	8002658 <xQueueGenericSend+0x94>
        __asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	623b      	str	r3, [r7, #32]
    }
 8002652:	bf00      	nop
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002658:	f001 f97a 	bl	8003950 <xTaskGetSchedulerState>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d102      	bne.n	8002668 <xQueueGenericSend+0xa4>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <xQueueGenericSend+0xa8>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <xQueueGenericSend+0xaa>
 800266c:	2300      	movs	r3, #0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10b      	bne.n	800268a <xQueueGenericSend+0xc6>
        __asm volatile
 8002672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002676:	f383 8811 	msr	BASEPRI, r3
 800267a:	f3bf 8f6f 	isb	sy
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	61fb      	str	r3, [r7, #28]
    }
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	e7fd      	b.n	8002686 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800268a:	f001 ff47 	bl	800451c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800268e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002690:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002696:	429a      	cmp	r2, r3
 8002698:	d302      	bcc.n	80026a0 <xQueueGenericSend+0xdc>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d11f      	bne.n	80026e0 <xQueueGenericSend+0x11c>
            {
                traceQUEUE_SEND( pxQueue );
 80026a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a2:	4618      	mov	r0, r3
 80026a4:	f004 fd9c 	bl	80071e0 <SEGGER_SYSVIEW_ShrinkId>
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	460b      	mov	r3, r1
 80026b2:	4601      	mov	r1, r0
 80026b4:	205a      	movs	r0, #90	@ 0x5a
 80026b6:	f004 f87b 	bl	80067b0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026c0:	f000 fa5c 	bl	8002b7c <prvCopyDataToQueue>
 80026c4:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d004      	beq.n	80026d8 <xQueueGenericSend+0x114>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d0:	3324      	adds	r3, #36	@ 0x24
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 ff9e 	bl	8003614 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80026d8:	f001 ff52 	bl	8004580 <vPortExitCritical>
                return pdPASS;
 80026dc:	2301      	movs	r3, #1
 80026de:	e07d      	b.n	80027dc <xQueueGenericSend+0x218>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d110      	bne.n	8002708 <xQueueGenericSend+0x144>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026e6:	f001 ff4b 	bl	8004580 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80026ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ec:	4618      	mov	r0, r3
 80026ee:	f004 fd77 	bl	80071e0 <SEGGER_SYSVIEW_ShrinkId>
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	460b      	mov	r3, r1
 80026fc:	4601      	mov	r1, r0
 80026fe:	205a      	movs	r0, #90	@ 0x5a
 8002700:	f004 f856 	bl	80067b0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002704:	2300      	movs	r3, #0
 8002706:	e069      	b.n	80027dc <xQueueGenericSend+0x218>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <xQueueGenericSend+0x158>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	4618      	mov	r0, r3
 8002714:	f000 ffe6 	bl	80036e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002718:	2301      	movs	r3, #1
 800271a:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800271c:	f001 ff30 	bl	8004580 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002720:	f000 fd5a 	bl	80031d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002724:	f001 fefa 	bl	800451c <vPortEnterCritical>
 8002728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800272e:	b25b      	sxtb	r3, r3
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d103      	bne.n	800273e <xQueueGenericSend+0x17a>
 8002736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800273e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002740:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002744:	b25b      	sxtb	r3, r3
 8002746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274a:	d103      	bne.n	8002754 <xQueueGenericSend+0x190>
 800274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002754:	f001 ff14 	bl	8004580 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002758:	1d3a      	adds	r2, r7, #4
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f000 ffd5 	bl	8003710 <xTaskCheckForTimeOut>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d124      	bne.n	80027b6 <xQueueGenericSend+0x1f2>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800276c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800276e:	f000 fafd 	bl	8002d6c <prvIsQueueFull>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d018      	beq.n	80027aa <xQueueGenericSend+0x1e6>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277a:	3310      	adds	r3, #16
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fef1 	bl	8003568 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002786:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002788:	f000 fa88 	bl	8002c9c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800278c:	f000 fd32 	bl	80031f4 <xTaskResumeAll>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	f47f af79 	bne.w	800268a <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8002798:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <xQueueGenericSend+0x220>)
 800279a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	f3bf 8f4f 	dsb	sy
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	e76f      	b.n	800268a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80027aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027ac:	f000 fa76 	bl	8002c9c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027b0:	f000 fd20 	bl	80031f4 <xTaskResumeAll>
 80027b4:	e769      	b.n	800268a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80027b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027b8:	f000 fa70 	bl	8002c9c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027bc:	f000 fd1a 	bl	80031f4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80027c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c2:	4618      	mov	r0, r3
 80027c4:	f004 fd0c 	bl	80071e0 <SEGGER_SYSVIEW_ShrinkId>
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	460b      	mov	r3, r1
 80027d2:	4601      	mov	r1, r0
 80027d4:	205a      	movs	r0, #90	@ 0x5a
 80027d6:	f003 ffeb 	bl	80067b0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80027da:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3738      	adds	r7, #56	@ 0x38
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	e000ed04 	.word	0xe000ed04

080027e8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b090      	sub	sp, #64	@ 0x40
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80027fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002812:	bf00      	nop
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d103      	bne.n	8002826 <xQueueGenericSendFromISR+0x3e>
 800281e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <xQueueGenericSendFromISR+0x42>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <xQueueGenericSendFromISR+0x44>
 800282a:	2300      	movs	r3, #0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10b      	bne.n	8002848 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8002830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002842:	bf00      	nop
 8002844:	bf00      	nop
 8002846:	e7fd      	b.n	8002844 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d103      	bne.n	8002856 <xQueueGenericSendFromISR+0x6e>
 800284e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <xQueueGenericSendFromISR+0x72>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <xQueueGenericSendFromISR+0x74>
 800285a:	2300      	movs	r3, #0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10b      	bne.n	8002878 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8002860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002864:	f383 8811 	msr	BASEPRI, r3
 8002868:	f3bf 8f6f 	isb	sy
 800286c:	f3bf 8f4f 	dsb	sy
 8002870:	623b      	str	r3, [r7, #32]
    }
 8002872:	bf00      	nop
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002878:	f001 ff40 	bl	80046fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800287c:	f3ef 8211 	mrs	r2, BASEPRI
 8002880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	61fa      	str	r2, [r7, #28]
 8002892:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002894:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002896:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800289a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800289c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800289e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d302      	bcc.n	80028aa <xQueueGenericSendFromISR+0xc2>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d149      	bne.n	800293e <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80028aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80028ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028bc:	4618      	mov	r0, r3
 80028be:	f004 fc8f 	bl	80071e0 <SEGGER_SYSVIEW_ShrinkId>
 80028c2:	4601      	mov	r1, r0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	461a      	mov	r2, r3
 80028c8:	2060      	movs	r0, #96	@ 0x60
 80028ca:	f003 fea1 	bl	8006610 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80028d4:	f000 f952 	bl	8002b7c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80028d8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d112      	bne.n	8002908 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d026      	beq.n	8002938 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ec:	3324      	adds	r3, #36	@ 0x24
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fe90 	bl	8003614 <xTaskRemoveFromEventList>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01e      	beq.n	8002938 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01b      	beq.n	8002938 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e017      	b.n	8002938 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002908:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800290c:	2b7f      	cmp	r3, #127	@ 0x7f
 800290e:	d10b      	bne.n	8002928 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	617b      	str	r3, [r7, #20]
    }
 8002922:	bf00      	nop
 8002924:	bf00      	nop
 8002926:	e7fd      	b.n	8002924 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002928:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800292c:	3301      	adds	r3, #1
 800292e:	b2db      	uxtb	r3, r3
 8002930:	b25a      	sxtb	r2, r3
 8002932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8002938:	2301      	movs	r3, #1
 800293a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 800293c:	e00b      	b.n	8002956 <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800293e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002940:	4618      	mov	r0, r3
 8002942:	f004 fc4d 	bl	80071e0 <SEGGER_SYSVIEW_ShrinkId>
 8002946:	4601      	mov	r1, r0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	461a      	mov	r2, r3
 800294c:	2060      	movs	r0, #96	@ 0x60
 800294e:	f003 fe5f 	bl	8006610 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002952:	2300      	movs	r3, #0
 8002954:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002958:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002960:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002964:	4618      	mov	r0, r3
 8002966:	3740      	adds	r7, #64	@ 0x40
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800296c:	b590      	push	{r4, r7, lr}
 800296e:	b08f      	sub	sp, #60	@ 0x3c
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002978:	2300      	movs	r3, #0
 800297a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10b      	bne.n	800299e <xQueueReceive+0x32>
        __asm volatile
 8002986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	623b      	str	r3, [r7, #32]
    }
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	e7fd      	b.n	800299a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d103      	bne.n	80029ac <xQueueReceive+0x40>
 80029a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <xQueueReceive+0x44>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <xQueueReceive+0x46>
 80029b0:	2300      	movs	r3, #0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10b      	bne.n	80029ce <xQueueReceive+0x62>
        __asm volatile
 80029b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	61fb      	str	r3, [r7, #28]
    }
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	e7fd      	b.n	80029ca <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029ce:	f000 ffbf 	bl	8003950 <xTaskGetSchedulerState>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d102      	bne.n	80029de <xQueueReceive+0x72>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <xQueueReceive+0x76>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <xQueueReceive+0x78>
 80029e2:	2300      	movs	r3, #0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10b      	bne.n	8002a00 <xQueueReceive+0x94>
        __asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	61bb      	str	r3, [r7, #24]
    }
 80029fa:	bf00      	nop
 80029fc:	bf00      	nop
 80029fe:	e7fd      	b.n	80029fc <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a00:	f001 fd8c 	bl	800451c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a08:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d024      	beq.n	8002a5a <xQueueReceive+0xee>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a14:	f000 f91c 	bl	8002c50 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 fbe0 	bl	80071e0 <SEGGER_SYSVIEW_ShrinkId>
 8002a20:	4604      	mov	r4, r0
 8002a22:	2000      	movs	r0, #0
 8002a24:	f004 fbdc 	bl	80071e0 <SEGGER_SYSVIEW_ShrinkId>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	9100      	str	r1, [sp, #0]
 8002a30:	4621      	mov	r1, r4
 8002a32:	205c      	movs	r0, #92	@ 0x5c
 8002a34:	f003 febc 	bl	80067b0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	1e5a      	subs	r2, r3, #1
 8002a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d004      	beq.n	8002a52 <xQueueReceive+0xe6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4a:	3310      	adds	r3, #16
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fde1 	bl	8003614 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002a52:	f001 fd95 	bl	8004580 <vPortExitCritical>
                return pdPASS;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e08a      	b.n	8002b70 <xQueueReceive+0x204>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d113      	bne.n	8002a88 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002a60:	f001 fd8e 	bl	8004580 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 fbba 	bl	80071e0 <SEGGER_SYSVIEW_ShrinkId>
 8002a6c:	4604      	mov	r4, r0
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f004 fbb6 	bl	80071e0 <SEGGER_SYSVIEW_ShrinkId>
 8002a74:	4602      	mov	r2, r0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2101      	movs	r1, #1
 8002a7a:	9100      	str	r1, [sp, #0]
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	205c      	movs	r0, #92	@ 0x5c
 8002a80:	f003 fe96 	bl	80067b0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e073      	b.n	8002b70 <xQueueReceive+0x204>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <xQueueReceive+0x130>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002a8e:	f107 0310 	add.w	r3, r7, #16
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fe26 	bl	80036e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002a9c:	f001 fd70 	bl	8004580 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002aa0:	f000 fb9a 	bl	80031d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002aa4:	f001 fd3a 	bl	800451c <vPortEnterCritical>
 8002aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002aae:	b25b      	sxtb	r3, r3
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d103      	bne.n	8002abe <xQueueReceive+0x152>
 8002ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aca:	d103      	bne.n	8002ad4 <xQueueReceive+0x168>
 8002acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ad4:	f001 fd54 	bl	8004580 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ad8:	1d3a      	adds	r2, r7, #4
 8002ada:	f107 0310 	add.w	r3, r7, #16
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fe15 	bl	8003710 <xTaskCheckForTimeOut>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d124      	bne.n	8002b36 <xQueueReceive+0x1ca>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002aec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002aee:	f000 f927 	bl	8002d40 <prvIsQueueEmpty>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d018      	beq.n	8002b2a <xQueueReceive+0x1be>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afa:	3324      	adds	r3, #36	@ 0x24
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fd31 	bl	8003568 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b08:	f000 f8c8 	bl	8002c9c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b0c:	f000 fb72 	bl	80031f4 <xTaskResumeAll>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f47f af74 	bne.w	8002a00 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002b18:	4b17      	ldr	r3, [pc, #92]	@ (8002b78 <xQueueReceive+0x20c>)
 8002b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	e76a      	b.n	8002a00 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b2c:	f000 f8b6 	bl	8002c9c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b30:	f000 fb60 	bl	80031f4 <xTaskResumeAll>
 8002b34:	e764      	b.n	8002a00 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b38:	f000 f8b0 	bl	8002c9c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b3c:	f000 fb5a 	bl	80031f4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b42:	f000 f8fd 	bl	8002d40 <prvIsQueueEmpty>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f43f af59 	beq.w	8002a00 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b50:	4618      	mov	r0, r3
 8002b52:	f004 fb45 	bl	80071e0 <SEGGER_SYSVIEW_ShrinkId>
 8002b56:	4604      	mov	r4, r0
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f004 fb41 	bl	80071e0 <SEGGER_SYSVIEW_ShrinkId>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2101      	movs	r1, #1
 8002b64:	9100      	str	r1, [sp, #0]
 8002b66:	4621      	mov	r1, r4
 8002b68:	205c      	movs	r0, #92	@ 0x5c
 8002b6a:	f003 fe21 	bl	80067b0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002b6e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3734      	adds	r7, #52	@ 0x34
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd90      	pop	{r4, r7, pc}
 8002b78:	e000ed04 	.word	0xe000ed04

08002b7c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b90:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10d      	bne.n	8002bb6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d14d      	bne.n	8002c3e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fef0 	bl	800398c <xTaskPriorityDisinherit>
 8002bac:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	e043      	b.n	8002c3e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d119      	bne.n	8002bf0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6858      	ldr	r0, [r3, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	f004 fd10 	bl	80075ec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	441a      	add	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d32b      	bcc.n	8002c3e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	e026      	b.n	8002c3e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	68d8      	ldr	r0, [r3, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	f004 fcf6 	bl	80075ec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	425b      	negs	r3, r3
 8002c0a:	441a      	add	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d207      	bcs.n	8002c2c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	425b      	negs	r3, r3
 8002c26:	441a      	add	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d105      	bne.n	8002c3e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002c46:	697b      	ldr	r3, [r7, #20]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d018      	beq.n	8002c94 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	441a      	add	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d303      	bcc.n	8002c84 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68d9      	ldr	r1, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	6838      	ldr	r0, [r7, #0]
 8002c90:	f004 fcac 	bl	80075ec <memcpy>
    }
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002ca4:	f001 fc3a 	bl	800451c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cb0:	e011      	b.n	8002cd6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d012      	beq.n	8002ce0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3324      	adds	r3, #36	@ 0x24
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fca8 	bl	8003614 <xTaskRemoveFromEventList>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002cca:	f000 fd89 	bl	80037e0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	dce9      	bgt.n	8002cb2 <prvUnlockQueue+0x16>
 8002cde:	e000      	b.n	8002ce2 <prvUnlockQueue+0x46>
                        break;
 8002ce0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	22ff      	movs	r2, #255	@ 0xff
 8002ce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002cea:	f001 fc49 	bl	8004580 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002cee:	f001 fc15 	bl	800451c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cf8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cfa:	e011      	b.n	8002d20 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d012      	beq.n	8002d2a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3310      	adds	r3, #16
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fc83 	bl	8003614 <xTaskRemoveFromEventList>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d14:	f000 fd64 	bl	80037e0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d18:	7bbb      	ldrb	r3, [r7, #14]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	dce9      	bgt.n	8002cfc <prvUnlockQueue+0x60>
 8002d28:	e000      	b.n	8002d2c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d2a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	22ff      	movs	r2, #255	@ 0xff
 8002d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002d34:	f001 fc24 	bl	8004580 <vPortExitCritical>
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d48:	f001 fbe8 	bl	800451c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d54:	2301      	movs	r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e001      	b.n	8002d5e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d5e:	f001 fc0f 	bl	8004580 <vPortExitCritical>

    return xReturn;
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d74:	f001 fbd2 	bl	800451c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d102      	bne.n	8002d8a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e001      	b.n	8002d8e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d8e:	f001 fbf7 	bl	8004580 <vPortExitCritical>

    return xReturn;
 8002d92:	68fb      	ldr	r3, [r7, #12]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	e01e      	b.n	8002dea <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002dac:	4a13      	ldr	r2, [pc, #76]	@ (8002dfc <vQueueAddToRegistry+0x60>)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d115      	bne.n	8002de4 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002db8:	4910      	ldr	r1, [pc, #64]	@ (8002dfc <vQueueAddToRegistry+0x60>)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002dc2:	4a0e      	ldr	r2, [pc, #56]	@ (8002dfc <vQueueAddToRegistry+0x60>)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f004 fa05 	bl	80071e0 <SEGGER_SYSVIEW_ShrinkId>
 8002dd6:	4601      	mov	r1, r0
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2071      	movs	r0, #113	@ 0x71
 8002dde:	f003 fc17 	bl	8006610 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002de2:	e006      	b.n	8002df2 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3301      	adds	r3, #1
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b07      	cmp	r3, #7
 8002dee:	d9dd      	bls.n	8002dac <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200001a8 	.word	0x200001a8

08002e00 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e10:	f001 fb84 	bl	800451c <vPortEnterCritical>
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e1a:	b25b      	sxtb	r3, r3
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d103      	bne.n	8002e2a <vQueueWaitForMessageRestricted+0x2a>
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e30:	b25b      	sxtb	r3, r3
 8002e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e36:	d103      	bne.n	8002e40 <vQueueWaitForMessageRestricted+0x40>
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e40:	f001 fb9e 	bl	8004580 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	3324      	adds	r3, #36	@ 0x24
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fbad 	bl	80035b4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002e5a:	6978      	ldr	r0, [r7, #20]
 8002e5c:	f7ff ff1e 	bl	8002c9c <prvUnlockQueue>
    }
 8002e60:	bf00      	nop
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08c      	sub	sp, #48	@ 0x30
 8002e6c:	af04      	add	r7, sp, #16
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f001 fc7f 	bl	8004780 <pvPortMalloc>
 8002e82:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00e      	beq.n	8002ea8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e8a:	2058      	movs	r0, #88	@ 0x58
 8002e8c:	f001 fc78 	bl	8004780 <pvPortMalloc>
 8002e90:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e9e:	e005      	b.n	8002eac <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002ea0:	6978      	ldr	r0, [r7, #20]
 8002ea2:	f001 fd4f 	bl	8004944 <vPortFree>
 8002ea6:	e001      	b.n	8002eac <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d013      	beq.n	8002eda <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9303      	str	r3, [sp, #12]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	9302      	str	r3, [sp, #8]
 8002ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f80e 	bl	8002eea <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ece:	69f8      	ldr	r0, [r7, #28]
 8002ed0:	f000 f8a2 	bl	8003018 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	61bb      	str	r3, [r7, #24]
 8002ed8:	e002      	b.n	8002ee0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
 8002ede:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ee0:	69bb      	ldr	r3, [r7, #24]
    }
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b088      	sub	sp, #32
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002efa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	461a      	mov	r2, r3
 8002f02:	21a5      	movs	r1, #165	@ 0xa5
 8002f04:	f004 fb44 	bl	8007590 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f12:	3b01      	subs	r3, #1
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f023 0307 	bic.w	r3, r3, #7
 8002f20:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00b      	beq.n	8002f44 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	617b      	str	r3, [r7, #20]
    }
 8002f3e:	bf00      	nop
 8002f40:	bf00      	nop
 8002f42:	e7fd      	b.n	8002f40 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01f      	beq.n	8002f8a <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	e012      	b.n	8002f76 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	7819      	ldrb	r1, [r3, #0]
 8002f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3334      	adds	r3, #52	@ 0x34
 8002f60:	460a      	mov	r2, r1
 8002f62:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d006      	beq.n	8002f7e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	3301      	adds	r3, #1
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	2b09      	cmp	r3, #9
 8002f7a:	d9e9      	bls.n	8002f50 <prvInitialiseNewTask+0x66>
 8002f7c:	e000      	b.n	8002f80 <prvInitialiseNewTask+0x96>
            {
                break;
 8002f7e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002f88:	e003      	b.n	8002f92 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d901      	bls.n	8002f9c <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f98:	2304      	movs	r3, #4
 8002f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fa6:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002faa:	2200      	movs	r2, #0
 8002fac:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff f98a 	bl	80022cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fba:	3318      	adds	r3, #24
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff f985 	bl	80022cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fc6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fca:	f1c3 0205 	rsb	r2, r3, #5
 8002fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fd6:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fda:	3350      	adds	r3, #80	@ 0x50
 8002fdc:	2204      	movs	r2, #4
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f004 fad5 	bl	8007590 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe8:	3354      	adds	r3, #84	@ 0x54
 8002fea:	2201      	movs	r2, #1
 8002fec:	2100      	movs	r1, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f004 face 	bl	8007590 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	68f9      	ldr	r1, [r7, #12]
 8002ff8:	69b8      	ldr	r0, [r7, #24]
 8002ffa:	f001 f8df 	bl	80041bc <pxPortInitialiseStack>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003002:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800300a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800300e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003010:	bf00      	nop
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003018:	b5b0      	push	{r4, r5, r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af02      	add	r7, sp, #8
 800301e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003020:	f001 fa7c 	bl	800451c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003024:	4b35      	ldr	r3, [pc, #212]	@ (80030fc <prvAddNewTaskToReadyList+0xe4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	4a34      	ldr	r2, [pc, #208]	@ (80030fc <prvAddNewTaskToReadyList+0xe4>)
 800302c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800302e:	4b34      	ldr	r3, [pc, #208]	@ (8003100 <prvAddNewTaskToReadyList+0xe8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003036:	4a32      	ldr	r2, [pc, #200]	@ (8003100 <prvAddNewTaskToReadyList+0xe8>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800303c:	4b2f      	ldr	r3, [pc, #188]	@ (80030fc <prvAddNewTaskToReadyList+0xe4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d110      	bne.n	8003066 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003044:	f000 fbea 	bl	800381c <prvInitialiseTaskLists>
 8003048:	e00d      	b.n	8003066 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800304a:	4b2e      	ldr	r3, [pc, #184]	@ (8003104 <prvAddNewTaskToReadyList+0xec>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003052:	4b2b      	ldr	r3, [pc, #172]	@ (8003100 <prvAddNewTaskToReadyList+0xe8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	429a      	cmp	r2, r3
 800305e:	d802      	bhi.n	8003066 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003060:	4a27      	ldr	r2, [pc, #156]	@ (8003100 <prvAddNewTaskToReadyList+0xe8>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003066:	4b28      	ldr	r3, [pc, #160]	@ (8003108 <prvAddNewTaskToReadyList+0xf0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3301      	adds	r3, #1
 800306c:	4a26      	ldr	r2, [pc, #152]	@ (8003108 <prvAddNewTaskToReadyList+0xf0>)
 800306e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003070:	4b25      	ldr	r3, [pc, #148]	@ (8003108 <prvAddNewTaskToReadyList+0xf0>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d016      	beq.n	80030ac <prvAddNewTaskToReadyList+0x94>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4618      	mov	r0, r3
 8003082:	f003 ff87 	bl	8006f94 <SEGGER_SYSVIEW_OnTaskCreate>
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	461d      	mov	r5, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461c      	mov	r4, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	1ae3      	subs	r3, r4, r3
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	462b      	mov	r3, r5
 80030a8:	f001 fe1c 	bl	8004ce4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 fff4 	bl	800709c <SEGGER_SYSVIEW_OnTaskStartReady>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	2201      	movs	r2, #1
 80030ba:	409a      	lsls	r2, r3
 80030bc:	4b13      	ldr	r3, [pc, #76]	@ (800310c <prvAddNewTaskToReadyList+0xf4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	4a12      	ldr	r2, [pc, #72]	@ (800310c <prvAddNewTaskToReadyList+0xf4>)
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003110 <prvAddNewTaskToReadyList+0xf8>)
 80030d4:	441a      	add	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3304      	adds	r3, #4
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f7ff f902 	bl	80022e6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80030e2:	f001 fa4d 	bl	8004580 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80030e6:	4b07      	ldr	r3, [pc, #28]	@ (8003104 <prvAddNewTaskToReadyList+0xec>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030ee:	4b04      	ldr	r3, [pc, #16]	@ (8003100 <prvAddNewTaskToReadyList+0xe8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bdb0      	pop	{r4, r5, r7, pc}
 80030fa:	bf00      	nop
 80030fc:	200002c0 	.word	0x200002c0
 8003100:	200001e8 	.word	0x200001e8
 8003104:	200002cc 	.word	0x200002cc
 8003108:	200002dc 	.word	0x200002dc
 800310c:	200002c8 	.word	0x200002c8
 8003110:	200001ec 	.word	0x200001ec

08003114 <vTaskStartScheduler>:
               configMINIMAL_STACK_SIZE is specified in words, not bytes. */
            *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
        }
 /*-----------------------------------------------------------*/
void vTaskStartScheduler( void )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800311a:	4b27      	ldr	r3, [pc, #156]	@ (80031b8 <vTaskStartScheduler+0xa4>)
 800311c:	9301      	str	r3, [sp, #4]
 800311e:	2300      	movs	r3, #0
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	2300      	movs	r3, #0
 8003124:	2282      	movs	r2, #130	@ 0x82
 8003126:	4925      	ldr	r1, [pc, #148]	@ (80031bc <vTaskStartScheduler+0xa8>)
 8003128:	4825      	ldr	r0, [pc, #148]	@ (80031c0 <vTaskStartScheduler+0xac>)
 800312a:	f7ff fe9d 	bl	8002e68 <xTaskCreate>
 800312e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d102      	bne.n	800313c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003136:	f000 fd23 	bl	8003b80 <xTimerCreateTimerTask>
 800313a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d124      	bne.n	800318c <vTaskStartScheduler+0x78>
        __asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	60bb      	str	r3, [r7, #8]
    }
 8003154:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003156:	4b1b      	ldr	r3, [pc, #108]	@ (80031c4 <vTaskStartScheduler+0xb0>)
 8003158:	f04f 32ff 	mov.w	r2, #4294967295
 800315c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800315e:	4b1a      	ldr	r3, [pc, #104]	@ (80031c8 <vTaskStartScheduler+0xb4>)
 8003160:	2201      	movs	r2, #1
 8003162:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003164:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <vTaskStartScheduler+0xb8>)
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800316a:	4b19      	ldr	r3, [pc, #100]	@ (80031d0 <vTaskStartScheduler+0xbc>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4b12      	ldr	r3, [pc, #72]	@ (80031b8 <vTaskStartScheduler+0xa4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d102      	bne.n	800317c <vTaskStartScheduler+0x68>
 8003176:	f003 fef1 	bl	8006f5c <SEGGER_SYSVIEW_OnIdle>
 800317a:	e004      	b.n	8003186 <vTaskStartScheduler+0x72>
 800317c:	4b14      	ldr	r3, [pc, #80]	@ (80031d0 <vTaskStartScheduler+0xbc>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f003 ff49 	bl	8007018 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003186:	f001 f8a5 	bl	80042d4 <xPortStartScheduler>
 800318a:	e00f      	b.n	80031ac <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003192:	d10b      	bne.n	80031ac <vTaskStartScheduler+0x98>
        __asm volatile
 8003194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	607b      	str	r3, [r7, #4]
    }
 80031a6:	bf00      	nop
 80031a8:	bf00      	nop
 80031aa:	e7fd      	b.n	80031a8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80031ac:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <vTaskStartScheduler+0xc0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	200002e4 	.word	0x200002e4
 80031bc:	08007eec 	.word	0x08007eec
 80031c0:	080037f9 	.word	0x080037f9
 80031c4:	200002e0 	.word	0x200002e0
 80031c8:	200002cc 	.word	0x200002cc
 80031cc:	200002c4 	.word	0x200002c4
 80031d0:	200001e8 	.word	0x200001e8
 80031d4:	2000000c 	.word	0x2000000c

080031d8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80031dc:	4b04      	ldr	r3, [pc, #16]	@ (80031f0 <vTaskSuspendAll+0x18>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	4a03      	ldr	r2, [pc, #12]	@ (80031f0 <vTaskSuspendAll+0x18>)
 80031e4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	200002e8 	.word	0x200002e8

080031f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003202:	4b3e      	ldr	r3, [pc, #248]	@ (80032fc <xTaskResumeAll+0x108>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10b      	bne.n	8003222 <xTaskResumeAll+0x2e>
        __asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	603b      	str	r3, [r7, #0]
    }
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	e7fd      	b.n	800321e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003222:	f001 f97b 	bl	800451c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003226:	4b35      	ldr	r3, [pc, #212]	@ (80032fc <xTaskResumeAll+0x108>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3b01      	subs	r3, #1
 800322c:	4a33      	ldr	r2, [pc, #204]	@ (80032fc <xTaskResumeAll+0x108>)
 800322e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003230:	4b32      	ldr	r3, [pc, #200]	@ (80032fc <xTaskResumeAll+0x108>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d159      	bne.n	80032ec <xTaskResumeAll+0xf8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003238:	4b31      	ldr	r3, [pc, #196]	@ (8003300 <xTaskResumeAll+0x10c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d055      	beq.n	80032ec <xTaskResumeAll+0xf8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003240:	e032      	b.n	80032a8 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003242:	4b30      	ldr	r3, [pc, #192]	@ (8003304 <xTaskResumeAll+0x110>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3318      	adds	r3, #24
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff f8a6 	bl	80023a0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3304      	adds	r3, #4
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff f8a1 	bl	80023a0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4618      	mov	r0, r3
 8003262:	f003 ff1b 	bl	800709c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326a:	2201      	movs	r2, #1
 800326c:	409a      	lsls	r2, r3
 800326e:	4b26      	ldr	r3, [pc, #152]	@ (8003308 <xTaskResumeAll+0x114>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	4a24      	ldr	r2, [pc, #144]	@ (8003308 <xTaskResumeAll+0x114>)
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4a21      	ldr	r2, [pc, #132]	@ (800330c <xTaskResumeAll+0x118>)
 8003286:	441a      	add	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3304      	adds	r3, #4
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f7ff f829 	bl	80022e6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003298:	4b1d      	ldr	r3, [pc, #116]	@ (8003310 <xTaskResumeAll+0x11c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	429a      	cmp	r2, r3
 80032a0:	d302      	bcc.n	80032a8 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 80032a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003314 <xTaskResumeAll+0x120>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032a8:	4b16      	ldr	r3, [pc, #88]	@ (8003304 <xTaskResumeAll+0x110>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1c8      	bne.n	8003242 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80032b6:	f000 fb2f 	bl	8003918 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032ba:	4b17      	ldr	r3, [pc, #92]	@ (8003318 <xTaskResumeAll+0x124>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d010      	beq.n	80032e8 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80032c6:	f000 f84b 	bl	8003360 <xTaskIncrementTick>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <xTaskResumeAll+0x120>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	3b01      	subs	r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f1      	bne.n	80032c6 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 80032e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003318 <xTaskResumeAll+0x124>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80032e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <xTaskResumeAll+0x120>)
 80032ea:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80032ec:	f001 f948 	bl	8004580 <vPortExitCritical>

    return xAlreadyYielded;
 80032f0:	687b      	ldr	r3, [r7, #4]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	200002e8 	.word	0x200002e8
 8003300:	200002c0 	.word	0x200002c0
 8003304:	20000280 	.word	0x20000280
 8003308:	200002c8 	.word	0x200002c8
 800330c:	200001ec 	.word	0x200001ec
 8003310:	200001e8 	.word	0x200001e8
 8003314:	200002d4 	.word	0x200002d4
 8003318:	200002d0 	.word	0x200002d0

0800331c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003322:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <xTaskGetTickCount+0x1c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003328:	687b      	ldr	r3, [r7, #4]
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	200002c4 	.word	0x200002c4

0800333c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003342:	f001 f9db 	bl	80046fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800334a:	4b04      	ldr	r3, [pc, #16]	@ (800335c <xTaskGetTickCountFromISR+0x20>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003350:	683b      	ldr	r3, [r7, #0]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200002c4 	.word	0x200002c4

08003360 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800336a:	4b41      	ldr	r3, [pc, #260]	@ (8003470 <xTaskIncrementTick+0x110>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d174      	bne.n	800345c <xTaskIncrementTick+0xfc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003372:	4b40      	ldr	r3, [pc, #256]	@ (8003474 <xTaskIncrementTick+0x114>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800337a:	4a3e      	ldr	r2, [pc, #248]	@ (8003474 <xTaskIncrementTick+0x114>)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d121      	bne.n	80033ca <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003386:	4b3c      	ldr	r3, [pc, #240]	@ (8003478 <xTaskIncrementTick+0x118>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00b      	beq.n	80033a8 <xTaskIncrementTick+0x48>
        __asm volatile
 8003390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003394:	f383 8811 	msr	BASEPRI, r3
 8003398:	f3bf 8f6f 	isb	sy
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	603b      	str	r3, [r7, #0]
    }
 80033a2:	bf00      	nop
 80033a4:	bf00      	nop
 80033a6:	e7fd      	b.n	80033a4 <xTaskIncrementTick+0x44>
 80033a8:	4b33      	ldr	r3, [pc, #204]	@ (8003478 <xTaskIncrementTick+0x118>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	4b33      	ldr	r3, [pc, #204]	@ (800347c <xTaskIncrementTick+0x11c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a31      	ldr	r2, [pc, #196]	@ (8003478 <xTaskIncrementTick+0x118>)
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	4a31      	ldr	r2, [pc, #196]	@ (800347c <xTaskIncrementTick+0x11c>)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b30      	ldr	r3, [pc, #192]	@ (8003480 <xTaskIncrementTick+0x120>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3301      	adds	r3, #1
 80033c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003480 <xTaskIncrementTick+0x120>)
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	f000 faa7 	bl	8003918 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80033ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003484 <xTaskIncrementTick+0x124>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d348      	bcc.n	8003466 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033d4:	4b28      	ldr	r3, [pc, #160]	@ (8003478 <xTaskIncrementTick+0x118>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d104      	bne.n	80033e8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033de:	4b29      	ldr	r3, [pc, #164]	@ (8003484 <xTaskIncrementTick+0x124>)
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	601a      	str	r2, [r3, #0]
                    break;
 80033e6:	e03e      	b.n	8003466 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e8:	4b23      	ldr	r3, [pc, #140]	@ (8003478 <xTaskIncrementTick+0x118>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d203      	bcs.n	8003408 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003400:	4a20      	ldr	r2, [pc, #128]	@ (8003484 <xTaskIncrementTick+0x124>)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003406:	e02e      	b.n	8003466 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	3304      	adds	r3, #4
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe ffc7 	bl	80023a0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003416:	2b00      	cmp	r3, #0
 8003418:	d004      	beq.n	8003424 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	3318      	adds	r3, #24
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe ffbe 	bl	80023a0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4618      	mov	r0, r3
 8003428:	f003 fe38 	bl	800709c <SEGGER_SYSVIEW_OnTaskStartReady>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	2201      	movs	r2, #1
 8003432:	409a      	lsls	r2, r3
 8003434:	4b14      	ldr	r3, [pc, #80]	@ (8003488 <xTaskIncrementTick+0x128>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4313      	orrs	r3, r2
 800343a:	4a13      	ldr	r2, [pc, #76]	@ (8003488 <xTaskIncrementTick+0x128>)
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4a10      	ldr	r2, [pc, #64]	@ (800348c <xTaskIncrementTick+0x12c>)
 800344c:	441a      	add	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	3304      	adds	r3, #4
 8003452:	4619      	mov	r1, r3
 8003454:	4610      	mov	r0, r2
 8003456:	f7fe ff46 	bl	80022e6 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800345a:	e7bb      	b.n	80033d4 <xTaskIncrementTick+0x74>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800345c:	4b0c      	ldr	r3, [pc, #48]	@ (8003490 <xTaskIncrementTick+0x130>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3301      	adds	r3, #1
 8003462:	4a0b      	ldr	r2, [pc, #44]	@ (8003490 <xTaskIncrementTick+0x130>)
 8003464:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003466:	697b      	ldr	r3, [r7, #20]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	200002e8 	.word	0x200002e8
 8003474:	200002c4 	.word	0x200002c4
 8003478:	20000278 	.word	0x20000278
 800347c:	2000027c 	.word	0x2000027c
 8003480:	200002d8 	.word	0x200002d8
 8003484:	200002e0 	.word	0x200002e0
 8003488:	200002c8 	.word	0x200002c8
 800348c:	200001ec 	.word	0x200001ec
 8003490:	200002d0 	.word	0x200002d0

08003494 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800349a:	4b2d      	ldr	r3, [pc, #180]	@ (8003550 <vTaskSwitchContext+0xbc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80034a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003554 <vTaskSwitchContext+0xc0>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80034a8:	e04e      	b.n	8003548 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80034aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003554 <vTaskSwitchContext+0xc0>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034b0:	4b29      	ldr	r3, [pc, #164]	@ (8003558 <vTaskSwitchContext+0xc4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	fab3 f383 	clz	r3, r3
 80034bc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80034be:	7afb      	ldrb	r3, [r7, #11]
 80034c0:	f1c3 031f 	rsb	r3, r3, #31
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	4925      	ldr	r1, [pc, #148]	@ (800355c <vTaskSwitchContext+0xc8>)
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10b      	bne.n	80034f2 <vTaskSwitchContext+0x5e>
        __asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	607b      	str	r3, [r7, #4]
    }
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	e7fd      	b.n	80034ee <vTaskSwitchContext+0x5a>
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4a17      	ldr	r2, [pc, #92]	@ (800355c <vTaskSwitchContext+0xc8>)
 80034fe:	4413      	add	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	3308      	adds	r3, #8
 8003514:	429a      	cmp	r2, r3
 8003516:	d104      	bne.n	8003522 <vTaskSwitchContext+0x8e>
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4a0d      	ldr	r2, [pc, #52]	@ (8003560 <vTaskSwitchContext+0xcc>)
 800352a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800352c:	4b0c      	ldr	r3, [pc, #48]	@ (8003560 <vTaskSwitchContext+0xcc>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b0c      	ldr	r3, [pc, #48]	@ (8003564 <vTaskSwitchContext+0xd0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d102      	bne.n	800353e <vTaskSwitchContext+0xaa>
 8003538:	f003 fd10 	bl	8006f5c <SEGGER_SYSVIEW_OnIdle>
}
 800353c:	e004      	b.n	8003548 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800353e:	4b08      	ldr	r3, [pc, #32]	@ (8003560 <vTaskSwitchContext+0xcc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f003 fd68 	bl	8007018 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003548:	bf00      	nop
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	200002e8 	.word	0x200002e8
 8003554:	200002d4 	.word	0x200002d4
 8003558:	200002c8 	.word	0x200002c8
 800355c:	200001ec 	.word	0x200001ec
 8003560:	200001e8 	.word	0x200001e8
 8003564:	200002e4 	.word	0x200002e4

08003568 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	60fb      	str	r3, [r7, #12]
    }
 800358a:	bf00      	nop
 800358c:	bf00      	nop
 800358e:	e7fd      	b.n	800358c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003590:	4b07      	ldr	r3, [pc, #28]	@ (80035b0 <vTaskPlaceOnEventList+0x48>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3318      	adds	r3, #24
 8003596:	4619      	mov	r1, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7fe fec8 	bl	800232e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800359e:	2101      	movs	r1, #1
 80035a0:	6838      	ldr	r0, [r7, #0]
 80035a2:	f000 fa75 	bl	8003a90 <prvAddCurrentTaskToDelayedList>
}
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	200001e8 	.word	0x200001e8

080035b4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10b      	bne.n	80035de <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	617b      	str	r3, [r7, #20]
    }
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	e7fd      	b.n	80035da <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035de:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <vTaskPlaceOnEventListRestricted+0x5c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3318      	adds	r3, #24
 80035e4:	4619      	mov	r1, r3
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f7fe fe7d 	bl	80022e6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80035f2:	f04f 33ff 	mov.w	r3, #4294967295
 80035f6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80035f8:	2024      	movs	r0, #36	@ 0x24
 80035fa:	f002 ffaf 	bl	800655c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	68b8      	ldr	r0, [r7, #8]
 8003602:	f000 fa45 	bl	8003a90 <prvAddCurrentTaskToDelayedList>
    }
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200001e8 	.word	0x200001e8

08003614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	60fb      	str	r3, [r7, #12]
    }
 800363c:	bf00      	nop
 800363e:	bf00      	nop
 8003640:	e7fd      	b.n	800363e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	3318      	adds	r3, #24
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe feaa 	bl	80023a0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800364c:	4b1f      	ldr	r3, [pc, #124]	@ (80036cc <xTaskRemoveFromEventList+0xb8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d120      	bne.n	8003696 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	3304      	adds	r3, #4
 8003658:	4618      	mov	r0, r3
 800365a:	f7fe fea1 	bl	80023a0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4618      	mov	r0, r3
 8003662:	f003 fd1b 	bl	800709c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366a:	2201      	movs	r2, #1
 800366c:	409a      	lsls	r2, r3
 800366e:	4b18      	ldr	r3, [pc, #96]	@ (80036d0 <xTaskRemoveFromEventList+0xbc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4313      	orrs	r3, r2
 8003674:	4a16      	ldr	r2, [pc, #88]	@ (80036d0 <xTaskRemoveFromEventList+0xbc>)
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4a13      	ldr	r2, [pc, #76]	@ (80036d4 <xTaskRemoveFromEventList+0xc0>)
 8003686:	441a      	add	r2, r3
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	3304      	adds	r3, #4
 800368c:	4619      	mov	r1, r3
 800368e:	4610      	mov	r0, r2
 8003690:	f7fe fe29 	bl	80022e6 <vListInsertEnd>
 8003694:	e005      	b.n	80036a2 <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	3318      	adds	r3, #24
 800369a:	4619      	mov	r1, r3
 800369c:	480e      	ldr	r0, [pc, #56]	@ (80036d8 <xTaskRemoveFromEventList+0xc4>)
 800369e:	f7fe fe22 	bl	80022e6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a6:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <xTaskRemoveFromEventList+0xc8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d905      	bls.n	80036bc <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80036b0:	2301      	movs	r3, #1
 80036b2:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80036b4:	4b0a      	ldr	r3, [pc, #40]	@ (80036e0 <xTaskRemoveFromEventList+0xcc>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e001      	b.n	80036c0 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80036c0:	697b      	ldr	r3, [r7, #20]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200002e8 	.word	0x200002e8
 80036d0:	200002c8 	.word	0x200002c8
 80036d4:	200001ec 	.word	0x200001ec
 80036d8:	20000280 	.word	0x20000280
 80036dc:	200001e8 	.word	0x200001e8
 80036e0:	200002d4 	.word	0x200002d4

080036e4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036ec:	4b06      	ldr	r3, [pc, #24]	@ (8003708 <vTaskInternalSetTimeOutState+0x24>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80036f4:	4b05      	ldr	r3, [pc, #20]	@ (800370c <vTaskInternalSetTimeOutState+0x28>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	605a      	str	r2, [r3, #4]
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	200002d8 	.word	0x200002d8
 800370c:	200002c4 	.word	0x200002c4

08003710 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	613b      	str	r3, [r7, #16]
    }
 8003732:	bf00      	nop
 8003734:	bf00      	nop
 8003736:	e7fd      	b.n	8003734 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	60fb      	str	r3, [r7, #12]
    }
 8003750:	bf00      	nop
 8003752:	bf00      	nop
 8003754:	e7fd      	b.n	8003752 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003756:	f000 fee1 	bl	800451c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800375a:	4b1f      	ldr	r3, [pc, #124]	@ (80037d8 <xTaskCheckForTimeOut+0xc8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003772:	d102      	bne.n	800377a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
 8003778:	e026      	b.n	80037c8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4b17      	ldr	r3, [pc, #92]	@ (80037dc <xTaskCheckForTimeOut+0xcc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d00a      	beq.n	800379c <xTaskCheckForTimeOut+0x8c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	429a      	cmp	r2, r3
 800378e:	d305      	bcc.n	800379c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003790:	2301      	movs	r3, #1
 8003792:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e015      	b.n	80037c8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d20b      	bcs.n	80037be <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	1ad2      	subs	r2, r2, r3
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ff96 	bl	80036e4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	e004      	b.n	80037c8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80037c4:	2301      	movs	r3, #1
 80037c6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80037c8:	f000 feda 	bl	8004580 <vPortExitCritical>

    return xReturn;
 80037cc:	69fb      	ldr	r3, [r7, #28]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3720      	adds	r7, #32
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	200002c4 	.word	0x200002c4
 80037dc:	200002d8 	.word	0x200002d8

080037e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80037e4:	4b03      	ldr	r3, [pc, #12]	@ (80037f4 <vTaskMissedYield+0x14>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
}
 80037ea:	bf00      	nop
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	200002d4 	.word	0x200002d4

080037f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003800:	f000 f84c 	bl	800389c <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <prvIdleTask+0x20>)
 8003806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003814:	bf00      	nop
 8003816:	e7f3      	b.n	8003800 <prvIdleTask+0x8>
 8003818:	e000ed04 	.word	0xe000ed04

0800381c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003822:	2300      	movs	r3, #0
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	e00c      	b.n	8003842 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4a12      	ldr	r2, [pc, #72]	@ (800387c <prvInitialiseTaskLists+0x60>)
 8003834:	4413      	add	r3, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fd28 	bl	800228c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3301      	adds	r3, #1
 8003840:	607b      	str	r3, [r7, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d9ef      	bls.n	8003828 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003848:	480d      	ldr	r0, [pc, #52]	@ (8003880 <prvInitialiseTaskLists+0x64>)
 800384a:	f7fe fd1f 	bl	800228c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800384e:	480d      	ldr	r0, [pc, #52]	@ (8003884 <prvInitialiseTaskLists+0x68>)
 8003850:	f7fe fd1c 	bl	800228c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003854:	480c      	ldr	r0, [pc, #48]	@ (8003888 <prvInitialiseTaskLists+0x6c>)
 8003856:	f7fe fd19 	bl	800228c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800385a:	480c      	ldr	r0, [pc, #48]	@ (800388c <prvInitialiseTaskLists+0x70>)
 800385c:	f7fe fd16 	bl	800228c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003860:	480b      	ldr	r0, [pc, #44]	@ (8003890 <prvInitialiseTaskLists+0x74>)
 8003862:	f7fe fd13 	bl	800228c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003866:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <prvInitialiseTaskLists+0x78>)
 8003868:	4a05      	ldr	r2, [pc, #20]	@ (8003880 <prvInitialiseTaskLists+0x64>)
 800386a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800386c:	4b0a      	ldr	r3, [pc, #40]	@ (8003898 <prvInitialiseTaskLists+0x7c>)
 800386e:	4a05      	ldr	r2, [pc, #20]	@ (8003884 <prvInitialiseTaskLists+0x68>)
 8003870:	601a      	str	r2, [r3, #0]
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	200001ec 	.word	0x200001ec
 8003880:	20000250 	.word	0x20000250
 8003884:	20000264 	.word	0x20000264
 8003888:	20000280 	.word	0x20000280
 800388c:	20000294 	.word	0x20000294
 8003890:	200002ac 	.word	0x200002ac
 8003894:	20000278 	.word	0x20000278
 8003898:	2000027c 	.word	0x2000027c

0800389c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038a2:	e019      	b.n	80038d8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80038a4:	f000 fe3a 	bl	800451c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038a8:	4b10      	ldr	r3, [pc, #64]	@ (80038ec <prvCheckTasksWaitingTermination+0x50>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe fd73 	bl	80023a0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80038ba:	4b0d      	ldr	r3, [pc, #52]	@ (80038f0 <prvCheckTasksWaitingTermination+0x54>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3b01      	subs	r3, #1
 80038c0:	4a0b      	ldr	r2, [pc, #44]	@ (80038f0 <prvCheckTasksWaitingTermination+0x54>)
 80038c2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80038c4:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <prvCheckTasksWaitingTermination+0x58>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	4a0a      	ldr	r2, [pc, #40]	@ (80038f4 <prvCheckTasksWaitingTermination+0x58>)
 80038cc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80038ce:	f000 fe57 	bl	8004580 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f810 	bl	80038f8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038d8:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <prvCheckTasksWaitingTermination+0x58>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e1      	bne.n	80038a4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000294 	.word	0x20000294
 80038f0:	200002c0 	.word	0x200002c0
 80038f4:	200002a8 	.word	0x200002a8

080038f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003904:	4618      	mov	r0, r3
 8003906:	f001 f81d 	bl	8004944 <vPortFree>
                vPortFree( pxTCB );
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f001 f81a 	bl	8004944 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800391c:	4b0a      	ldr	r3, [pc, #40]	@ (8003948 <prvResetNextTaskUnblockTime+0x30>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d104      	bne.n	8003930 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003926:	4b09      	ldr	r3, [pc, #36]	@ (800394c <prvResetNextTaskUnblockTime+0x34>)
 8003928:	f04f 32ff 	mov.w	r2, #4294967295
 800392c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800392e:	e005      	b.n	800393c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003930:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <prvResetNextTaskUnblockTime+0x30>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a04      	ldr	r2, [pc, #16]	@ (800394c <prvResetNextTaskUnblockTime+0x34>)
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20000278 	.word	0x20000278
 800394c:	200002e0 	.word	0x200002e0

08003950 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003956:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <xTaskGetSchedulerState+0x34>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800395e:	2301      	movs	r3, #1
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	e008      	b.n	8003976 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003964:	4b08      	ldr	r3, [pc, #32]	@ (8003988 <xTaskGetSchedulerState+0x38>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d102      	bne.n	8003972 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800396c:	2302      	movs	r3, #2
 800396e:	607b      	str	r3, [r7, #4]
 8003970:	e001      	b.n	8003976 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003976:	687b      	ldr	r3, [r7, #4]
    }
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	200002cc 	.word	0x200002cc
 8003988:	200002e8 	.word	0x200002e8

0800398c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d06a      	beq.n	8003a78 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80039a2:	4b38      	ldr	r3, [pc, #224]	@ (8003a84 <xTaskPriorityDisinherit+0xf8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d00b      	beq.n	80039c4 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	60fb      	str	r3, [r7, #12]
    }
 80039be:	bf00      	nop
 80039c0:	bf00      	nop
 80039c2:	e7fd      	b.n	80039c0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10b      	bne.n	80039e4 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	60bb      	str	r3, [r7, #8]
    }
 80039de:	bf00      	nop
 80039e0:	bf00      	nop
 80039e2:	e7fd      	b.n	80039e0 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e8:	1e5a      	subs	r2, r3, #1
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d03e      	beq.n	8003a78 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d13a      	bne.n	8003a78 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fcca 	bl	80023a0 <uxListRemove>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a16:	2201      	movs	r2, #1
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43da      	mvns	r2, r3
 8003a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003a88 <xTaskPriorityDisinherit+0xfc>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4013      	ands	r3, r2
 8003a24:	4a18      	ldr	r2, [pc, #96]	@ (8003a88 <xTaskPriorityDisinherit+0xfc>)
 8003a26:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	204a      	movs	r0, #74	@ 0x4a
 8003a2e:	f002 fdb3 	bl	8006598 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3e:	f1c3 0205 	rsb	r2, r3, #5
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a88 <xTaskPriorityDisinherit+0xfc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	4a0c      	ldr	r2, [pc, #48]	@ (8003a88 <xTaskPriorityDisinherit+0xfc>)
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4a09      	ldr	r2, [pc, #36]	@ (8003a8c <xTaskPriorityDisinherit+0x100>)
 8003a66:	441a      	add	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f7fe fc39 	bl	80022e6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003a78:	697b      	ldr	r3, [r7, #20]
    }
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	200001e8 	.word	0x200001e8
 8003a88:	200002c8 	.word	0x200002c8
 8003a8c:	200001ec 	.word	0x200001ec

08003a90 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003a9a:	4b32      	ldr	r3, [pc, #200]	@ (8003b64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aa0:	4b31      	ldr	r3, [pc, #196]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe fc7a 	bl	80023a0 <uxListRemove>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10b      	bne.n	8003aca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab8:	2201      	movs	r2, #1
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b6c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	4a29      	ldr	r2, [pc, #164]	@ (8003b6c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003ac8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d110      	bne.n	8003af4 <prvAddCurrentTaskToDelayedList+0x64>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00d      	beq.n	8003af4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003ad8:	4b23      	ldr	r3, [pc, #140]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	211b      	movs	r1, #27
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f003 fb1e 	bl	8007120 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ae4:	4b20      	ldr	r3, [pc, #128]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4619      	mov	r1, r3
 8003aec:	4820      	ldr	r0, [pc, #128]	@ (8003b70 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003aee:	f7fe fbfa 	bl	80022e6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003af2:	e032      	b.n	8003b5a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003afc:	4b1a      	ldr	r3, [pc, #104]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d20f      	bcs.n	8003b2c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003b0c:	4b16      	ldr	r3, [pc, #88]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2104      	movs	r1, #4
 8003b12:	4618      	mov	r0, r3
 8003b14:	f003 fb04 	bl	8007120 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b18:	4b16      	ldr	r3, [pc, #88]	@ (8003b74 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	4b12      	ldr	r3, [pc, #72]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3304      	adds	r3, #4
 8003b22:	4619      	mov	r1, r3
 8003b24:	4610      	mov	r0, r2
 8003b26:	f7fe fc02 	bl	800232e <vListInsert>
}
 8003b2a:	e016      	b.n	8003b5a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2104      	movs	r1, #4
 8003b32:	4618      	mov	r0, r3
 8003b34:	f003 faf4 	bl	8007120 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b38:	4b0f      	ldr	r3, [pc, #60]	@ (8003b78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3304      	adds	r3, #4
 8003b42:	4619      	mov	r1, r3
 8003b44:	4610      	mov	r0, r2
 8003b46:	f7fe fbf2 	bl	800232e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b7c <prvAddCurrentTaskToDelayedList+0xec>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d202      	bcs.n	8003b5a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003b54:	4a09      	ldr	r2, [pc, #36]	@ (8003b7c <prvAddCurrentTaskToDelayedList+0xec>)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	6013      	str	r3, [r2, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	200002c4 	.word	0x200002c4
 8003b68:	200001e8 	.word	0x200001e8
 8003b6c:	200002c8 	.word	0x200002c8
 8003b70:	200002ac 	.word	0x200002ac
 8003b74:	2000027c 	.word	0x2000027c
 8003b78:	20000278 	.word	0x20000278
 8003b7c:	200002e0 	.word	0x200002e0

08003b80 <xTimerCreateTimerTask>:
              configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
            *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
        }
    /*-----------------------------------------------------------*/
    BaseType_t xTimerCreateTimerTask( void )
    {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003b8a:	f000 fae1 	bl	8004150 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003b8e:	4b12      	ldr	r3, [pc, #72]	@ (8003bd8 <xTimerCreateTimerTask+0x58>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003b96:	4b11      	ldr	r3, [pc, #68]	@ (8003bdc <xTimerCreateTimerTask+0x5c>)
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ba4:	490e      	ldr	r1, [pc, #56]	@ (8003be0 <xTimerCreateTimerTask+0x60>)
 8003ba6:	480f      	ldr	r0, [pc, #60]	@ (8003be4 <xTimerCreateTimerTask+0x64>)
 8003ba8:	f7ff f95e 	bl	8002e68 <xTaskCreate>
 8003bac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	603b      	str	r3, [r7, #0]
    }
 8003bc6:	bf00      	nop
 8003bc8:	bf00      	nop
 8003bca:	e7fd      	b.n	8003bc8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003bcc:	687b      	ldr	r3, [r7, #4]
    }
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	2000031c 	.word	0x2000031c
 8003bdc:	20000320 	.word	0x20000320
 8003be0:	08007ef4 	.word	0x08007ef4
 8003be4:	08003d21 	.word	0x08003d21

08003be8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	@ 0x28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10b      	bne.n	8003c18 <xTimerGenericCommand+0x30>
        __asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	623b      	str	r3, [r7, #32]
    }
 8003c12:	bf00      	nop
 8003c14:	bf00      	nop
 8003c16:	e7fd      	b.n	8003c14 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003c18:	4b19      	ldr	r3, [pc, #100]	@ (8003c80 <xTimerGenericCommand+0x98>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d02a      	beq.n	8003c76 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b05      	cmp	r3, #5
 8003c30:	dc18      	bgt.n	8003c64 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c32:	f7ff fe8d 	bl	8003950 <xTaskGetSchedulerState>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d109      	bne.n	8003c50 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c3c:	4b10      	ldr	r3, [pc, #64]	@ (8003c80 <xTimerGenericCommand+0x98>)
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	f107 0114 	add.w	r1, r7, #20
 8003c44:	2300      	movs	r3, #0
 8003c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c48:	f7fe fcbc 	bl	80025c4 <xQueueGenericSend>
 8003c4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c4e:	e012      	b.n	8003c76 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c50:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <xTimerGenericCommand+0x98>)
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	f107 0114 	add.w	r1, r7, #20
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f7fe fcb2 	bl	80025c4 <xQueueGenericSend>
 8003c60:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c62:	e008      	b.n	8003c76 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c64:	4b06      	ldr	r3, [pc, #24]	@ (8003c80 <xTimerGenericCommand+0x98>)
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	f107 0114 	add.w	r1, r7, #20
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	f7fe fdba 	bl	80027e8 <xQueueGenericSendFromISR>
 8003c74:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3728      	adds	r7, #40	@ 0x28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	2000031c 	.word	0x2000031c

08003c84 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c8e:	4b23      	ldr	r3, [pc, #140]	@ (8003d1c <prvProcessExpiredTimer+0x98>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fe fb7f 	bl	80023a0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d023      	beq.n	8003cf8 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	699a      	ldr	r2, [r3, #24]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	18d1      	adds	r1, r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	6978      	ldr	r0, [r7, #20]
 8003cbe:	f000 f8d5 	bl	8003e6c <prvInsertTimerInActiveList>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d020      	beq.n	8003d0a <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cc8:	2300      	movs	r3, #0
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	6978      	ldr	r0, [r7, #20]
 8003cd4:	f7ff ff88 	bl	8003be8 <xTimerGenericCommand>
 8003cd8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d114      	bne.n	8003d0a <prvProcessExpiredTimer+0x86>
        __asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	60fb      	str	r3, [r7, #12]
    }
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	e7fd      	b.n	8003cf4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	6978      	ldr	r0, [r7, #20]
 8003d10:	4798      	blx	r3
    }
 8003d12:	bf00      	nop
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000314 	.word	0x20000314

08003d20 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d28:	f107 0308 	add.w	r3, r7, #8
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 f859 	bl	8003de4 <prvGetNextExpireTime>
 8003d32:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4619      	mov	r1, r3
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f805 	bl	8003d48 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d3e:	f000 f8d7 	bl	8003ef0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d42:	bf00      	nop
 8003d44:	e7f0      	b.n	8003d28 <prvTimerTask+0x8>
	...

08003d48 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d52:	f7ff fa41 	bl	80031d8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d56:	f107 0308 	add.w	r3, r7, #8
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f866 	bl	8003e2c <prvSampleTimeNow>
 8003d60:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d130      	bne.n	8003dca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <prvProcessTimerOrBlockTask+0x3c>
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d806      	bhi.n	8003d84 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d76:	f7ff fa3d 	bl	80031f4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d7a:	68f9      	ldr	r1, [r7, #12]
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff ff81 	bl	8003c84 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d82:	e024      	b.n	8003dce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d8a:	4b13      	ldr	r3, [pc, #76]	@ (8003dd8 <prvProcessTimerOrBlockTask+0x90>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <prvProcessTimerOrBlockTask+0x50>
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <prvProcessTimerOrBlockTask+0x52>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ddc <prvProcessTimerOrBlockTask+0x94>)
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	4619      	mov	r1, r3
 8003daa:	f7ff f829 	bl	8002e00 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003dae:	f7ff fa21 	bl	80031f4 <xTaskResumeAll>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10a      	bne.n	8003dce <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003db8:	4b09      	ldr	r3, [pc, #36]	@ (8003de0 <prvProcessTimerOrBlockTask+0x98>)
 8003dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	f3bf 8f6f 	isb	sy
    }
 8003dc8:	e001      	b.n	8003dce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003dca:	f7ff fa13 	bl	80031f4 <xTaskResumeAll>
    }
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000318 	.word	0x20000318
 8003ddc:	2000031c 	.word	0x2000031c
 8003de0:	e000ed04 	.word	0xe000ed04

08003de4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003dec:	4b0e      	ldr	r3, [pc, #56]	@ (8003e28 <prvGetNextExpireTime+0x44>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <prvGetNextExpireTime+0x16>
 8003df6:	2201      	movs	r2, #1
 8003df8:	e000      	b.n	8003dfc <prvGetNextExpireTime+0x18>
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e08:	4b07      	ldr	r3, [pc, #28]	@ (8003e28 <prvGetNextExpireTime+0x44>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	e001      	b.n	8003e18 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e18:	68fb      	ldr	r3, [r7, #12]
    }
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	20000314 	.word	0x20000314

08003e2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e34:	f7ff fa72 	bl	800331c <xTaskGetTickCount>
 8003e38:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e68 <prvSampleTimeNow+0x3c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d205      	bcs.n	8003e50 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e44:	f000 f91e 	bl	8004084 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e002      	b.n	8003e56 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e56:	4a04      	ldr	r2, [pc, #16]	@ (8003e68 <prvSampleTimeNow+0x3c>)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
    }
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000324 	.word	0x20000324

08003e6c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d812      	bhi.n	8003eb8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	1ad2      	subs	r2, r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d302      	bcc.n	8003ea6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	e01b      	b.n	8003ede <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ea6:	4b10      	ldr	r3, [pc, #64]	@ (8003ee8 <prvInsertTimerInActiveList+0x7c>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	3304      	adds	r3, #4
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f7fe fa3c 	bl	800232e <vListInsert>
 8003eb6:	e012      	b.n	8003ede <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d206      	bcs.n	8003ece <prvInsertTimerInActiveList+0x62>
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d302      	bcc.n	8003ece <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e007      	b.n	8003ede <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ece:	4b07      	ldr	r3, [pc, #28]	@ (8003eec <prvInsertTimerInActiveList+0x80>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f7fe fa28 	bl	800232e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003ede:	697b      	ldr	r3, [r7, #20]
    }
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000318 	.word	0x20000318
 8003eec:	20000314 	.word	0x20000314

08003ef0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08c      	sub	sp, #48	@ 0x30
 8003ef4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ef6:	e0b2      	b.n	800405e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f2c0 80af 	blt.w	800405e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe fa45 	bl	80023a0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f16:	1d3b      	adds	r3, r7, #4
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ff87 	bl	8003e2c <prvSampleTimeNow>
 8003f1e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b09      	cmp	r3, #9
 8003f24:	f200 8098 	bhi.w	8004058 <prvProcessReceivedCommands+0x168>
 8003f28:	a201      	add	r2, pc, #4	@ (adr r2, 8003f30 <prvProcessReceivedCommands+0x40>)
 8003f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2e:	bf00      	nop
 8003f30:	08003f59 	.word	0x08003f59
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f59 	.word	0x08003f59
 8003f3c:	08003fcf 	.word	0x08003fcf
 8003f40:	08003fe3 	.word	0x08003fe3
 8003f44:	0800402f 	.word	0x0800402f
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f59 	.word	0x08003f59
 8003f50:	08003fcf 	.word	0x08003fcf
 8003f54:	08003fe3 	.word	0x08003fe3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	18d1      	adds	r1, r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a3a      	ldr	r2, [r7, #32]
 8003f76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f78:	f7ff ff78 	bl	8003e6c <prvInsertTimerInActiveList>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d06c      	beq.n	800405c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f88:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d061      	beq.n	800405c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	441a      	add	r2, r3
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003faa:	f7ff fe1d 	bl	8003be8 <xTimerGenericCommand>
 8003fae:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d152      	bne.n	800405c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8003fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	61bb      	str	r3, [r7, #24]
    }
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	e7fd      	b.n	8003fca <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003fe0:	e03d      	b.n	800405e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10b      	bne.n	800401a <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	617b      	str	r3, [r7, #20]
    }
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	e7fd      	b.n	8004016 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	699a      	ldr	r2, [r3, #24]
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	18d1      	adds	r1, r2, r3
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	6a3a      	ldr	r2, [r7, #32]
 8004026:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004028:	f7ff ff20 	bl	8003e6c <prvInsertTimerInActiveList>
                        break;
 800402c:	e017      	b.n	800405e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d103      	bne.n	8004044 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800403c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800403e:	f000 fc81 	bl	8004944 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004042:	e00c      	b.n	800405e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	b2da      	uxtb	r2, r3
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004056:	e002      	b.n	800405e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004058:	bf00      	nop
 800405a:	e000      	b.n	800405e <prvProcessReceivedCommands+0x16e>
                        break;
 800405c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800405e:	4b08      	ldr	r3, [pc, #32]	@ (8004080 <prvProcessReceivedCommands+0x190>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f107 0108 	add.w	r1, r7, #8
 8004066:	2200      	movs	r2, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe fc7f 	bl	800296c <xQueueReceive>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	f47f af41 	bne.w	8003ef8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004076:	bf00      	nop
 8004078:	bf00      	nop
 800407a:	3728      	adds	r7, #40	@ 0x28
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	2000031c 	.word	0x2000031c

08004084 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800408a:	e049      	b.n	8004120 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800408c:	4b2e      	ldr	r3, [pc, #184]	@ (8004148 <prvSwitchTimerLists+0xc4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004096:	4b2c      	ldr	r3, [pc, #176]	@ (8004148 <prvSwitchTimerLists+0xc4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe f97b 	bl	80023a0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d02f      	beq.n	8004120 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d90e      	bls.n	80040f0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040de:	4b1a      	ldr	r3, [pc, #104]	@ (8004148 <prvSwitchTimerLists+0xc4>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4619      	mov	r1, r3
 80040e8:	4610      	mov	r0, r2
 80040ea:	f7fe f920 	bl	800232e <vListInsert>
 80040ee:	e017      	b.n	8004120 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040f0:	2300      	movs	r3, #0
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	2300      	movs	r3, #0
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	2100      	movs	r1, #0
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f7ff fd74 	bl	8003be8 <xTimerGenericCommand>
 8004100:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10b      	bne.n	8004120 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	603b      	str	r3, [r7, #0]
    }
 800411a:	bf00      	nop
 800411c:	bf00      	nop
 800411e:	e7fd      	b.n	800411c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004120:	4b09      	ldr	r3, [pc, #36]	@ (8004148 <prvSwitchTimerLists+0xc4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1b0      	bne.n	800408c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800412a:	4b07      	ldr	r3, [pc, #28]	@ (8004148 <prvSwitchTimerLists+0xc4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004130:	4b06      	ldr	r3, [pc, #24]	@ (800414c <prvSwitchTimerLists+0xc8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a04      	ldr	r2, [pc, #16]	@ (8004148 <prvSwitchTimerLists+0xc4>)
 8004136:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004138:	4a04      	ldr	r2, [pc, #16]	@ (800414c <prvSwitchTimerLists+0xc8>)
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	6013      	str	r3, [r2, #0]
    }
 800413e:	bf00      	nop
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000314 	.word	0x20000314
 800414c:	20000318 	.word	0x20000318

08004150 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004154:	f000 f9e2 	bl	800451c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004158:	4b12      	ldr	r3, [pc, #72]	@ (80041a4 <prvCheckForValidListAndQueue+0x54>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d11d      	bne.n	800419c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004160:	4811      	ldr	r0, [pc, #68]	@ (80041a8 <prvCheckForValidListAndQueue+0x58>)
 8004162:	f7fe f893 	bl	800228c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004166:	4811      	ldr	r0, [pc, #68]	@ (80041ac <prvCheckForValidListAndQueue+0x5c>)
 8004168:	f7fe f890 	bl	800228c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800416c:	4b10      	ldr	r3, [pc, #64]	@ (80041b0 <prvCheckForValidListAndQueue+0x60>)
 800416e:	4a0e      	ldr	r2, [pc, #56]	@ (80041a8 <prvCheckForValidListAndQueue+0x58>)
 8004170:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004172:	4b10      	ldr	r3, [pc, #64]	@ (80041b4 <prvCheckForValidListAndQueue+0x64>)
 8004174:	4a0d      	ldr	r2, [pc, #52]	@ (80041ac <prvCheckForValidListAndQueue+0x5c>)
 8004176:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004178:	2200      	movs	r2, #0
 800417a:	210c      	movs	r1, #12
 800417c:	200a      	movs	r0, #10
 800417e:	f7fe f995 	bl	80024ac <xQueueGenericCreate>
 8004182:	4603      	mov	r3, r0
 8004184:	4a07      	ldr	r2, [pc, #28]	@ (80041a4 <prvCheckForValidListAndQueue+0x54>)
 8004186:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004188:	4b06      	ldr	r3, [pc, #24]	@ (80041a4 <prvCheckForValidListAndQueue+0x54>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004190:	4b04      	ldr	r3, [pc, #16]	@ (80041a4 <prvCheckForValidListAndQueue+0x54>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4908      	ldr	r1, [pc, #32]	@ (80041b8 <prvCheckForValidListAndQueue+0x68>)
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe fe00 	bl	8002d9c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800419c:	f000 f9f0 	bl	8004580 <vPortExitCritical>
    }
 80041a0:	bf00      	nop
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	2000031c 	.word	0x2000031c
 80041a8:	200002ec 	.word	0x200002ec
 80041ac:	20000300 	.word	0x20000300
 80041b0:	20000314 	.word	0x20000314
 80041b4:	20000318 	.word	0x20000318
 80041b8:	08007efc 	.word	0x08007efc

080041bc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3b04      	subs	r3, #4
 80041cc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3b04      	subs	r3, #4
 80041da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f023 0201 	bic.w	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3b04      	subs	r3, #4
 80041ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004220 <pxPortInitialiseStack+0x64>)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3b14      	subs	r3, #20
 80041f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3b04      	subs	r3, #4
 8004202:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f06f 0202 	mvn.w	r2, #2
 800420a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3b20      	subs	r3, #32
 8004210:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004212:	68fb      	ldr	r3, [r7, #12]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	08004225 	.word	0x08004225

08004224 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800422e:	4b13      	ldr	r3, [pc, #76]	@ (800427c <prvTaskExitError+0x58>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004236:	d00b      	beq.n	8004250 <prvTaskExitError+0x2c>
        __asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	60fb      	str	r3, [r7, #12]
    }
 800424a:	bf00      	nop
 800424c:	bf00      	nop
 800424e:	e7fd      	b.n	800424c <prvTaskExitError+0x28>
        __asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	60bb      	str	r3, [r7, #8]
    }
 8004262:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004264:	bf00      	nop
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0fc      	beq.n	8004266 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800426c:	bf00      	nop
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000010 	.word	0x20000010

08004280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004280:	4b07      	ldr	r3, [pc, #28]	@ (80042a0 <pxCurrentTCBConst2>)
 8004282:	6819      	ldr	r1, [r3, #0]
 8004284:	6808      	ldr	r0, [r1, #0]
 8004286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800428a:	f380 8809 	msr	PSP, r0
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f380 8811 	msr	BASEPRI, r0
 800429a:	4770      	bx	lr
 800429c:	f3af 8000 	nop.w

080042a0 <pxCurrentTCBConst2>:
 80042a0:	200001e8 	.word	0x200001e8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop

080042a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80042a8:	4808      	ldr	r0, [pc, #32]	@ (80042cc <prvPortStartFirstTask+0x24>)
 80042aa:	6800      	ldr	r0, [r0, #0]
 80042ac:	6800      	ldr	r0, [r0, #0]
 80042ae:	f380 8808 	msr	MSP, r0
 80042b2:	f04f 0000 	mov.w	r0, #0
 80042b6:	f380 8814 	msr	CONTROL, r0
 80042ba:	b662      	cpsie	i
 80042bc:	b661      	cpsie	f
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	df00      	svc	0
 80042c8:	bf00      	nop
 80042ca:	0000      	.short	0x0000
 80042cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop

080042d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042da:	4b47      	ldr	r3, [pc, #284]	@ (80043f8 <xPortStartScheduler+0x124>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a47      	ldr	r2, [pc, #284]	@ (80043fc <xPortStartScheduler+0x128>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d10b      	bne.n	80042fc <xPortStartScheduler+0x28>
        __asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	613b      	str	r3, [r7, #16]
    }
 80042f6:	bf00      	nop
 80042f8:	bf00      	nop
 80042fa:	e7fd      	b.n	80042f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042fc:	4b3e      	ldr	r3, [pc, #248]	@ (80043f8 <xPortStartScheduler+0x124>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a3f      	ldr	r2, [pc, #252]	@ (8004400 <xPortStartScheduler+0x12c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d10b      	bne.n	800431e <xPortStartScheduler+0x4a>
        __asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	60fb      	str	r3, [r7, #12]
    }
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	e7fd      	b.n	800431a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800431e:	4b39      	ldr	r3, [pc, #228]	@ (8004404 <xPortStartScheduler+0x130>)
 8004320:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	22ff      	movs	r2, #255	@ 0xff
 800432e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004340:	b2da      	uxtb	r2, r3
 8004342:	4b31      	ldr	r3, [pc, #196]	@ (8004408 <xPortStartScheduler+0x134>)
 8004344:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004346:	4b31      	ldr	r3, [pc, #196]	@ (800440c <xPortStartScheduler+0x138>)
 8004348:	2207      	movs	r2, #7
 800434a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800434c:	e009      	b.n	8004362 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800434e:	4b2f      	ldr	r3, [pc, #188]	@ (800440c <xPortStartScheduler+0x138>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3b01      	subs	r3, #1
 8004354:	4a2d      	ldr	r2, [pc, #180]	@ (800440c <xPortStartScheduler+0x138>)
 8004356:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	b2db      	uxtb	r3, r3
 8004360:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436a:	2b80      	cmp	r3, #128	@ 0x80
 800436c:	d0ef      	beq.n	800434e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800436e:	4b27      	ldr	r3, [pc, #156]	@ (800440c <xPortStartScheduler+0x138>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f1c3 0307 	rsb	r3, r3, #7
 8004376:	2b04      	cmp	r3, #4
 8004378:	d00b      	beq.n	8004392 <xPortStartScheduler+0xbe>
        __asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	60bb      	str	r3, [r7, #8]
    }
 800438c:	bf00      	nop
 800438e:	bf00      	nop
 8004390:	e7fd      	b.n	800438e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004392:	4b1e      	ldr	r3, [pc, #120]	@ (800440c <xPortStartScheduler+0x138>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	4a1c      	ldr	r2, [pc, #112]	@ (800440c <xPortStartScheduler+0x138>)
 800439a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800439c:	4b1b      	ldr	r3, [pc, #108]	@ (800440c <xPortStartScheduler+0x138>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043a4:	4a19      	ldr	r2, [pc, #100]	@ (800440c <xPortStartScheduler+0x138>)
 80043a6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80043b0:	4b17      	ldr	r3, [pc, #92]	@ (8004410 <xPortStartScheduler+0x13c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a16      	ldr	r2, [pc, #88]	@ (8004410 <xPortStartScheduler+0x13c>)
 80043b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043ba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80043bc:	4b14      	ldr	r3, [pc, #80]	@ (8004410 <xPortStartScheduler+0x13c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a13      	ldr	r2, [pc, #76]	@ (8004410 <xPortStartScheduler+0x13c>)
 80043c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80043c6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80043c8:	f000 f968 	bl	800469c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80043cc:	4b11      	ldr	r3, [pc, #68]	@ (8004414 <xPortStartScheduler+0x140>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80043d2:	f000 f987 	bl	80046e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043d6:	4b10      	ldr	r3, [pc, #64]	@ (8004418 <xPortStartScheduler+0x144>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a0f      	ldr	r2, [pc, #60]	@ (8004418 <xPortStartScheduler+0x144>)
 80043dc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80043e0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80043e2:	f7ff ff61 	bl	80042a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80043e6:	f7ff f855 	bl	8003494 <vTaskSwitchContext>
    prvTaskExitError();
 80043ea:	f7ff ff1b 	bl	8004224 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	e000ed00 	.word	0xe000ed00
 80043fc:	410fc271 	.word	0x410fc271
 8004400:	410fc270 	.word	0x410fc270
 8004404:	e000e400 	.word	0xe000e400
 8004408:	20000328 	.word	0x20000328
 800440c:	2000032c 	.word	0x2000032c
 8004410:	e000ed20 	.word	0xe000ed20
 8004414:	20000010 	.word	0x20000010
 8004418:	e000ef34 	.word	0xe000ef34

0800441c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004422:	4b38      	ldr	r3, [pc, #224]	@ (8004504 <vInitPrioGroupValue+0xe8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a38      	ldr	r2, [pc, #224]	@ (8004508 <vInitPrioGroupValue+0xec>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d10b      	bne.n	8004444 <vInitPrioGroupValue+0x28>
        __asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	613b      	str	r3, [r7, #16]
    }
 800443e:	bf00      	nop
 8004440:	bf00      	nop
 8004442:	e7fd      	b.n	8004440 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004444:	4b2f      	ldr	r3, [pc, #188]	@ (8004504 <vInitPrioGroupValue+0xe8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a30      	ldr	r2, [pc, #192]	@ (800450c <vInitPrioGroupValue+0xf0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10b      	bne.n	8004466 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	60fb      	str	r3, [r7, #12]
    }
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	e7fd      	b.n	8004462 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004466:	4b2a      	ldr	r3, [pc, #168]	@ (8004510 <vInitPrioGroupValue+0xf4>)
 8004468:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	22ff      	movs	r2, #255	@ 0xff
 8004476:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004488:	b2da      	uxtb	r2, r3
 800448a:	4b22      	ldr	r3, [pc, #136]	@ (8004514 <vInitPrioGroupValue+0xf8>)
 800448c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800448e:	4b22      	ldr	r3, [pc, #136]	@ (8004518 <vInitPrioGroupValue+0xfc>)
 8004490:	2207      	movs	r2, #7
 8004492:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004494:	e009      	b.n	80044aa <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004496:	4b20      	ldr	r3, [pc, #128]	@ (8004518 <vInitPrioGroupValue+0xfc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3b01      	subs	r3, #1
 800449c:	4a1e      	ldr	r2, [pc, #120]	@ (8004518 <vInitPrioGroupValue+0xfc>)
 800449e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b2:	2b80      	cmp	r3, #128	@ 0x80
 80044b4:	d0ef      	beq.n	8004496 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044b6:	4b18      	ldr	r3, [pc, #96]	@ (8004518 <vInitPrioGroupValue+0xfc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f1c3 0307 	rsb	r3, r3, #7
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d00b      	beq.n	80044da <vInitPrioGroupValue+0xbe>
        __asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	60bb      	str	r3, [r7, #8]
    }
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	e7fd      	b.n	80044d6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044da:	4b0f      	ldr	r3, [pc, #60]	@ (8004518 <vInitPrioGroupValue+0xfc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004518 <vInitPrioGroupValue+0xfc>)
 80044e2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004518 <vInitPrioGroupValue+0xfc>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004518 <vInitPrioGroupValue+0xfc>)
 80044ee:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80044f8:	bf00      	nop
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	e000ed00 	.word	0xe000ed00
 8004508:	410fc271 	.word	0x410fc271
 800450c:	410fc270 	.word	0x410fc270
 8004510:	e000e400 	.word	0xe000e400
 8004514:	20000328 	.word	0x20000328
 8004518:	2000032c 	.word	0x2000032c

0800451c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
        __asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	607b      	str	r3, [r7, #4]
    }
 8004534:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004536:	4b10      	ldr	r3, [pc, #64]	@ (8004578 <vPortEnterCritical+0x5c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3301      	adds	r3, #1
 800453c:	4a0e      	ldr	r2, [pc, #56]	@ (8004578 <vPortEnterCritical+0x5c>)
 800453e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004540:	4b0d      	ldr	r3, [pc, #52]	@ (8004578 <vPortEnterCritical+0x5c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d110      	bne.n	800456a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004548:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <vPortEnterCritical+0x60>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00b      	beq.n	800456a <vPortEnterCritical+0x4e>
        __asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	603b      	str	r3, [r7, #0]
    }
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	e7fd      	b.n	8004566 <vPortEnterCritical+0x4a>
    }
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20000010 	.word	0x20000010
 800457c:	e000ed04 	.word	0xe000ed04

08004580 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004586:	4b12      	ldr	r3, [pc, #72]	@ (80045d0 <vPortExitCritical+0x50>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10b      	bne.n	80045a6 <vPortExitCritical+0x26>
        __asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	607b      	str	r3, [r7, #4]
    }
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	e7fd      	b.n	80045a2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80045a6:	4b0a      	ldr	r3, [pc, #40]	@ (80045d0 <vPortExitCritical+0x50>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	4a08      	ldr	r2, [pc, #32]	@ (80045d0 <vPortExitCritical+0x50>)
 80045ae:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80045b0:	4b07      	ldr	r3, [pc, #28]	@ (80045d0 <vPortExitCritical+0x50>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d105      	bne.n	80045c4 <vPortExitCritical+0x44>
 80045b8:	2300      	movs	r3, #0
 80045ba:	603b      	str	r3, [r7, #0]
        __asm volatile
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	f383 8811 	msr	BASEPRI, r3
    }
 80045c2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	20000010 	.word	0x20000010
	...

080045e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80045e0:	f3ef 8009 	mrs	r0, PSP
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	4b15      	ldr	r3, [pc, #84]	@ (8004640 <pxCurrentTCBConst>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	f01e 0f10 	tst.w	lr, #16
 80045f0:	bf08      	it	eq
 80045f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fa:	6010      	str	r0, [r2, #0]
 80045fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004600:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004604:	f380 8811 	msr	BASEPRI, r0
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f7fe ff40 	bl	8003494 <vTaskSwitchContext>
 8004614:	f04f 0000 	mov.w	r0, #0
 8004618:	f380 8811 	msr	BASEPRI, r0
 800461c:	bc09      	pop	{r0, r3}
 800461e:	6819      	ldr	r1, [r3, #0]
 8004620:	6808      	ldr	r0, [r1, #0]
 8004622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004626:	f01e 0f10 	tst.w	lr, #16
 800462a:	bf08      	it	eq
 800462c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004630:	f380 8809 	msr	PSP, r0
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	f3af 8000 	nop.w

08004640 <pxCurrentTCBConst>:
 8004640:	200001e8 	.word	0x200001e8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop

08004648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
        __asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	607b      	str	r3, [r7, #4]
    }
 8004660:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004662:	f002 fc01 	bl	8006e68 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004666:	f7fe fe7b 	bl	8003360 <xTaskIncrementTick>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d006      	beq.n	800467e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004670:	f002 fc58 	bl	8006f24 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004674:	4b08      	ldr	r3, [pc, #32]	@ (8004698 <SysTick_Handler+0x50>)
 8004676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	e001      	b.n	8004682 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800467e:	f002 fc35 	bl	8006eec <SEGGER_SYSVIEW_RecordExitISR>
 8004682:	2300      	movs	r3, #0
 8004684:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f383 8811 	msr	BASEPRI, r3
    }
 800468c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	e000ed04 	.word	0xe000ed04

0800469c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046a0:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <vPortSetupTimerInterrupt+0x34>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046a6:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <vPortSetupTimerInterrupt+0x38>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046ac:	4b0a      	ldr	r3, [pc, #40]	@ (80046d8 <vPortSetupTimerInterrupt+0x3c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a0a      	ldr	r2, [pc, #40]	@ (80046dc <vPortSetupTimerInterrupt+0x40>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	099b      	lsrs	r3, r3, #6
 80046b8:	4a09      	ldr	r2, [pc, #36]	@ (80046e0 <vPortSetupTimerInterrupt+0x44>)
 80046ba:	3b01      	subs	r3, #1
 80046bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046be:	4b04      	ldr	r3, [pc, #16]	@ (80046d0 <vPortSetupTimerInterrupt+0x34>)
 80046c0:	2207      	movs	r2, #7
 80046c2:	601a      	str	r2, [r3, #0]
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	e000e010 	.word	0xe000e010
 80046d4:	e000e018 	.word	0xe000e018
 80046d8:	20000000 	.word	0x20000000
 80046dc:	10624dd3 	.word	0x10624dd3
 80046e0:	e000e014 	.word	0xe000e014

080046e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80046e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80046f4 <vPortEnableVFP+0x10>
 80046e8:	6801      	ldr	r1, [r0, #0]
 80046ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80046ee:	6001      	str	r1, [r0, #0]
 80046f0:	4770      	bx	lr
 80046f2:	0000      	.short	0x0000
 80046f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80046f8:	bf00      	nop
 80046fa:	bf00      	nop

080046fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004702:	f3ef 8305 	mrs	r3, IPSR
 8004706:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b0f      	cmp	r3, #15
 800470c:	d915      	bls.n	800473a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800470e:	4a18      	ldr	r2, [pc, #96]	@ (8004770 <vPortValidateInterruptPriority+0x74>)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004718:	4b16      	ldr	r3, [pc, #88]	@ (8004774 <vPortValidateInterruptPriority+0x78>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	7afa      	ldrb	r2, [r7, #11]
 800471e:	429a      	cmp	r2, r3
 8004720:	d20b      	bcs.n	800473a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	607b      	str	r3, [r7, #4]
    }
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	e7fd      	b.n	8004736 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800473a:	4b0f      	ldr	r3, [pc, #60]	@ (8004778 <vPortValidateInterruptPriority+0x7c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004742:	4b0e      	ldr	r3, [pc, #56]	@ (800477c <vPortValidateInterruptPriority+0x80>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d90b      	bls.n	8004762 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	603b      	str	r3, [r7, #0]
    }
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	e7fd      	b.n	800475e <vPortValidateInterruptPriority+0x62>
    }
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e000e3f0 	.word	0xe000e3f0
 8004774:	20000328 	.word	0x20000328
 8004778:	e000ed0c 	.word	0xe000ed0c
 800477c:	2000032c 	.word	0x2000032c

08004780 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	@ 0x28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800478c:	f7fe fd24 	bl	80031d8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004790:	4b66      	ldr	r3, [pc, #408]	@ (800492c <pvPortMalloc+0x1ac>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004798:	f000 f938 	bl	8004a0c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800479c:	4b64      	ldr	r3, [pc, #400]	@ (8004930 <pvPortMalloc+0x1b0>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f040 80a9 	bne.w	80048fc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d02e      	beq.n	800480e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80047b0:	2208      	movs	r2, #8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d228      	bcs.n	800480e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80047bc:	2208      	movs	r2, #8
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4413      	add	r3, r2
 80047c2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d022      	beq.n	8004814 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f023 0307 	bic.w	r3, r3, #7
 80047d4:	3308      	adds	r3, #8
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d215      	bcs.n	8004808 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f023 0307 	bic.w	r3, r3, #7
 80047e2:	3308      	adds	r3, #8
 80047e4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d011      	beq.n	8004814 <pvPortMalloc+0x94>
        __asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	617b      	str	r3, [r7, #20]
    }
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004808:	2300      	movs	r3, #0
 800480a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800480c:	e002      	b.n	8004814 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	e000      	b.n	8004816 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004814:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d06f      	beq.n	80048fc <pvPortMalloc+0x17c>
 800481c:	4b45      	ldr	r3, [pc, #276]	@ (8004934 <pvPortMalloc+0x1b4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	429a      	cmp	r2, r3
 8004824:	d86a      	bhi.n	80048fc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004826:	4b44      	ldr	r3, [pc, #272]	@ (8004938 <pvPortMalloc+0x1b8>)
 8004828:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800482a:	4b43      	ldr	r3, [pc, #268]	@ (8004938 <pvPortMalloc+0x1b8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004830:	e004      	b.n	800483c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800483c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	429a      	cmp	r2, r3
 8004844:	d903      	bls.n	800484e <pvPortMalloc+0xce>
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f1      	bne.n	8004832 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800484e:	4b37      	ldr	r3, [pc, #220]	@ (800492c <pvPortMalloc+0x1ac>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004854:	429a      	cmp	r2, r3
 8004856:	d051      	beq.n	80048fc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2208      	movs	r2, #8
 800485e:	4413      	add	r3, r2
 8004860:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	1ad2      	subs	r2, r2, r3
 8004872:	2308      	movs	r3, #8
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	429a      	cmp	r2, r3
 8004878:	d920      	bls.n	80048bc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800487a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4413      	add	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00b      	beq.n	80048a4 <pvPortMalloc+0x124>
        __asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	613b      	str	r3, [r7, #16]
    }
 800489e:	bf00      	nop
 80048a0:	bf00      	nop
 80048a2:	e7fd      	b.n	80048a0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	1ad2      	subs	r2, r2, r3
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048b6:	69b8      	ldr	r0, [r7, #24]
 80048b8:	f000 f90a 	bl	8004ad0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004934 <pvPortMalloc+0x1b4>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004934 <pvPortMalloc+0x1b4>)
 80048c8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004934 <pvPortMalloc+0x1b4>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4b1b      	ldr	r3, [pc, #108]	@ (800493c <pvPortMalloc+0x1bc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d203      	bcs.n	80048de <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048d6:	4b17      	ldr	r3, [pc, #92]	@ (8004934 <pvPortMalloc+0x1b4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a18      	ldr	r2, [pc, #96]	@ (800493c <pvPortMalloc+0x1bc>)
 80048dc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	4b13      	ldr	r3, [pc, #76]	@ (8004930 <pvPortMalloc+0x1b0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ea:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80048f2:	4b13      	ldr	r3, [pc, #76]	@ (8004940 <pvPortMalloc+0x1c0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	4a11      	ldr	r2, [pc, #68]	@ (8004940 <pvPortMalloc+0x1c0>)
 80048fa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80048fc:	f7fe fc7a 	bl	80031f4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00b      	beq.n	8004922 <pvPortMalloc+0x1a2>
        __asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	60fb      	str	r3, [r7, #12]
    }
 800491c:	bf00      	nop
 800491e:	bf00      	nop
 8004920:	e7fd      	b.n	800491e <pvPortMalloc+0x19e>
    return pvReturn;
 8004922:	69fb      	ldr	r3, [r7, #28]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3728      	adds	r7, #40	@ 0x28
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20012f38 	.word	0x20012f38
 8004930:	20012f4c 	.word	0x20012f4c
 8004934:	20012f3c 	.word	0x20012f3c
 8004938:	20012f30 	.word	0x20012f30
 800493c:	20012f40 	.word	0x20012f40
 8004940:	20012f44 	.word	0x20012f44

08004944 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d04f      	beq.n	80049f6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004956:	2308      	movs	r3, #8
 8004958:	425b      	negs	r3, r3
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4413      	add	r3, r2
 800495e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	4b25      	ldr	r3, [pc, #148]	@ (8004a00 <vPortFree+0xbc>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4013      	ands	r3, r2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10b      	bne.n	800498a <vPortFree+0x46>
        __asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	60fb      	str	r3, [r7, #12]
    }
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	e7fd      	b.n	8004986 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <vPortFree+0x66>
        __asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	60bb      	str	r3, [r7, #8]
    }
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	e7fd      	b.n	80049a6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	4b14      	ldr	r3, [pc, #80]	@ (8004a00 <vPortFree+0xbc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01e      	beq.n	80049f6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d11a      	bne.n	80049f6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004a00 <vPortFree+0xbc>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	43db      	mvns	r3, r3
 80049ca:	401a      	ands	r2, r3
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80049d0:	f7fe fc02 	bl	80031d8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a04 <vPortFree+0xc0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4413      	add	r3, r2
 80049de:	4a09      	ldr	r2, [pc, #36]	@ (8004a04 <vPortFree+0xc0>)
 80049e0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049e2:	6938      	ldr	r0, [r7, #16]
 80049e4:	f000 f874 	bl	8004ad0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80049e8:	4b07      	ldr	r3, [pc, #28]	@ (8004a08 <vPortFree+0xc4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3301      	adds	r3, #1
 80049ee:	4a06      	ldr	r2, [pc, #24]	@ (8004a08 <vPortFree+0xc4>)
 80049f0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80049f2:	f7fe fbff 	bl	80031f4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80049f6:	bf00      	nop
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20012f4c 	.word	0x20012f4c
 8004a04:	20012f3c 	.word	0x20012f3c
 8004a08:	20012f48 	.word	0x20012f48

08004a0c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a12:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004a16:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004a18:	4b27      	ldr	r3, [pc, #156]	@ (8004ab8 <prvHeapInit+0xac>)
 8004a1a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00c      	beq.n	8004a40 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3307      	adds	r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0307 	bic.w	r3, r3, #7
 8004a32:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab8 <prvHeapInit+0xac>)
 8004a3c:	4413      	add	r3, r2
 8004a3e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a44:	4a1d      	ldr	r2, [pc, #116]	@ (8004abc <prvHeapInit+0xb0>)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004abc <prvHeapInit+0xb0>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	4413      	add	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004a58:	2208      	movs	r2, #8
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0307 	bic.w	r3, r3, #7
 8004a66:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a15      	ldr	r2, [pc, #84]	@ (8004ac0 <prvHeapInit+0xb4>)
 8004a6c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004a6e:	4b14      	ldr	r3, [pc, #80]	@ (8004ac0 <prvHeapInit+0xb4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004a76:	4b12      	ldr	r3, [pc, #72]	@ (8004ac0 <prvHeapInit+0xb4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	1ad2      	subs	r2, r2, r3
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac0 <prvHeapInit+0xb4>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac4 <prvHeapInit+0xb8>)
 8004a9a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4a09      	ldr	r2, [pc, #36]	@ (8004ac8 <prvHeapInit+0xbc>)
 8004aa2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004aa4:	4b09      	ldr	r3, [pc, #36]	@ (8004acc <prvHeapInit+0xc0>)
 8004aa6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004aaa:	601a      	str	r2, [r3, #0]
}
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	20000330 	.word	0x20000330
 8004abc:	20012f30 	.word	0x20012f30
 8004ac0:	20012f38 	.word	0x20012f38
 8004ac4:	20012f40 	.word	0x20012f40
 8004ac8:	20012f3c 	.word	0x20012f3c
 8004acc:	20012f4c 	.word	0x20012f4c

08004ad0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ad8:	4b28      	ldr	r3, [pc, #160]	@ (8004b7c <prvInsertBlockIntoFreeList+0xac>)
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	e002      	b.n	8004ae4 <prvInsertBlockIntoFreeList+0x14>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d8f7      	bhi.n	8004ade <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	4413      	add	r3, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d108      	bne.n	8004b12 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	441a      	add	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	441a      	add	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d118      	bne.n	8004b58 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4b15      	ldr	r3, [pc, #84]	@ (8004b80 <prvInsertBlockIntoFreeList+0xb0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d00d      	beq.n	8004b4e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	441a      	add	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	e008      	b.n	8004b60 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <prvInsertBlockIntoFreeList+0xb0>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	e003      	b.n	8004b60 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d002      	beq.n	8004b6e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b6e:	bf00      	nop
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20012f30 	.word	0x20012f30
 8004b80:	20012f38 	.word	0x20012f38

08004b84 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004b88:	4803      	ldr	r0, [pc, #12]	@ (8004b98 <_cbSendSystemDesc+0x14>)
 8004b8a:	f002 f917 	bl	8006dbc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004b8e:	4803      	ldr	r0, [pc, #12]	@ (8004b9c <_cbSendSystemDesc+0x18>)
 8004b90:	f002 f914 	bl	8006dbc <SEGGER_SYSVIEW_SendSysDesc>
}
 8004b94:	bf00      	nop
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	08007f04 	.word	0x08007f04
 8004b9c:	08007f38 	.word	0x08007f38

08004ba0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004ba4:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004ba6:	6818      	ldr	r0, [r3, #0]
 8004ba8:	4b05      	ldr	r3, [pc, #20]	@ (8004bc0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004baa:	6819      	ldr	r1, [r3, #0]
 8004bac:	4b05      	ldr	r3, [pc, #20]	@ (8004bc4 <SEGGER_SYSVIEW_Conf+0x24>)
 8004bae:	4a06      	ldr	r2, [pc, #24]	@ (8004bc8 <SEGGER_SYSVIEW_Conf+0x28>)
 8004bb0:	f001 fc80 	bl	80064b4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004bb4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004bb8:	f001 fcc0 	bl	800653c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004bbc:	bf00      	nop
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20000000 	.word	0x20000000
 8004bc4:	08004b85 	.word	0x08004b85
 8004bc8:	08007fd4 	.word	0x08007fd4

08004bcc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	607b      	str	r3, [r7, #4]
 8004bd6:	e033      	b.n	8004c40 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004bd8:	491e      	ldr	r1, [pc, #120]	@ (8004c54 <_cbSendTaskList+0x88>)
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	491a      	ldr	r1, [pc, #104]	@ (8004c54 <_cbSendTaskList+0x88>)
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	6819      	ldr	r1, [r3, #0]
 8004bfa:	4c16      	ldr	r4, [pc, #88]	@ (8004c54 <_cbSendTaskList+0x88>)
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4423      	add	r3, r4
 8004c08:	3308      	adds	r3, #8
 8004c0a:	681c      	ldr	r4, [r3, #0]
 8004c0c:	4d11      	ldr	r5, [pc, #68]	@ (8004c54 <_cbSendTaskList+0x88>)
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	442b      	add	r3, r5
 8004c1a:	330c      	adds	r3, #12
 8004c1c:	681d      	ldr	r5, [r3, #0]
 8004c1e:	4e0d      	ldr	r6, [pc, #52]	@ (8004c54 <_cbSendTaskList+0x88>)
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4433      	add	r3, r6
 8004c2c:	3310      	adds	r3, #16
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	462b      	mov	r3, r5
 8004c34:	4622      	mov	r2, r4
 8004c36:	f000 f8bd 	bl	8004db4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	607b      	str	r3, [r7, #4]
 8004c40:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <_cbSendTaskList+0x8c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d3c6      	bcc.n	8004bd8 <_cbSendTaskList+0xc>
  }
}
 8004c4a:	bf00      	nop
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c54:	20012f50 	.word	0x20012f50
 8004c58:	20012ff0 	.word	0x20012ff0

08004c5c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c64:	f7fe fb6a 	bl	800333c <xTaskGetTickCountFromISR>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	469a      	mov	sl, r3
 8004c6e:	4693      	mov	fp, r2
 8004c70:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004c74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	f04f 0a00 	mov.w	sl, #0
 8004c80:	f04f 0b00 	mov.w	fp, #0
 8004c84:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004c88:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004c8c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004c90:	4652      	mov	r2, sl
 8004c92:	465b      	mov	r3, fp
 8004c94:	1a14      	subs	r4, r2, r0
 8004c96:	eb63 0501 	sbc.w	r5, r3, r1
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	00ab      	lsls	r3, r5, #2
 8004ca4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ca8:	00a2      	lsls	r2, r4, #2
 8004caa:	4614      	mov	r4, r2
 8004cac:	461d      	mov	r5, r3
 8004cae:	eb14 0800 	adds.w	r8, r4, r0
 8004cb2:	eb45 0901 	adc.w	r9, r5, r1
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cca:	4690      	mov	r8, r2
 8004ccc:	4699      	mov	r9, r3
 8004cce:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004ce4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004cf2:	2205      	movs	r2, #5
 8004cf4:	492b      	ldr	r1, [pc, #172]	@ (8004da4 <SYSVIEW_AddTask+0xc0>)
 8004cf6:	68b8      	ldr	r0, [r7, #8]
 8004cf8:	f002 fc3a 	bl	8007570 <memcmp>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d04b      	beq.n	8004d9a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004d02:	4b29      	ldr	r3, [pc, #164]	@ (8004da8 <SYSVIEW_AddTask+0xc4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b07      	cmp	r3, #7
 8004d08:	d903      	bls.n	8004d12 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004d0a:	4828      	ldr	r0, [pc, #160]	@ (8004dac <SYSVIEW_AddTask+0xc8>)
 8004d0c:	f002 fb72 	bl	80073f4 <SEGGER_SYSVIEW_Warn>
    return;
 8004d10:	e044      	b.n	8004d9c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004d12:	4b25      	ldr	r3, [pc, #148]	@ (8004da8 <SYSVIEW_AddTask+0xc4>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4926      	ldr	r1, [pc, #152]	@ (8004db0 <SYSVIEW_AddTask+0xcc>)
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004d26:	4b20      	ldr	r3, [pc, #128]	@ (8004da8 <SYSVIEW_AddTask+0xc4>)
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4921      	ldr	r1, [pc, #132]	@ (8004db0 <SYSVIEW_AddTask+0xcc>)
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	3304      	adds	r3, #4
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004da8 <SYSVIEW_AddTask+0xc4>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	491b      	ldr	r1, [pc, #108]	@ (8004db0 <SYSVIEW_AddTask+0xcc>)
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d52:	4b15      	ldr	r3, [pc, #84]	@ (8004da8 <SYSVIEW_AddTask+0xc4>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4916      	ldr	r1, [pc, #88]	@ (8004db0 <SYSVIEW_AddTask+0xcc>)
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	330c      	adds	r3, #12
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004d68:	4b0f      	ldr	r3, [pc, #60]	@ (8004da8 <SYSVIEW_AddTask+0xc4>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	4910      	ldr	r1, [pc, #64]	@ (8004db0 <SYSVIEW_AddTask+0xcc>)
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	3310      	adds	r3, #16
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004da8 <SYSVIEW_AddTask+0xc4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3301      	adds	r3, #1
 8004d84:	4a08      	ldr	r2, [pc, #32]	@ (8004da8 <SYSVIEW_AddTask+0xc4>)
 8004d86:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f80e 	bl	8004db4 <SYSVIEW_SendTaskInfo>
 8004d98:	e000      	b.n	8004d9c <SYSVIEW_AddTask+0xb8>
    return;
 8004d9a:	bf00      	nop

}
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	08007f48 	.word	0x08007f48
 8004da8:	20012ff0 	.word	0x20012ff0
 8004dac:	08007f50 	.word	0x08007f50
 8004db0:	20012f50 	.word	0x20012f50

08004db4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08a      	sub	sp, #40	@ 0x28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004dc2:	f107 0310 	add.w	r3, r7, #16
 8004dc6:	2218      	movs	r2, #24
 8004dc8:	2100      	movs	r1, #0
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f002 fbe0 	bl	8007590 <memset>
  TaskInfo.TaskID     = TaskID;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de2:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004de4:	f107 0310 	add.w	r3, r7, #16
 8004de8:	4618      	mov	r0, r3
 8004dea:	f001 feef 	bl	8006bcc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004dee:	bf00      	nop
 8004df0:	3728      	adds	r7, #40	@ 0x28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <__NVIC_EnableIRQ>:
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	db0b      	blt.n	8004e22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	f003 021f 	and.w	r2, r3, #31
 8004e10:	4907      	ldr	r1, [pc, #28]	@ (8004e30 <__NVIC_EnableIRQ+0x38>)
 8004e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	2001      	movs	r0, #1
 8004e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	e000e100 	.word	0xe000e100

08004e34 <__NVIC_SetPriority>:
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	6039      	str	r1, [r7, #0]
 8004e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	db0a      	blt.n	8004e5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	490c      	ldr	r1, [pc, #48]	@ (8004e80 <__NVIC_SetPriority+0x4c>)
 8004e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e52:	0112      	lsls	r2, r2, #4
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	440b      	add	r3, r1
 8004e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004e5c:	e00a      	b.n	8004e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	4908      	ldr	r1, [pc, #32]	@ (8004e84 <__NVIC_SetPriority+0x50>)
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	3b04      	subs	r3, #4
 8004e6c:	0112      	lsls	r2, r2, #4
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	440b      	add	r3, r1
 8004e72:	761a      	strb	r2, [r3, #24]
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	e000e100 	.word	0xe000e100
 8004e84:	e000ed00 	.word	0xe000ed00

08004e88 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004e8e:	f002 fb0d 	bl	80074ac <SEGGER_SYSVIEW_IsStarted>
 8004e92:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004e9a:	f001 fd1b 	bl	80068d4 <SEGGER_SYSVIEW_Start>
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee4 <_cbOnUARTRx+0x3c>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	d806      	bhi.n	8004ec8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004eba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee4 <_cbOnUARTRx+0x3c>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	4b08      	ldr	r3, [pc, #32]	@ (8004ee4 <_cbOnUARTRx+0x3c>)
 8004ec4:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004ec6:	e009      	b.n	8004edc <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004ec8:	f7ff ffde 	bl	8004e88 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004ecc:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <_cbOnUARTRx+0x3c>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	1dfb      	adds	r3, r7, #7
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	f000 fb9c 	bl	8005614 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004edc:	bf00      	nop
}
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20000014 	.word	0x20000014

08004ee8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004ef0:	4b14      	ldr	r3, [pc, #80]	@ (8004f44 <_cbOnUARTTx+0x5c>)
 8004ef2:	785b      	ldrb	r3, [r3, #1]
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d80f      	bhi.n	8004f18 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004ef8:	4b12      	ldr	r3, [pc, #72]	@ (8004f44 <_cbOnUARTTx+0x5c>)
 8004efa:	785b      	ldrb	r3, [r3, #1]
 8004efc:	461a      	mov	r2, r3
 8004efe:	4b12      	ldr	r3, [pc, #72]	@ (8004f48 <_cbOnUARTTx+0x60>)
 8004f00:	5c9a      	ldrb	r2, [r3, r2]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004f06:	4b0f      	ldr	r3, [pc, #60]	@ (8004f44 <_cbOnUARTTx+0x5c>)
 8004f08:	785b      	ldrb	r3, [r3, #1]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f44 <_cbOnUARTTx+0x5c>)
 8004f10:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004f12:	2301      	movs	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004f16:	e00f      	b.n	8004f38 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004f18:	4b0a      	ldr	r3, [pc, #40]	@ (8004f44 <_cbOnUARTTx+0x5c>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fa1b 	bl	800535c <SEGGER_RTT_ReadUpBufferNoLock>
 8004f26:	4603      	mov	r3, r0
 8004f28:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	da02      	bge.n	8004f36 <_cbOnUARTTx+0x4e>
    r = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	e000      	b.n	8004f38 <_cbOnUARTTx+0x50>
  }
Done:
 8004f36:	bf00      	nop
  return r;
 8004f38:	68fb      	ldr	r3, [r7, #12]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000014 	.word	0x20000014
 8004f48:	08007fdc 	.word	0x08007fdc

08004f4c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004f54:	4a04      	ldr	r2, [pc, #16]	@ (8004f68 <SEGGER_UART_init+0x1c>)
 8004f56:	4905      	ldr	r1, [pc, #20]	@ (8004f6c <SEGGER_UART_init+0x20>)
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f863 	bl	8005024 <HIF_UART_Init>
}
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	08004ea9 	.word	0x08004ea9
 8004f6c:	08004ee9 	.word	0x08004ee9

08004f70 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004f76:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff0 <USART2_IRQHandler+0x80>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d011      	beq.n	8004faa <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004f86:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff4 <USART2_IRQHandler+0x84>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 030b 	and.w	r3, r3, #11
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d108      	bne.n	8004faa <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004f98:	4b17      	ldr	r3, [pc, #92]	@ (8004ff8 <USART2_IRQHandler+0x88>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d004      	beq.n	8004faa <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004fa0:	4b15      	ldr	r3, [pc, #84]	@ (8004ff8 <USART2_IRQHandler+0x88>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	79fa      	ldrb	r2, [r7, #7]
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d01a      	beq.n	8004fea <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004fb4:	4b11      	ldr	r3, [pc, #68]	@ (8004ffc <USART2_IRQHandler+0x8c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d015      	beq.n	8004fe8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8004ffc <USART2_IRQHandler+0x8c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	1dfa      	adds	r2, r7, #7
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	4798      	blx	r3
 8004fc6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004fce:	4b0c      	ldr	r3, [pc, #48]	@ (8005000 <USART2_IRQHandler+0x90>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a0b      	ldr	r2, [pc, #44]	@ (8005000 <USART2_IRQHandler+0x90>)
 8004fd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	e006      	b.n	8004fea <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004fdc:	4b04      	ldr	r3, [pc, #16]	@ (8004ff0 <USART2_IRQHandler+0x80>)
 8004fde:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004fe0:	79fa      	ldrb	r2, [r7, #7]
 8004fe2:	4b04      	ldr	r3, [pc, #16]	@ (8004ff4 <USART2_IRQHandler+0x84>)
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	e000      	b.n	8004fea <USART2_IRQHandler+0x7a>
      return;
 8004fe8:	bf00      	nop
    }
  }
}
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40004400 	.word	0x40004400
 8004ff4:	40004404 	.word	0x40004404
 8004ff8:	20012ff4 	.word	0x20012ff4
 8004ffc:	20012ff8 	.word	0x20012ff8
 8005000:	4000440c 	.word	0x4000440c

08005004 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005008:	4b05      	ldr	r3, [pc, #20]	@ (8005020 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a04      	ldr	r2, [pc, #16]	@ (8005020 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800500e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005012:	6013      	str	r3, [r2, #0]
}
 8005014:	bf00      	nop
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	4000440c 	.word	0x4000440c

08005024 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005030:	4b2e      	ldr	r3, [pc, #184]	@ (80050ec <HIF_UART_Init+0xc8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a2d      	ldr	r2, [pc, #180]	@ (80050ec <HIF_UART_Init+0xc8>)
 8005036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800503a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800503c:	4b2c      	ldr	r3, [pc, #176]	@ (80050f0 <HIF_UART_Init+0xcc>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a2b      	ldr	r2, [pc, #172]	@ (80050f0 <HIF_UART_Init+0xcc>)
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005048:	4b2a      	ldr	r3, [pc, #168]	@ (80050f4 <HIF_UART_Init+0xd0>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005054:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800505c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800505e:	4a25      	ldr	r2, [pc, #148]	@ (80050f4 <HIF_UART_Init+0xd0>)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005064:	4b24      	ldr	r3, [pc, #144]	@ (80050f8 <HIF_UART_Init+0xd4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005070:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005078:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800507a:	4a1f      	ldr	r2, [pc, #124]	@ (80050f8 <HIF_UART_Init+0xd4>)
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005080:	4b1e      	ldr	r3, [pc, #120]	@ (80050fc <HIF_UART_Init+0xd8>)
 8005082:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8005086:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005088:	4b1d      	ldr	r3, [pc, #116]	@ (8005100 <HIF_UART_Init+0xdc>)
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800508e:	4b1d      	ldr	r3, [pc, #116]	@ (8005104 <HIF_UART_Init+0xe0>)
 8005090:	2280      	movs	r2, #128	@ 0x80
 8005092:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800509a:	4a1b      	ldr	r2, [pc, #108]	@ (8005108 <HIF_UART_Init+0xe4>)
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a2:	3301      	adds	r3, #1
 80050a4:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	085b      	lsrs	r3, r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b2:	d302      	bcc.n	80050ba <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80050b4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80050b8:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d004      	beq.n	80050ca <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	4a11      	ldr	r2, [pc, #68]	@ (800510c <HIF_UART_Init+0xe8>)
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80050ca:	4a11      	ldr	r2, [pc, #68]	@ (8005110 <HIF_UART_Init+0xec>)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80050d0:	4a10      	ldr	r2, [pc, #64]	@ (8005114 <HIF_UART_Init+0xf0>)
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80050d6:	2106      	movs	r1, #6
 80050d8:	2026      	movs	r0, #38	@ 0x26
 80050da:	f7ff feab 	bl	8004e34 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80050de:	2026      	movs	r0, #38	@ 0x26
 80050e0:	f7ff fe8a 	bl	8004df8 <__NVIC_EnableIRQ>
}
 80050e4:	bf00      	nop
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40023840 	.word	0x40023840
 80050f0:	40023830 	.word	0x40023830
 80050f4:	40020020 	.word	0x40020020
 80050f8:	40020000 	.word	0x40020000
 80050fc:	4000440c 	.word	0x4000440c
 8005100:	40004410 	.word	0x40004410
 8005104:	40004414 	.word	0x40004414
 8005108:	0501bd00 	.word	0x0501bd00
 800510c:	40004408 	.word	0x40004408
 8005110:	20012ff4 	.word	0x20012ff4
 8005114:	20012ff8 	.word	0x20012ff8

08005118 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800511e:	4b26      	ldr	r3, [pc, #152]	@ (80051b8 <_DoInit+0xa0>)
 8005120:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005122:	22a8      	movs	r2, #168	@ 0xa8
 8005124:	2100      	movs	r1, #0
 8005126:	6838      	ldr	r0, [r7, #0]
 8005128:	f002 fa32 	bl	8007590 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2203      	movs	r2, #3
 8005130:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2203      	movs	r2, #3
 8005136:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	4a20      	ldr	r2, [pc, #128]	@ (80051bc <_DoInit+0xa4>)
 800513c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	4a1f      	ldr	r2, [pc, #124]	@ (80051c0 <_DoInit+0xa8>)
 8005142:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800514a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2200      	movs	r2, #0
 8005150:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2200      	movs	r2, #0
 8005156:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2200      	movs	r2, #0
 800515c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	4a16      	ldr	r2, [pc, #88]	@ (80051bc <_DoInit+0xa4>)
 8005162:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	4a17      	ldr	r2, [pc, #92]	@ (80051c4 <_DoInit+0xac>)
 8005168:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2210      	movs	r2, #16
 800516e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2200      	movs	r2, #0
 8005174:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2200      	movs	r2, #0
 800517a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2200      	movs	r2, #0
 8005180:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005182:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005186:	2300      	movs	r3, #0
 8005188:	607b      	str	r3, [r7, #4]
 800518a:	e00c      	b.n	80051a6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f1c3 030f 	rsb	r3, r3, #15
 8005192:	4a0d      	ldr	r2, [pc, #52]	@ (80051c8 <_DoInit+0xb0>)
 8005194:	5cd1      	ldrb	r1, [r2, r3]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4413      	add	r3, r2
 800519c:	460a      	mov	r2, r1
 800519e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3301      	adds	r3, #1
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b0f      	cmp	r3, #15
 80051aa:	d9ef      	bls.n	800518c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80051ac:	f3bf 8f5f 	dmb	sy
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	20012ffc 	.word	0x20012ffc
 80051bc:	08007fa0 	.word	0x08007fa0
 80051c0:	200130a4 	.word	0x200130a4
 80051c4:	200134a4 	.word	0x200134a4
 80051c8:	08007fe0 	.word	0x08007fe0

080051cc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	@ 0x28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80051d8:	2300      	movs	r3, #0
 80051da:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d905      	bls.n	80051fc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80051fa:	e007      	b.n	800520c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	69b9      	ldr	r1, [r7, #24]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	1acb      	subs	r3, r1, r3
 8005206:	4413      	add	r3, r2
 8005208:	3b01      	subs	r3, #1
 800520a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005216:	4293      	cmp	r3, r2
 8005218:	bf28      	it	cs
 800521a:	4613      	movcs	r3, r2
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800521e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4293      	cmp	r3, r2
 8005224:	bf28      	it	cs
 8005226:	4613      	movcs	r3, r2
 8005228:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	6978      	ldr	r0, [r7, #20]
 800523a:	f002 f9d7 	bl	80075ec <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800523e:	6a3a      	ldr	r2, [r7, #32]
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	4413      	add	r3, r2
 8005244:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	4413      	add	r3, r2
 800524c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	4413      	add	r3, r2
 800525c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	429a      	cmp	r2, r3
 8005266:	d101      	bne.n	800526c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005268:	2300      	movs	r3, #0
 800526a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800526c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1b2      	bne.n	80051e2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800527c:	6a3b      	ldr	r3, [r7, #32]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3728      	adds	r7, #40	@ 0x28
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005286:	b580      	push	{r7, lr}
 8005288:	b088      	sub	sp, #32
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d911      	bls.n	80052ce <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	6938      	ldr	r0, [r7, #16]
 80052ba:	f002 f997 	bl	80075ec <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052be:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	441a      	add	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80052cc:	e01f      	b.n	800530e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4413      	add	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	6938      	ldr	r0, [r7, #16]
 80052e2:	f002 f983 	bl	80075ec <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	4413      	add	r3, r2
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4619      	mov	r1, r3
 80052fe:	6938      	ldr	r0, [r7, #16]
 8005300:	f002 f974 	bl	80075ec <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005304:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	60da      	str	r2, [r3, #12]
}
 800530e:	bf00      	nop
 8005310:	3720      	adds	r7, #32
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005316:	b480      	push	{r7}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	429a      	cmp	r2, r3
 8005330:	d808      	bhi.n	8005344 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	1ad2      	subs	r2, r2, r3
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	4413      	add	r3, r2
 800533e:	3b01      	subs	r3, #1
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e004      	b.n	800534e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800534e:	697b      	ldr	r3, [r7, #20]
}
 8005350:	4618      	mov	r0, r3
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b08c      	sub	sp, #48	@ 0x30
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005368:	4b3e      	ldr	r3, [pc, #248]	@ (8005464 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800536a:	623b      	str	r3, [r7, #32]
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b53      	cmp	r3, #83	@ 0x53
 8005374:	d001      	beq.n	800537a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005376:	f7ff fecf 	bl	8005118 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	4613      	mov	r3, r2
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	4413      	add	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	4a37      	ldr	r2, [pc, #220]	@ (8005464 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005388:	4413      	add	r3, r2
 800538a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800539c:	2300      	movs	r3, #0
 800539e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80053a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d92b      	bls.n	8005400 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4293      	cmp	r3, r2
 80053b8:	bf28      	it	cs
 80053ba:	4613      	movcs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c4:	4413      	add	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	6939      	ldr	r1, [r7, #16]
 80053cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053ce:	f002 f90d 	bl	80075ec <memcpy>
    NumBytesRead += NumBytesRem;
 80053d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80053da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4413      	add	r3, r2
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d101      	bne.n	8005400 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80053fc:	2300      	movs	r3, #0
 80053fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4293      	cmp	r3, r2
 800540e:	bf28      	it	cs
 8005410:	4613      	movcs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d019      	beq.n	800544e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005420:	4413      	add	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	6939      	ldr	r1, [r7, #16]
 8005428:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800542a:	f002 f8df 	bl	80075ec <memcpy>
    NumBytesRead += NumBytesRem;
 800542e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	4413      	add	r3, r2
 800543c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	4413      	add	r3, r2
 800544c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800544e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005458:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800545a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800545c:	4618      	mov	r0, r3
 800545e:	3730      	adds	r7, #48	@ 0x30
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	20012ffc 	.word	0x20012ffc

08005468 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005468:	b580      	push	{r7, lr}
 800546a:	b08c      	sub	sp, #48	@ 0x30
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005474:	4b3e      	ldr	r3, [pc, #248]	@ (8005570 <SEGGER_RTT_ReadNoLock+0x108>)
 8005476:	623b      	str	r3, [r7, #32]
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b53      	cmp	r3, #83	@ 0x53
 8005480:	d001      	beq.n	8005486 <SEGGER_RTT_ReadNoLock+0x1e>
 8005482:	f7ff fe49 	bl	8005118 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4613      	mov	r3, r2
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	4413      	add	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	3360      	adds	r3, #96	@ 0x60
 8005492:	4a37      	ldr	r2, [pc, #220]	@ (8005570 <SEGGER_RTT_ReadNoLock+0x108>)
 8005494:	4413      	add	r3, r2
 8005496:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80054a8:	2300      	movs	r3, #0
 80054aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80054ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d92b      	bls.n	800550c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4293      	cmp	r3, r2
 80054c4:	bf28      	it	cs
 80054c6:	4613      	movcs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d0:	4413      	add	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	6939      	ldr	r1, [r7, #16]
 80054d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054da:	f002 f887 	bl	80075ec <memcpy>
    NumBytesRead += NumBytesRem;
 80054de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80054e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4413      	add	r3, r2
 80054fc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005504:	429a      	cmp	r2, r3
 8005506:	d101      	bne.n	800550c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005508:	2300      	movs	r3, #0
 800550a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4293      	cmp	r3, r2
 800551a:	bf28      	it	cs
 800551c:	4613      	movcs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d019      	beq.n	800555a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552c:	4413      	add	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	6939      	ldr	r1, [r7, #16]
 8005534:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005536:	f002 f859 	bl	80075ec <memcpy>
    NumBytesRead += NumBytesRem;
 800553a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	4413      	add	r3, r2
 8005540:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	4413      	add	r3, r2
 8005548:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005552:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	4413      	add	r3, r2
 8005558:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800555a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005564:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005568:	4618      	mov	r0, r3
 800556a:	3730      	adds	r7, #48	@ 0x30
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20012ffc 	.word	0x20012ffc

08005574 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4613      	mov	r3, r2
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	4413      	add	r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	3360      	adds	r3, #96	@ 0x60
 8005590:	4a1f      	ldr	r2, [pc, #124]	@ (8005610 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005592:	4413      	add	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d029      	beq.n	80055f2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d82e      	bhi.n	8005600 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d013      	beq.n	80055d2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80055aa:	e029      	b.n	8005600 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80055ac:	6978      	ldr	r0, [r7, #20]
 80055ae:	f7ff feb2 	bl	8005316 <_GetAvailWriteSpace>
 80055b2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d202      	bcs.n	80055c2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80055bc:	2300      	movs	r3, #0
 80055be:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80055c0:	e021      	b.n	8005606 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	69b9      	ldr	r1, [r7, #24]
 80055ca:	6978      	ldr	r0, [r7, #20]
 80055cc:	f7ff fe5b 	bl	8005286 <_WriteNoCheck>
    break;
 80055d0:	e019      	b.n	8005606 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80055d2:	6978      	ldr	r0, [r7, #20]
 80055d4:	f7ff fe9f 	bl	8005316 <_GetAvailWriteSpace>
 80055d8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4293      	cmp	r3, r2
 80055e0:	bf28      	it	cs
 80055e2:	4613      	movcs	r3, r2
 80055e4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	69b9      	ldr	r1, [r7, #24]
 80055ea:	6978      	ldr	r0, [r7, #20]
 80055ec:	f7ff fe4b 	bl	8005286 <_WriteNoCheck>
    break;
 80055f0:	e009      	b.n	8005606 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	69b9      	ldr	r1, [r7, #24]
 80055f6:	6978      	ldr	r0, [r7, #20]
 80055f8:	f7ff fde8 	bl	80051cc <_WriteBlocking>
 80055fc:	61f8      	str	r0, [r7, #28]
    break;
 80055fe:	e002      	b.n	8005606 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005600:	2300      	movs	r3, #0
 8005602:	61fb      	str	r3, [r7, #28]
    break;
 8005604:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005606:	69fb      	ldr	r3, [r7, #28]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3720      	adds	r7, #32
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20012ffc 	.word	0x20012ffc

08005614 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005620:	4b0e      	ldr	r3, [pc, #56]	@ (800565c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005622:	61fb      	str	r3, [r7, #28]
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b53      	cmp	r3, #83	@ 0x53
 800562c:	d001      	beq.n	8005632 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800562e:	f7ff fd73 	bl	8005118 <_DoInit>
  SEGGER_RTT_LOCK();
 8005632:	f3ef 8311 	mrs	r3, BASEPRI
 8005636:	f04f 0120 	mov.w	r1, #32
 800563a:	f381 8811 	msr	BASEPRI, r1
 800563e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff ff95 	bl	8005574 <SEGGER_RTT_WriteDownBufferNoLock>
 800564a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005652:	697b      	ldr	r3, [r7, #20]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3720      	adds	r7, #32
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20012ffc 	.word	0x20012ffc

08005660 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800566e:	4b3d      	ldr	r3, [pc, #244]	@ (8005764 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b53      	cmp	r3, #83	@ 0x53
 800567a:	d001      	beq.n	8005680 <SEGGER_RTT_AllocUpBuffer+0x20>
 800567c:	f7ff fd4c 	bl	8005118 <_DoInit>
  SEGGER_RTT_LOCK();
 8005680:	f3ef 8311 	mrs	r3, BASEPRI
 8005684:	f04f 0120 	mov.w	r1, #32
 8005688:	f381 8811 	msr	BASEPRI, r1
 800568c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800568e:	4b35      	ldr	r3, [pc, #212]	@ (8005764 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005690:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005692:	2300      	movs	r3, #0
 8005694:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005696:	6939      	ldr	r1, [r7, #16]
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	4613      	mov	r3, r2
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	4413      	add	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	440b      	add	r3, r1
 80056a6:	3304      	adds	r3, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d008      	beq.n	80056c0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	3301      	adds	r3, #1
 80056b2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	dbeb      	blt.n	8005696 <SEGGER_RTT_AllocUpBuffer+0x36>
 80056be:	e000      	b.n	80056c2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80056c0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	da3f      	bge.n	800574c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80056cc:	6939      	ldr	r1, [r7, #16]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	4613      	mov	r3, r2
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	4413      	add	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	440b      	add	r3, r1
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80056e0:	6939      	ldr	r1, [r7, #16]
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	4613      	mov	r3, r2
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	4413      	add	r3, r2
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	440b      	add	r3, r1
 80056f0:	3304      	adds	r3, #4
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80056f6:	6939      	ldr	r1, [r7, #16]
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	4613      	mov	r3, r2
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	4413      	add	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	440b      	add	r3, r1
 8005704:	3320      	adds	r3, #32
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800570a:	6939      	ldr	r1, [r7, #16]
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	4613      	mov	r3, r2
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	4413      	add	r3, r2
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	440b      	add	r3, r1
 8005718:	3328      	adds	r3, #40	@ 0x28
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800571e:	6939      	ldr	r1, [r7, #16]
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	4613      	mov	r3, r2
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	4413      	add	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	440b      	add	r3, r1
 800572c:	3324      	adds	r3, #36	@ 0x24
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005732:	6939      	ldr	r1, [r7, #16]
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	440b      	add	r3, r1
 8005740:	332c      	adds	r3, #44	@ 0x2c
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005746:	f3bf 8f5f 	dmb	sy
 800574a:	e002      	b.n	8005752 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800574c:	f04f 33ff 	mov.w	r3, #4294967295
 8005750:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005758:	69fb      	ldr	r3, [r7, #28]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3720      	adds	r7, #32
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20012ffc 	.word	0x20012ffc

08005768 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b08a      	sub	sp, #40	@ 0x28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005776:	4b21      	ldr	r3, [pc, #132]	@ (80057fc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b53      	cmp	r3, #83	@ 0x53
 8005782:	d001      	beq.n	8005788 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005784:	f7ff fcc8 	bl	8005118 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005788:	4b1c      	ldr	r3, [pc, #112]	@ (80057fc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800578a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d82c      	bhi.n	80057ec <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005792:	f3ef 8311 	mrs	r3, BASEPRI
 8005796:	f04f 0120 	mov.w	r1, #32
 800579a:	f381 8811 	msr	BASEPRI, r1
 800579e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4613      	mov	r3, r2
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	4413      	add	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	3360      	adds	r3, #96	@ 0x60
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00e      	beq.n	80057d6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2200      	movs	r2, #0
 80057ce:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	2200      	movs	r2, #0
 80057d4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057da:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80057dc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ea:	e002      	b.n	80057f2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80057ec:	f04f 33ff 	mov.w	r3, #4294967295
 80057f0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3728      	adds	r7, #40	@ 0x28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20012ffc 	.word	0x20012ffc

08005800 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d105      	bne.n	800581e <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	60fa      	str	r2, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	701a      	strb	r2, [r3, #0]
 800581c:	e022      	b.n	8005864 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	60fa      	str	r2, [r7, #12]
 8005828:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b80      	cmp	r3, #128	@ 0x80
 800582e:	d90a      	bls.n	8005846 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005830:	2380      	movs	r3, #128	@ 0x80
 8005832:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005834:	e007      	b.n	8005846 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	1c53      	adds	r3, r2, #1
 800583a:	60bb      	str	r3, [r7, #8]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	1c59      	adds	r1, r3, #1
 8005840:	60f9      	str	r1, [r7, #12]
 8005842:	7812      	ldrb	r2, [r2, #0]
 8005844:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	1e5a      	subs	r2, r3, #1
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <_EncodeStr+0x58>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1ee      	bne.n	8005836 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	b2da      	uxtb	r2, r3
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8005864:	68fb      	ldr	r3, [r7, #12]
}
 8005866:	4618      	mov	r0, r3
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3307      	adds	r3, #7
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005892:	4b34      	ldr	r3, [pc, #208]	@ (8005964 <_HandleIncomingPacket+0xd8>)
 8005894:	7e1b      	ldrb	r3, [r3, #24]
 8005896:	4618      	mov	r0, r3
 8005898:	1cfb      	adds	r3, r7, #3
 800589a:	2201      	movs	r2, #1
 800589c:	4619      	mov	r1, r3
 800589e:	f7ff fde3 	bl	8005468 <SEGGER_RTT_ReadNoLock>
 80058a2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d057      	beq.n	800595a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80058aa:	78fb      	ldrb	r3, [r7, #3]
 80058ac:	2b80      	cmp	r3, #128	@ 0x80
 80058ae:	d031      	beq.n	8005914 <_HandleIncomingPacket+0x88>
 80058b0:	2b80      	cmp	r3, #128	@ 0x80
 80058b2:	dc40      	bgt.n	8005936 <_HandleIncomingPacket+0xaa>
 80058b4:	2b07      	cmp	r3, #7
 80058b6:	dc15      	bgt.n	80058e4 <_HandleIncomingPacket+0x58>
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	dd3c      	ble.n	8005936 <_HandleIncomingPacket+0xaa>
 80058bc:	3b01      	subs	r3, #1
 80058be:	2b06      	cmp	r3, #6
 80058c0:	d839      	bhi.n	8005936 <_HandleIncomingPacket+0xaa>
 80058c2:	a201      	add	r2, pc, #4	@ (adr r2, 80058c8 <_HandleIncomingPacket+0x3c>)
 80058c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c8:	080058eb 	.word	0x080058eb
 80058cc:	080058f1 	.word	0x080058f1
 80058d0:	080058f7 	.word	0x080058f7
 80058d4:	080058fd 	.word	0x080058fd
 80058d8:	08005903 	.word	0x08005903
 80058dc:	08005909 	.word	0x08005909
 80058e0:	0800590f 	.word	0x0800590f
 80058e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80058e6:	d033      	beq.n	8005950 <_HandleIncomingPacket+0xc4>
 80058e8:	e025      	b.n	8005936 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80058ea:	f000 fff3 	bl	80068d4 <SEGGER_SYSVIEW_Start>
      break;
 80058ee:	e034      	b.n	800595a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80058f0:	f001 f8ac 	bl	8006a4c <SEGGER_SYSVIEW_Stop>
      break;
 80058f4:	e031      	b.n	800595a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80058f6:	f001 fa85 	bl	8006e04 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80058fa:	e02e      	b.n	800595a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80058fc:	f001 fa4a 	bl	8006d94 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005900:	e02b      	b.n	800595a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005902:	f001 f8c9 	bl	8006a98 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005906:	e028      	b.n	800595a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005908:	f001 fd22 	bl	8007350 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800590c:	e025      	b.n	800595a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800590e:	f001 fd01 	bl	8007314 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005912:	e022      	b.n	800595a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005914:	4b13      	ldr	r3, [pc, #76]	@ (8005964 <_HandleIncomingPacket+0xd8>)
 8005916:	7e1b      	ldrb	r3, [r3, #24]
 8005918:	4618      	mov	r0, r3
 800591a:	1cfb      	adds	r3, r7, #3
 800591c:	2201      	movs	r2, #1
 800591e:	4619      	mov	r1, r3
 8005920:	f7ff fda2 	bl	8005468 <SEGGER_RTT_ReadNoLock>
 8005924:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d013      	beq.n	8005954 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800592c:	78fb      	ldrb	r3, [r7, #3]
 800592e:	4618      	mov	r0, r3
 8005930:	f001 fc66 	bl	8007200 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005934:	e00e      	b.n	8005954 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	b25b      	sxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	da0c      	bge.n	8005958 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800593e:	4b09      	ldr	r3, [pc, #36]	@ (8005964 <_HandleIncomingPacket+0xd8>)
 8005940:	7e1b      	ldrb	r3, [r3, #24]
 8005942:	4618      	mov	r0, r3
 8005944:	1cfb      	adds	r3, r7, #3
 8005946:	2201      	movs	r2, #1
 8005948:	4619      	mov	r1, r3
 800594a:	f7ff fd8d 	bl	8005468 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800594e:	e003      	b.n	8005958 <_HandleIncomingPacket+0xcc>
      break;
 8005950:	bf00      	nop
 8005952:	e002      	b.n	800595a <_HandleIncomingPacket+0xce>
      break;
 8005954:	bf00      	nop
 8005956:	e000      	b.n	800595a <_HandleIncomingPacket+0xce>
      break;
 8005958:	bf00      	nop
    }
  }
}
 800595a:	bf00      	nop
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	200140bc 	.word	0x200140bc

08005968 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b08c      	sub	sp, #48	@ 0x30
 800596c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800596e:	2301      	movs	r3, #1
 8005970:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005972:	1d3b      	adds	r3, r7, #4
 8005974:	3301      	adds	r3, #1
 8005976:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800597c:	4b32      	ldr	r3, [pc, #200]	@ (8005a48 <_TrySendOverflowPacket+0xe0>)
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005982:	e00b      	b.n	800599c <_TrySendOverflowPacket+0x34>
 8005984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005986:	b2da      	uxtb	r2, r3
 8005988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800598a:	1c59      	adds	r1, r3, #1
 800598c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800598e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]
 8005996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005998:	09db      	lsrs	r3, r3, #7
 800599a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800599c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599e:	2b7f      	cmp	r3, #127	@ 0x7f
 80059a0:	d8f0      	bhi.n	8005984 <_TrySendOverflowPacket+0x1c>
 80059a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059aa:	b2d2      	uxtb	r2, r2
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80059b2:	4b26      	ldr	r3, [pc, #152]	@ (8005a4c <_TrySendOverflowPacket+0xe4>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80059b8:	4b23      	ldr	r3, [pc, #140]	@ (8005a48 <_TrySendOverflowPacket+0xe0>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	623b      	str	r3, [r7, #32]
 80059ca:	e00b      	b.n	80059e4 <_TrySendOverflowPacket+0x7c>
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	1c59      	adds	r1, r3, #1
 80059d4:	6279      	str	r1, [r7, #36]	@ 0x24
 80059d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	09db      	lsrs	r3, r3, #7
 80059e2:	623b      	str	r3, [r7, #32]
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80059e8:	d8f0      	bhi.n	80059cc <_TrySendOverflowPacket+0x64>
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80059f0:	6a3a      	ldr	r2, [r7, #32]
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80059fa:	4b13      	ldr	r3, [pc, #76]	@ (8005a48 <_TrySendOverflowPacket+0xe0>)
 80059fc:	785b      	ldrb	r3, [r3, #1]
 80059fe:	4618      	mov	r0, r3
 8005a00:	1d3b      	adds	r3, r7, #4
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	1d3b      	adds	r3, r7, #4
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	f7fa fc00 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a10:	4603      	mov	r3, r0
 8005a12:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005a14:	f7ff faf6 	bl	8005004 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a48 <_TrySendOverflowPacket+0xe0>)
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005a24:	4b08      	ldr	r3, [pc, #32]	@ (8005a48 <_TrySendOverflowPacket+0xe0>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	4b06      	ldr	r3, [pc, #24]	@ (8005a48 <_TrySendOverflowPacket+0xe0>)
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	e004      	b.n	8005a3c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005a32:	4b05      	ldr	r3, [pc, #20]	@ (8005a48 <_TrySendOverflowPacket+0xe0>)
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	3301      	adds	r3, #1
 8005a38:	4a03      	ldr	r2, [pc, #12]	@ (8005a48 <_TrySendOverflowPacket+0xe0>)
 8005a3a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005a3c:	693b      	ldr	r3, [r7, #16]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3730      	adds	r7, #48	@ 0x30
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	200140bc 	.word	0x200140bc
 8005a4c:	e0001004 	.word	0xe0001004

08005a50 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08a      	sub	sp, #40	@ 0x28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005a5c:	4b96      	ldr	r3, [pc, #600]	@ (8005cb8 <_SendPacket+0x268>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d010      	beq.n	8005a86 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005a64:	4b94      	ldr	r3, [pc, #592]	@ (8005cb8 <_SendPacket+0x268>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8130 	beq.w	8005cce <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005a6e:	4b92      	ldr	r3, [pc, #584]	@ (8005cb8 <_SendPacket+0x268>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d109      	bne.n	8005a8a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005a76:	f7ff ff77 	bl	8005968 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005a7a:	4b8f      	ldr	r3, [pc, #572]	@ (8005cb8 <_SendPacket+0x268>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	f040 8127 	bne.w	8005cd2 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005a84:	e001      	b.n	8005a8a <_SendPacket+0x3a>
    goto Send;
 8005a86:	bf00      	nop
 8005a88:	e000      	b.n	8005a8c <_SendPacket+0x3c>
Send:
 8005a8a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b1f      	cmp	r3, #31
 8005a90:	d809      	bhi.n	8005aa6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005a92:	4b89      	ldr	r3, [pc, #548]	@ (8005cb8 <_SendPacket+0x268>)
 8005a94:	69da      	ldr	r2, [r3, #28]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	fa22 f303 	lsr.w	r3, r2, r3
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f040 8118 	bne.w	8005cd6 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b17      	cmp	r3, #23
 8005aaa:	d807      	bhi.n	8005abc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	e0c4      	b.n	8005c46 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ac8:	d912      	bls.n	8005af0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	09da      	lsrs	r2, r3, #7
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	3a01      	subs	r2, #1
 8005ae2:	60fa      	str	r2, [r7, #12]
 8005ae4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	e006      	b.n	8005afe <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b7e      	cmp	r3, #126	@ 0x7e
 8005b02:	d807      	bhi.n	8005b14 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	e098      	b.n	8005c46 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b1a:	d212      	bcs.n	8005b42 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	09da      	lsrs	r2, r3, #7
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	3a01      	subs	r2, #1
 8005b34:	60fa      	str	r2, [r7, #12]
 8005b36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	e081      	b.n	8005c46 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b48:	d21d      	bcs.n	8005b86 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	0b9a      	lsrs	r2, r3, #14
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3b01      	subs	r3, #1
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	09db      	lsrs	r3, r3, #7
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	3a01      	subs	r2, #1
 8005b64:	60fa      	str	r2, [r7, #12]
 8005b66:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	3a01      	subs	r2, #1
 8005b78:	60fa      	str	r2, [r7, #12]
 8005b7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	e05f      	b.n	8005c46 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b8c:	d228      	bcs.n	8005be0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	0d5a      	lsrs	r2, r3, #21
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	0b9b      	lsrs	r3, r3, #14
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	3a01      	subs	r2, #1
 8005ba8:	60fa      	str	r2, [r7, #12]
 8005baa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	09db      	lsrs	r3, r3, #7
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	3a01      	subs	r2, #1
 8005bbe:	60fa      	str	r2, [r7, #12]
 8005bc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	3a01      	subs	r2, #1
 8005bd2:	60fa      	str	r2, [r7, #12]
 8005bd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	e032      	b.n	8005c46 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	0f1a      	lsrs	r2, r3, #28
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	0d5b      	lsrs	r3, r3, #21
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	3a01      	subs	r2, #1
 8005bfa:	60fa      	str	r2, [r7, #12]
 8005bfc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	0b9b      	lsrs	r3, r3, #14
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	3a01      	subs	r2, #1
 8005c10:	60fa      	str	r2, [r7, #12]
 8005c12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	09db      	lsrs	r3, r3, #7
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	3a01      	subs	r2, #1
 8005c26:	60fa      	str	r2, [r7, #12]
 8005c28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	3a01      	subs	r2, #1
 8005c3a:	60fa      	str	r2, [r7, #12]
 8005c3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c46:	4b1d      	ldr	r3, [pc, #116]	@ (8005cbc <_SendPacket+0x26c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb8 <_SendPacket+0x268>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	623b      	str	r3, [r7, #32]
 8005c5e:	e00b      	b.n	8005c78 <_SendPacket+0x228>
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	1c59      	adds	r1, r3, #1
 8005c68:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	09db      	lsrs	r3, r3, #7
 8005c76:	623b      	str	r3, [r7, #32]
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c7c:	d8f0      	bhi.n	8005c60 <_SendPacket+0x210>
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c84:	6a3a      	ldr	r2, [r7, #32]
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb8 <_SendPacket+0x268>)
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	4618      	mov	r0, r3
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68f9      	ldr	r1, [r7, #12]
 8005c9e:	f7fa fab7 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ca2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005ca4:	f7ff f9ae 	bl	8005004 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d008      	beq.n	8005cc0 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005cae:	4a02      	ldr	r2, [pc, #8]	@ (8005cb8 <_SendPacket+0x268>)
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	60d3      	str	r3, [r2, #12]
 8005cb4:	e010      	b.n	8005cd8 <_SendPacket+0x288>
 8005cb6:	bf00      	nop
 8005cb8:	200140bc 	.word	0x200140bc
 8005cbc:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005cc0:	4b19      	ldr	r3, [pc, #100]	@ (8005d28 <_SendPacket+0x2d8>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	4b17      	ldr	r3, [pc, #92]	@ (8005d28 <_SendPacket+0x2d8>)
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	e004      	b.n	8005cd8 <_SendPacket+0x288>
    goto SendDone;
 8005cce:	bf00      	nop
 8005cd0:	e002      	b.n	8005cd8 <_SendPacket+0x288>
      goto SendDone;
 8005cd2:	bf00      	nop
 8005cd4:	e000      	b.n	8005cd8 <_SendPacket+0x288>
      goto SendDone;
 8005cd6:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005cd8:	4b13      	ldr	r3, [pc, #76]	@ (8005d28 <_SendPacket+0x2d8>)
 8005cda:	7e1b      	ldrb	r3, [r3, #24]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4a13      	ldr	r2, [pc, #76]	@ (8005d2c <_SendPacket+0x2dc>)
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	440b      	add	r3, r1
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	4413      	add	r3, r2
 8005cea:	336c      	adds	r3, #108	@ 0x6c
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	4b0e      	ldr	r3, [pc, #56]	@ (8005d28 <_SendPacket+0x2d8>)
 8005cf0:	7e1b      	ldrb	r3, [r3, #24]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	490d      	ldr	r1, [pc, #52]	@ (8005d2c <_SendPacket+0x2dc>)
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	4403      	add	r3, r0
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	440b      	add	r3, r1
 8005d00:	3370      	adds	r3, #112	@ 0x70
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d00b      	beq.n	8005d20 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005d08:	4b07      	ldr	r3, [pc, #28]	@ (8005d28 <_SendPacket+0x2d8>)
 8005d0a:	789b      	ldrb	r3, [r3, #2]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d107      	bne.n	8005d20 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005d10:	4b05      	ldr	r3, [pc, #20]	@ (8005d28 <_SendPacket+0x2d8>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005d16:	f7ff fdb9 	bl	800588c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005d1a:	4b03      	ldr	r3, [pc, #12]	@ (8005d28 <_SendPacket+0x2d8>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005d20:	bf00      	nop
 8005d22:	3728      	adds	r7, #40	@ 0x28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	200140bc 	.word	0x200140bc
 8005d2c:	20012ffc 	.word	0x20012ffc

08005d30 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08a      	sub	sp, #40	@ 0x28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	3301      	adds	r3, #1
 8005d46:	2b80      	cmp	r3, #128	@ 0x80
 8005d48:	d80a      	bhi.n	8005d60 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	1c59      	adds	r1, r3, #1
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6051      	str	r1, [r2, #4]
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b80      	cmp	r3, #128	@ 0x80
 8005d66:	d15a      	bne.n	8005e1e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691a      	ldr	r2, [r3, #16]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	623b      	str	r3, [r7, #32]
 8005d88:	e00b      	b.n	8005da2 <_StoreChar+0x72>
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d90:	1c59      	adds	r1, r3, #1
 8005d92:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	09db      	lsrs	r3, r3, #7
 8005da0:	623b      	str	r3, [r7, #32]
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005da6:	d8f0      	bhi.n	8005d8a <_StoreChar+0x5a>
 8005da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	627a      	str	r2, [r7, #36]	@ 0x24
 8005dae:	6a3a      	ldr	r2, [r7, #32]
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	701a      	strb	r2, [r3, #0]
 8005db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	61fb      	str	r3, [r7, #28]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	61bb      	str	r3, [r7, #24]
 8005dc0:	e00b      	b.n	8005dda <_StoreChar+0xaa>
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	1c59      	adds	r1, r3, #1
 8005dca:	61f9      	str	r1, [r7, #28]
 8005dcc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	701a      	strb	r2, [r3, #0]
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	09db      	lsrs	r3, r3, #7
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dde:	d8f0      	bhi.n	8005dc2 <_StoreChar+0x92>
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	61fa      	str	r2, [r7, #28]
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	701a      	strb	r2, [r3, #0]
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	221a      	movs	r2, #26
 8005df6:	6939      	ldr	r1, [r7, #16]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fe29 	bl	8005a50 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fd35 	bl	8005872 <_PreparePacket>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	611a      	str	r2, [r3, #16]
  }
}
 8005e1e:	bf00      	nop
 8005e20:	3728      	adds	r7, #40	@ 0x28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	@ 0x28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005e42:	e007      	b.n	8005e54 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005e44:	6a3a      	ldr	r2, [r7, #32]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4c:	623b      	str	r3, [r7, #32]
    Width++;
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	3301      	adds	r3, #1
 8005e52:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005e54:	6a3a      	ldr	r2, [r7, #32]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d2f3      	bcs.n	8005e44 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d901      	bls.n	8005e68 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d000      	beq.n	8005e74 <_PrintUnsigned+0x4c>
 8005e72:	e01f      	b.n	8005eb4 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d01c      	beq.n	8005eb4 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <_PrintUnsigned+0x68>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d102      	bne.n	8005e90 <_PrintUnsigned+0x68>
        c = '0';
 8005e8a:	2330      	movs	r3, #48	@ 0x30
 8005e8c:	76fb      	strb	r3, [r7, #27]
 8005e8e:	e001      	b.n	8005e94 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005e90:	2320      	movs	r3, #32
 8005e92:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e94:	e007      	b.n	8005ea6 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005e9c:	7efb      	ldrb	r3, [r7, #27]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff ff45 	bl	8005d30 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <_PrintUnsigned+0x8c>
 8005eac:	69fa      	ldr	r2, [r7, #28]
 8005eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d3f0      	bcc.n	8005e96 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d903      	bls.n	8005ec2 <_PrintUnsigned+0x9a>
      NumDigits--;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	603b      	str	r3, [r7, #0]
 8005ec0:	e009      	b.n	8005ed6 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eca:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d200      	bcs.n	8005ed6 <_PrintUnsigned+0xae>
        break;
 8005ed4:	e005      	b.n	8005ee2 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	fb02 f303 	mul.w	r3, r2, r3
 8005ede:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005ee0:	e7e8      	b.n	8005eb4 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eea:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005efa:	4a15      	ldr	r2, [pc, #84]	@ (8005f50 <_PrintUnsigned+0x128>)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	4413      	add	r3, r2
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	4619      	mov	r1, r3
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f7ff ff13 	bl	8005d30 <_StoreChar>
    Digit /= Base;
 8005f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f12:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e3      	bne.n	8005ee2 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d011      	beq.n	8005f48 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00e      	beq.n	8005f48 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f2a:	e006      	b.n	8005f3a <_PrintUnsigned+0x112>
        FieldWidth--;
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005f32:	2120      	movs	r1, #32
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f7ff fefb 	bl	8005d30 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <_PrintUnsigned+0x120>
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d3f1      	bcc.n	8005f2c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005f48:	bf00      	nop
 8005f4a:	3728      	adds	r7, #40	@ 0x28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	08008000 	.word	0x08008000

08005f54 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bfb8      	it	lt
 8005f68:	425b      	neglt	r3, r3
 8005f6a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005f70:	e007      	b.n	8005f82 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f7a:	613b      	str	r3, [r7, #16]
    Width++;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	daf3      	bge.n	8005f72 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d901      	bls.n	8005f96 <_PrintInt+0x42>
    Width = NumDigits;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <_PrintInt+0x5e>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	db04      	blt.n	8005fac <_PrintInt+0x58>
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <_PrintInt+0x5e>
    FieldWidth--;
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <_PrintInt+0x6e>
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d016      	beq.n	8005ff0 <_PrintInt+0x9c>
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d111      	bne.n	8005ff0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00e      	beq.n	8005ff0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fd2:	e006      	b.n	8005fe2 <_PrintInt+0x8e>
        FieldWidth--;
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005fda:	2120      	movs	r1, #32
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff fea7 	bl	8005d30 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <_PrintInt+0x9c>
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d3f1      	bcc.n	8005fd4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da07      	bge.n	8006006 <_PrintInt+0xb2>
    v = -v;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	425b      	negs	r3, r3
 8005ffa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005ffc:	212d      	movs	r1, #45	@ 0x2d
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7ff fe96 	bl	8005d30 <_StoreChar>
 8006004:	e008      	b.n	8006018 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006010:	212b      	movs	r1, #43	@ 0x2b
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7ff fe8c 	bl	8005d30 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d019      	beq.n	8006056 <_PrintInt+0x102>
 8006022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d114      	bne.n	8006056 <_PrintInt+0x102>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d111      	bne.n	8006056 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00e      	beq.n	8006056 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006038:	e006      	b.n	8006048 <_PrintInt+0xf4>
        FieldWidth--;
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	3b01      	subs	r3, #1
 800603e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006040:	2130      	movs	r1, #48	@ 0x30
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7ff fe74 	bl	8005d30 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <_PrintInt+0x102>
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	429a      	cmp	r2, r3
 8006054:	d3f1      	bcc.n	800603a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	9301      	str	r3, [sp, #4]
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f7ff fedf 	bl	8005e28 <_PrintUnsigned>
}
 800606a:	bf00      	nop
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006074:	b580      	push	{r7, lr}
 8006076:	b098      	sub	sp, #96	@ 0x60
 8006078:	af02      	add	r7, sp, #8
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006080:	f3ef 8311 	mrs	r3, BASEPRI
 8006084:	f04f 0120 	mov.w	r1, #32
 8006088:	f381 8811 	msr	BASEPRI, r1
 800608c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800608e:	48b7      	ldr	r0, [pc, #732]	@ (800636c <_VPrintTarget+0x2f8>)
 8006090:	f7ff fbef 	bl	8005872 <_PreparePacket>
 8006094:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006096:	4bb5      	ldr	r3, [pc, #724]	@ (800636c <_VPrintTarget+0x2f8>)
 8006098:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 800609a:	2300      	movs	r3, #0
 800609c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800609e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	3301      	adds	r3, #1
 80060a6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3301      	adds	r3, #1
 80060b8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80060ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 81a8 	beq.w	8006414 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80060c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060c8:	2b25      	cmp	r3, #37	@ 0x25
 80060ca:	f040 8195 	bne.w	80063f8 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80060ce:	2300      	movs	r3, #0
 80060d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80060d2:	2301      	movs	r3, #1
 80060d4:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80060de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060e2:	3b23      	subs	r3, #35	@ 0x23
 80060e4:	2b0d      	cmp	r3, #13
 80060e6:	d83f      	bhi.n	8006168 <_VPrintTarget+0xf4>
 80060e8:	a201      	add	r2, pc, #4	@ (adr r2, 80060f0 <_VPrintTarget+0x7c>)
 80060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ee:	bf00      	nop
 80060f0:	08006159 	.word	0x08006159
 80060f4:	08006169 	.word	0x08006169
 80060f8:	08006169 	.word	0x08006169
 80060fc:	08006169 	.word	0x08006169
 8006100:	08006169 	.word	0x08006169
 8006104:	08006169 	.word	0x08006169
 8006108:	08006169 	.word	0x08006169
 800610c:	08006169 	.word	0x08006169
 8006110:	08006149 	.word	0x08006149
 8006114:	08006169 	.word	0x08006169
 8006118:	08006129 	.word	0x08006129
 800611c:	08006169 	.word	0x08006169
 8006120:	08006169 	.word	0x08006169
 8006124:	08006139 	.word	0x08006139
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006128:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800612a:	f043 0301 	orr.w	r3, r3, #1
 800612e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3301      	adds	r3, #1
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	e01a      	b.n	800616e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800613a:	f043 0302 	orr.w	r3, r3, #2
 800613e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3301      	adds	r3, #1
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	e012      	b.n	800616e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800614a:	f043 0304 	orr.w	r3, r3, #4
 800614e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3301      	adds	r3, #1
 8006154:	60fb      	str	r3, [r7, #12]
 8006156:	e00a      	b.n	800616e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800615a:	f043 0308 	orr.w	r3, r3, #8
 800615e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	3301      	adds	r3, #1
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	e002      	b.n	800616e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006168:	2300      	movs	r3, #0
 800616a:	653b      	str	r3, [r7, #80]	@ 0x50
 800616c:	bf00      	nop
        }
      } while (v);
 800616e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1b0      	bne.n	80060d6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006174:	2300      	movs	r3, #0
 8006176:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006180:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006184:	2b2f      	cmp	r3, #47	@ 0x2f
 8006186:	d912      	bls.n	80061ae <_VPrintTarget+0x13a>
 8006188:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800618c:	2b39      	cmp	r3, #57	@ 0x39
 800618e:	d80e      	bhi.n	80061ae <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3301      	adds	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	461a      	mov	r2, r3
 80061a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061a6:	4413      	add	r3, r2
 80061a8:	3b30      	subs	r3, #48	@ 0x30
 80061aa:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 80061ac:	e7e4      	b.n	8006178 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80061ae:	2300      	movs	r3, #0
 80061b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 80061ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061be:	2b2e      	cmp	r3, #46	@ 0x2e
 80061c0:	d11d      	bne.n	80061fe <_VPrintTarget+0x18a>
        sFormat++;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3301      	adds	r3, #1
 80061c6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80061d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80061d6:	d912      	bls.n	80061fe <_VPrintTarget+0x18a>
 80061d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061dc:	2b39      	cmp	r3, #57	@ 0x39
 80061de:	d80e      	bhi.n	80061fe <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80061e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	461a      	mov	r2, r3
 80061f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061f6:	4413      	add	r3, r2
 80061f8:	3b30      	subs	r3, #48	@ 0x30
 80061fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80061fc:	e7e4      	b.n	80061c8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006206:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800620a:	2b6c      	cmp	r3, #108	@ 0x6c
 800620c:	d003      	beq.n	8006216 <_VPrintTarget+0x1a2>
 800620e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006212:	2b68      	cmp	r3, #104	@ 0x68
 8006214:	d107      	bne.n	8006226 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3301      	adds	r3, #1
 8006222:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006224:	e7ef      	b.n	8006206 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006226:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800622a:	2b25      	cmp	r3, #37	@ 0x25
 800622c:	f000 80d8 	beq.w	80063e0 <_VPrintTarget+0x36c>
 8006230:	2b25      	cmp	r3, #37	@ 0x25
 8006232:	f2c0 80dc 	blt.w	80063ee <_VPrintTarget+0x37a>
 8006236:	2b78      	cmp	r3, #120	@ 0x78
 8006238:	f300 80d9 	bgt.w	80063ee <_VPrintTarget+0x37a>
 800623c:	2b58      	cmp	r3, #88	@ 0x58
 800623e:	f2c0 80d6 	blt.w	80063ee <_VPrintTarget+0x37a>
 8006242:	3b58      	subs	r3, #88	@ 0x58
 8006244:	2b20      	cmp	r3, #32
 8006246:	f200 80d2 	bhi.w	80063ee <_VPrintTarget+0x37a>
 800624a:	a201      	add	r2, pc, #4	@ (adr r2, 8006250 <_VPrintTarget+0x1dc>)
 800624c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006250:	08006347 	.word	0x08006347
 8006254:	080063ef 	.word	0x080063ef
 8006258:	080063ef 	.word	0x080063ef
 800625c:	080063ef 	.word	0x080063ef
 8006260:	080063ef 	.word	0x080063ef
 8006264:	080063ef 	.word	0x080063ef
 8006268:	080063ef 	.word	0x080063ef
 800626c:	080063ef 	.word	0x080063ef
 8006270:	080063ef 	.word	0x080063ef
 8006274:	080063ef 	.word	0x080063ef
 8006278:	080063ef 	.word	0x080063ef
 800627c:	080062d5 	.word	0x080062d5
 8006280:	080062fb 	.word	0x080062fb
 8006284:	080063ef 	.word	0x080063ef
 8006288:	080063ef 	.word	0x080063ef
 800628c:	080063ef 	.word	0x080063ef
 8006290:	080063ef 	.word	0x080063ef
 8006294:	080063ef 	.word	0x080063ef
 8006298:	080063ef 	.word	0x080063ef
 800629c:	080063ef 	.word	0x080063ef
 80062a0:	080063ef 	.word	0x080063ef
 80062a4:	080063ef 	.word	0x080063ef
 80062a8:	080063ef 	.word	0x080063ef
 80062ac:	080063ef 	.word	0x080063ef
 80062b0:	080063bb 	.word	0x080063bb
 80062b4:	080063ef 	.word	0x080063ef
 80062b8:	080063ef 	.word	0x080063ef
 80062bc:	08006371 	.word	0x08006371
 80062c0:	080063ef 	.word	0x080063ef
 80062c4:	08006321 	.word	0x08006321
 80062c8:	080063ef 	.word	0x080063ef
 80062cc:	080063ef 	.word	0x080063ef
 80062d0:	08006347 	.word	0x08006347
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	1d19      	adds	r1, r3, #4
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6011      	str	r1, [r2, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80062e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 80062e8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80062ec:	f107 0310 	add.w	r3, r7, #16
 80062f0:	4611      	mov	r1, r2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff fd1c 	bl	8005d30 <_StoreChar>
        break;
 80062f8:	e07a      	b.n	80063f0 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	1d19      	adds	r1, r3, #4
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6011      	str	r1, [r2, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006308:	f107 0010 	add.w	r0, r7, #16
 800630c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800630e:	9301      	str	r3, [sp, #4]
 8006310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006316:	220a      	movs	r2, #10
 8006318:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800631a:	f7ff fe1b 	bl	8005f54 <_PrintInt>
        break;
 800631e:	e067      	b.n	80063f0 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	1d19      	adds	r1, r3, #4
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6011      	str	r1, [r2, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800632e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006330:	f107 0010 	add.w	r0, r7, #16
 8006334:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800633e:	220a      	movs	r2, #10
 8006340:	f7ff fd72 	bl	8005e28 <_PrintUnsigned>
        break;
 8006344:	e054      	b.n	80063f0 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	1d19      	adds	r1, r3, #4
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6011      	str	r1, [r2, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006354:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006356:	f107 0010 	add.w	r0, r7, #16
 800635a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006364:	2210      	movs	r2, #16
 8006366:	f7ff fd5f 	bl	8005e28 <_PrintUnsigned>
        break;
 800636a:	e041      	b.n	80063f0 <_VPrintTarget+0x37c>
 800636c:	200140ec 	.word	0x200140ec
      case 's':
        s = va_arg(*pParamList, const char*);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	1d19      	adds	r1, r3, #4
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6011      	str	r1, [r2, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 800637e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <_VPrintTarget+0x314>
          s = "(null)";
 8006384:	4b4a      	ldr	r3, [pc, #296]	@ (80064b0 <_VPrintTarget+0x43c>)
 8006386:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8006388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8006390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006392:	3301      	adds	r3, #1
 8006394:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8006396:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800639e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80063a2:	f107 0310 	add.w	r3, r7, #16
 80063a6:	4611      	mov	r1, r2
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff fcc1 	bl	8005d30 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80063b2:	d9e9      	bls.n	8006388 <_VPrintTarget+0x314>
        break;
 80063b4:	e01c      	b.n	80063f0 <_VPrintTarget+0x37c>
            break;
 80063b6:	bf00      	nop
        break;
 80063b8:	e01a      	b.n	80063f0 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	1d19      	adds	r1, r3, #4
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6011      	str	r1, [r2, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80063c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80063ca:	f107 0010 	add.w	r0, r7, #16
 80063ce:	2300      	movs	r3, #0
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	2308      	movs	r3, #8
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	2308      	movs	r3, #8
 80063d8:	2210      	movs	r2, #16
 80063da:	f7ff fd25 	bl	8005e28 <_PrintUnsigned>
        break;
 80063de:	e007      	b.n	80063f0 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80063e0:	f107 0310 	add.w	r3, r7, #16
 80063e4:	2125      	movs	r1, #37	@ 0x25
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff fca2 	bl	8005d30 <_StoreChar>
        break;
 80063ec:	e000      	b.n	80063f0 <_VPrintTarget+0x37c>
      default:
        break;
 80063ee:	bf00      	nop
      }
      sFormat++;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3301      	adds	r3, #1
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	e007      	b.n	8006408 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80063f8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80063fc:	f107 0310 	add.w	r3, r7, #16
 8006400:	4611      	mov	r1, r2
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff fc94 	bl	8005d30 <_StoreChar>
    }
  } while (*sFormat);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	f47f ae4d 	bne.w	80060ac <_VPrintTarget+0x38>
 8006412:	e000      	b.n	8006416 <_VPrintTarget+0x3a2>
      break;
 8006414:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d041      	beq.n	80064a0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800641c:	6a3a      	ldr	r2, [r7, #32]
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800642c:	e00b      	b.n	8006446 <_VPrintTarget+0x3d2>
 800642e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006430:	b2da      	uxtb	r2, r3
 8006432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006434:	1c59      	adds	r1, r3, #1
 8006436:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006438:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006442:	09db      	lsrs	r3, r3, #7
 8006444:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006448:	2b7f      	cmp	r3, #127	@ 0x7f
 800644a:	d8f0      	bhi.n	800642e <_VPrintTarget+0x3ba>
 800644c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006452:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006460:	2300      	movs	r3, #0
 8006462:	633b      	str	r3, [r7, #48]	@ 0x30
 8006464:	e00b      	b.n	800647e <_VPrintTarget+0x40a>
 8006466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006468:	b2da      	uxtb	r2, r3
 800646a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800646c:	1c59      	adds	r1, r3, #1
 800646e:	6379      	str	r1, [r7, #52]	@ 0x34
 8006470:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647a:	09db      	lsrs	r3, r3, #7
 800647c:	633b      	str	r3, [r7, #48]	@ 0x30
 800647e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006480:	2b7f      	cmp	r3, #127	@ 0x7f
 8006482:	d8f0      	bhi.n	8006466 <_VPrintTarget+0x3f2>
 8006484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	637a      	str	r2, [r7, #52]	@ 0x34
 800648a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006492:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	6979      	ldr	r1, [r7, #20]
 8006498:	221a      	movs	r2, #26
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fad8 	bl	8005a50 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80064a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80064a6:	bf00      	nop
 80064a8:	3758      	adds	r7, #88	@ 0x58
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	08007fac 	.word	0x08007fac

080064b4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80064c2:	2300      	movs	r3, #0
 80064c4:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80064c8:	4917      	ldr	r1, [pc, #92]	@ (8006528 <SEGGER_SYSVIEW_Init+0x74>)
 80064ca:	4818      	ldr	r0, [pc, #96]	@ (800652c <SEGGER_SYSVIEW_Init+0x78>)
 80064cc:	f7ff f8c8 	bl	8005660 <SEGGER_RTT_AllocUpBuffer>
 80064d0:	4603      	mov	r3, r0
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	4b16      	ldr	r3, [pc, #88]	@ (8006530 <SEGGER_SYSVIEW_Init+0x7c>)
 80064d6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80064d8:	4b15      	ldr	r3, [pc, #84]	@ (8006530 <SEGGER_SYSVIEW_Init+0x7c>)
 80064da:	785a      	ldrb	r2, [r3, #1]
 80064dc:	4b14      	ldr	r3, [pc, #80]	@ (8006530 <SEGGER_SYSVIEW_Init+0x7c>)
 80064de:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80064e0:	4b13      	ldr	r3, [pc, #76]	@ (8006530 <SEGGER_SYSVIEW_Init+0x7c>)
 80064e2:	7e1b      	ldrb	r3, [r3, #24]
 80064e4:	4618      	mov	r0, r3
 80064e6:	2300      	movs	r3, #0
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	2308      	movs	r3, #8
 80064ec:	4a11      	ldr	r2, [pc, #68]	@ (8006534 <SEGGER_SYSVIEW_Init+0x80>)
 80064ee:	490f      	ldr	r1, [pc, #60]	@ (800652c <SEGGER_SYSVIEW_Init+0x78>)
 80064f0:	f7ff f93a 	bl	8005768 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80064f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006530 <SEGGER_SYSVIEW_Init+0x7c>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80064fa:	4b0f      	ldr	r3, [pc, #60]	@ (8006538 <SEGGER_SYSVIEW_Init+0x84>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006530 <SEGGER_SYSVIEW_Init+0x7c>)
 8006500:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006502:	4a0b      	ldr	r2, [pc, #44]	@ (8006530 <SEGGER_SYSVIEW_Init+0x7c>)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006508:	4a09      	ldr	r2, [pc, #36]	@ (8006530 <SEGGER_SYSVIEW_Init+0x7c>)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800650e:	4a08      	ldr	r2, [pc, #32]	@ (8006530 <SEGGER_SYSVIEW_Init+0x7c>)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006514:	4a06      	ldr	r2, [pc, #24]	@ (8006530 <SEGGER_SYSVIEW_Init+0x7c>)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800651a:	4b05      	ldr	r3, [pc, #20]	@ (8006530 <SEGGER_SYSVIEW_Init+0x7c>)
 800651c:	2200      	movs	r2, #0
 800651e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006520:	bf00      	nop
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	200134b4 	.word	0x200134b4
 800652c:	08007fb4 	.word	0x08007fb4
 8006530:	200140bc 	.word	0x200140bc
 8006534:	200140b4 	.word	0x200140b4
 8006538:	e0001004 	.word	0xe0001004

0800653c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006544:	4a04      	ldr	r2, [pc, #16]	@ (8006558 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6113      	str	r3, [r2, #16]
}
 800654a:	bf00      	nop
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	200140bc 	.word	0x200140bc

0800655c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006564:	f3ef 8311 	mrs	r3, BASEPRI
 8006568:	f04f 0120 	mov.w	r1, #32
 800656c:	f381 8811 	msr	BASEPRI, r1
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	4808      	ldr	r0, [pc, #32]	@ (8006594 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006574:	f7ff f97d 	bl	8005872 <_PreparePacket>
 8006578:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	68b8      	ldr	r0, [r7, #8]
 8006580:	f7ff fa66 	bl	8005a50 <_SendPacket>
  RECORD_END();
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f383 8811 	msr	BASEPRI, r3
}
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	200140ec 	.word	0x200140ec

08006598 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065a2:	f3ef 8311 	mrs	r3, BASEPRI
 80065a6:	f04f 0120 	mov.w	r1, #32
 80065aa:	f381 8811 	msr	BASEPRI, r1
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	4816      	ldr	r0, [pc, #88]	@ (800660c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80065b2:	f7ff f95e 	bl	8005872 <_PreparePacket>
 80065b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	61fb      	str	r3, [r7, #28]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	61bb      	str	r3, [r7, #24]
 80065c4:	e00b      	b.n	80065de <SEGGER_SYSVIEW_RecordU32+0x46>
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	1c59      	adds	r1, r3, #1
 80065ce:	61f9      	str	r1, [r7, #28]
 80065d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	701a      	strb	r2, [r3, #0]
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	09db      	lsrs	r3, r3, #7
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80065e2:	d8f0      	bhi.n	80065c6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	61fa      	str	r2, [r7, #28]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	68f9      	ldr	r1, [r7, #12]
 80065f8:	6938      	ldr	r0, [r7, #16]
 80065fa:	f7ff fa29 	bl	8005a50 <_SendPacket>
  RECORD_END();
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f383 8811 	msr	BASEPRI, r3
}
 8006604:	bf00      	nop
 8006606:	3720      	adds	r7, #32
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	200140ec 	.word	0x200140ec

08006610 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006610:	b580      	push	{r7, lr}
 8006612:	b08c      	sub	sp, #48	@ 0x30
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800661c:	f3ef 8311 	mrs	r3, BASEPRI
 8006620:	f04f 0120 	mov.w	r1, #32
 8006624:	f381 8811 	msr	BASEPRI, r1
 8006628:	61fb      	str	r3, [r7, #28]
 800662a:	4825      	ldr	r0, [pc, #148]	@ (80066c0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800662c:	f7ff f921 	bl	8005872 <_PreparePacket>
 8006630:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800663e:	e00b      	b.n	8006658 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006642:	b2da      	uxtb	r2, r3
 8006644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006646:	1c59      	adds	r1, r3, #1
 8006648:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800664a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	09db      	lsrs	r3, r3, #7
 8006656:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665a:	2b7f      	cmp	r3, #127	@ 0x7f
 800665c:	d8f0      	bhi.n	8006640 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800665e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	627b      	str	r3, [r7, #36]	@ 0x24
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	623b      	str	r3, [r7, #32]
 8006676:	e00b      	b.n	8006690 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	b2da      	uxtb	r2, r3
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	1c59      	adds	r1, r3, #1
 8006680:	6279      	str	r1, [r7, #36]	@ 0x24
 8006682:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	09db      	lsrs	r3, r3, #7
 800668e:	623b      	str	r3, [r7, #32]
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	2b7f      	cmp	r3, #127	@ 0x7f
 8006694:	d8f0      	bhi.n	8006678 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	627a      	str	r2, [r7, #36]	@ 0x24
 800669c:	6a3a      	ldr	r2, [r7, #32]
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	6979      	ldr	r1, [r7, #20]
 80066aa:	69b8      	ldr	r0, [r7, #24]
 80066ac:	f7ff f9d0 	bl	8005a50 <_SendPacket>
  RECORD_END();
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f383 8811 	msr	BASEPRI, r3
}
 80066b6:	bf00      	nop
 80066b8:	3730      	adds	r7, #48	@ 0x30
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	200140ec 	.word	0x200140ec

080066c4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08e      	sub	sp, #56	@ 0x38
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80066d2:	f3ef 8311 	mrs	r3, BASEPRI
 80066d6:	f04f 0120 	mov.w	r1, #32
 80066da:	f381 8811 	msr	BASEPRI, r1
 80066de:	61fb      	str	r3, [r7, #28]
 80066e0:	4832      	ldr	r0, [pc, #200]	@ (80067ac <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80066e2:	f7ff f8c6 	bl	8005872 <_PreparePacket>
 80066e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80066f4:	e00b      	b.n	800670e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80066f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066fc:	1c59      	adds	r1, r3, #1
 80066fe:	6379      	str	r1, [r7, #52]	@ 0x34
 8006700:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	09db      	lsrs	r3, r3, #7
 800670c:	633b      	str	r3, [r7, #48]	@ 0x30
 800670e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006710:	2b7f      	cmp	r3, #127	@ 0x7f
 8006712:	d8f0      	bhi.n	80066f6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	637a      	str	r2, [r7, #52]	@ 0x34
 800671a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
 8006720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006722:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800672c:	e00b      	b.n	8006746 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800672e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006730:	b2da      	uxtb	r2, r3
 8006732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006734:	1c59      	adds	r1, r3, #1
 8006736:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006738:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800673c:	b2d2      	uxtb	r2, r2
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006742:	09db      	lsrs	r3, r3, #7
 8006744:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006748:	2b7f      	cmp	r3, #127	@ 0x7f
 800674a:	d8f0      	bhi.n	800672e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800674c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]
 8006758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	623b      	str	r3, [r7, #32]
 8006764:	e00b      	b.n	800677e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	b2da      	uxtb	r2, r3
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	1c59      	adds	r1, r3, #1
 800676e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006770:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	09db      	lsrs	r3, r3, #7
 800677c:	623b      	str	r3, [r7, #32]
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	2b7f      	cmp	r3, #127	@ 0x7f
 8006782:	d8f0      	bhi.n	8006766 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	627a      	str	r2, [r7, #36]	@ 0x24
 800678a:	6a3a      	ldr	r2, [r7, #32]
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	6979      	ldr	r1, [r7, #20]
 8006798:	69b8      	ldr	r0, [r7, #24]
 800679a:	f7ff f959 	bl	8005a50 <_SendPacket>
  RECORD_END();
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	f383 8811 	msr	BASEPRI, r3
}
 80067a4:	bf00      	nop
 80067a6:	3738      	adds	r7, #56	@ 0x38
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	200140ec 	.word	0x200140ec

080067b0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b090      	sub	sp, #64	@ 0x40
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80067be:	f3ef 8311 	mrs	r3, BASEPRI
 80067c2:	f04f 0120 	mov.w	r1, #32
 80067c6:	f381 8811 	msr	BASEPRI, r1
 80067ca:	61fb      	str	r3, [r7, #28]
 80067cc:	4840      	ldr	r0, [pc, #256]	@ (80068d0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80067ce:	f7ff f850 	bl	8005872 <_PreparePacket>
 80067d2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067e0:	e00b      	b.n	80067fa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80067e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e8:	1c59      	adds	r1, r3, #1
 80067ea:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80067ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	701a      	strb	r2, [r3, #0]
 80067f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f6:	09db      	lsrs	r3, r3, #7
 80067f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80067fe:	d8f0      	bhi.n	80067e2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006806:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	701a      	strb	r2, [r3, #0]
 800680c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800680e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	637b      	str	r3, [r7, #52]	@ 0x34
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	633b      	str	r3, [r7, #48]	@ 0x30
 8006818:	e00b      	b.n	8006832 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	b2da      	uxtb	r2, r3
 800681e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006820:	1c59      	adds	r1, r3, #1
 8006822:	6379      	str	r1, [r7, #52]	@ 0x34
 8006824:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682e:	09db      	lsrs	r3, r3, #7
 8006830:	633b      	str	r3, [r7, #48]	@ 0x30
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	2b7f      	cmp	r3, #127	@ 0x7f
 8006836:	d8f0      	bhi.n	800681a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	637a      	str	r2, [r7, #52]	@ 0x34
 800683e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006846:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006850:	e00b      	b.n	800686a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006854:	b2da      	uxtb	r2, r3
 8006856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006858:	1c59      	adds	r1, r3, #1
 800685a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800685c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	701a      	strb	r2, [r3, #0]
 8006864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006866:	09db      	lsrs	r3, r3, #7
 8006868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800686a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686c:	2b7f      	cmp	r3, #127	@ 0x7f
 800686e:	d8f0      	bhi.n	8006852 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006876:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	701a      	strb	r2, [r3, #0]
 800687c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	627b      	str	r3, [r7, #36]	@ 0x24
 8006884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006886:	623b      	str	r3, [r7, #32]
 8006888:	e00b      	b.n	80068a2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	b2da      	uxtb	r2, r3
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	1c59      	adds	r1, r3, #1
 8006892:	6279      	str	r1, [r7, #36]	@ 0x24
 8006894:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006898:	b2d2      	uxtb	r2, r2
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	09db      	lsrs	r3, r3, #7
 80068a0:	623b      	str	r3, [r7, #32]
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80068a6:	d8f0      	bhi.n	800688a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80068a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80068ae:	6a3a      	ldr	r2, [r7, #32]
 80068b0:	b2d2      	uxtb	r2, r2
 80068b2:	701a      	strb	r2, [r3, #0]
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	6979      	ldr	r1, [r7, #20]
 80068bc:	69b8      	ldr	r0, [r7, #24]
 80068be:	f7ff f8c7 	bl	8005a50 <_SendPacket>
  RECORD_END();
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	f383 8811 	msr	BASEPRI, r3
}
 80068c8:	bf00      	nop
 80068ca:	3740      	adds	r7, #64	@ 0x40
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	200140ec 	.word	0x200140ec

080068d4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08c      	sub	sp, #48	@ 0x30
 80068d8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80068da:	4b59      	ldr	r3, [pc, #356]	@ (8006a40 <SEGGER_SYSVIEW_Start+0x16c>)
 80068dc:	2201      	movs	r2, #1
 80068de:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80068e0:	f3ef 8311 	mrs	r3, BASEPRI
 80068e4:	f04f 0120 	mov.w	r1, #32
 80068e8:	f381 8811 	msr	BASEPRI, r1
 80068ec:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80068ee:	4b54      	ldr	r3, [pc, #336]	@ (8006a40 <SEGGER_SYSVIEW_Start+0x16c>)
 80068f0:	785b      	ldrb	r3, [r3, #1]
 80068f2:	220a      	movs	r2, #10
 80068f4:	4953      	ldr	r1, [pc, #332]	@ (8006a44 <SEGGER_SYSVIEW_Start+0x170>)
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7f9 fc8a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006902:	f7fe fb7f 	bl	8005004 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006906:	200a      	movs	r0, #10
 8006908:	f7ff fe28 	bl	800655c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800690c:	f3ef 8311 	mrs	r3, BASEPRI
 8006910:	f04f 0120 	mov.w	r1, #32
 8006914:	f381 8811 	msr	BASEPRI, r1
 8006918:	60bb      	str	r3, [r7, #8]
 800691a:	484b      	ldr	r0, [pc, #300]	@ (8006a48 <SEGGER_SYSVIEW_Start+0x174>)
 800691c:	f7fe ffa9 	bl	8005872 <_PreparePacket>
 8006920:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800692a:	4b45      	ldr	r3, [pc, #276]	@ (8006a40 <SEGGER_SYSVIEW_Start+0x16c>)
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006930:	e00b      	b.n	800694a <SEGGER_SYSVIEW_Start+0x76>
 8006932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006934:	b2da      	uxtb	r2, r3
 8006936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006938:	1c59      	adds	r1, r3, #1
 800693a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800693c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006946:	09db      	lsrs	r3, r3, #7
 8006948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800694a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694c:	2b7f      	cmp	r3, #127	@ 0x7f
 800694e:	d8f0      	bhi.n	8006932 <SEGGER_SYSVIEW_Start+0x5e>
 8006950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006956:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	627b      	str	r3, [r7, #36]	@ 0x24
 8006964:	4b36      	ldr	r3, [pc, #216]	@ (8006a40 <SEGGER_SYSVIEW_Start+0x16c>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	623b      	str	r3, [r7, #32]
 800696a:	e00b      	b.n	8006984 <SEGGER_SYSVIEW_Start+0xb0>
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	b2da      	uxtb	r2, r3
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006972:	1c59      	adds	r1, r3, #1
 8006974:	6279      	str	r1, [r7, #36]	@ 0x24
 8006976:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	09db      	lsrs	r3, r3, #7
 8006982:	623b      	str	r3, [r7, #32]
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	2b7f      	cmp	r3, #127	@ 0x7f
 8006988:	d8f0      	bhi.n	800696c <SEGGER_SYSVIEW_Start+0x98>
 800698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006990:	6a3a      	ldr	r2, [r7, #32]
 8006992:	b2d2      	uxtb	r2, r2
 8006994:	701a      	strb	r2, [r3, #0]
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	61fb      	str	r3, [r7, #28]
 800699e:	4b28      	ldr	r3, [pc, #160]	@ (8006a40 <SEGGER_SYSVIEW_Start+0x16c>)
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	61bb      	str	r3, [r7, #24]
 80069a4:	e00b      	b.n	80069be <SEGGER_SYSVIEW_Start+0xea>
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	1c59      	adds	r1, r3, #1
 80069ae:	61f9      	str	r1, [r7, #28]
 80069b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	701a      	strb	r2, [r3, #0]
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	09db      	lsrs	r3, r3, #7
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80069c2:	d8f0      	bhi.n	80069a6 <SEGGER_SYSVIEW_Start+0xd2>
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	61fa      	str	r2, [r7, #28]
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	b2d2      	uxtb	r2, r2
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	2300      	movs	r3, #0
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	e00b      	b.n	80069f6 <SEGGER_SYSVIEW_Start+0x122>
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	1c59      	adds	r1, r3, #1
 80069e6:	6179      	str	r1, [r7, #20]
 80069e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	09db      	lsrs	r3, r3, #7
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80069fa:	d8f0      	bhi.n	80069de <SEGGER_SYSVIEW_Start+0x10a>
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	617a      	str	r2, [r7, #20]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006a0c:	2218      	movs	r2, #24
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff f81d 	bl	8005a50 <_SendPacket>
      RECORD_END();
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006a1c:	4b08      	ldr	r3, [pc, #32]	@ (8006a40 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006a24:	4b06      	ldr	r3, [pc, #24]	@ (8006a40 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a28:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006a2a:	f000 f9eb 	bl	8006e04 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006a2e:	f000 f9b1 	bl	8006d94 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006a32:	f000 fc8d 	bl	8007350 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006a36:	bf00      	nop
 8006a38:	3730      	adds	r7, #48	@ 0x30
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	200140bc 	.word	0x200140bc
 8006a44:	08007ff4 	.word	0x08007ff4
 8006a48:	200140ec 	.word	0x200140ec

08006a4c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a52:	f3ef 8311 	mrs	r3, BASEPRI
 8006a56:	f04f 0120 	mov.w	r1, #32
 8006a5a:	f381 8811 	msr	BASEPRI, r1
 8006a5e:	607b      	str	r3, [r7, #4]
 8006a60:	480b      	ldr	r0, [pc, #44]	@ (8006a90 <SEGGER_SYSVIEW_Stop+0x44>)
 8006a62:	f7fe ff06 	bl	8005872 <_PreparePacket>
 8006a66:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006a68:	4b0a      	ldr	r3, [pc, #40]	@ (8006a94 <SEGGER_SYSVIEW_Stop+0x48>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d007      	beq.n	8006a80 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006a70:	220b      	movs	r2, #11
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6838      	ldr	r0, [r7, #0]
 8006a76:	f7fe ffeb 	bl	8005a50 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006a7a:	4b06      	ldr	r3, [pc, #24]	@ (8006a94 <SEGGER_SYSVIEW_Stop+0x48>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f383 8811 	msr	BASEPRI, r3
}
 8006a86:	bf00      	nop
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	200140ec 	.word	0x200140ec
 8006a94:	200140bc 	.word	0x200140bc

08006a98 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08c      	sub	sp, #48	@ 0x30
 8006a9c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006aa2:	f04f 0120 	mov.w	r1, #32
 8006aa6:	f381 8811 	msr	BASEPRI, r1
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	4845      	ldr	r0, [pc, #276]	@ (8006bc4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006aae:	f7fe fee0 	bl	8005872 <_PreparePacket>
 8006ab2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006abc:	4b42      	ldr	r3, [pc, #264]	@ (8006bc8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ac2:	e00b      	b.n	8006adc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aca:	1c59      	adds	r1, r3, #1
 8006acc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006ace:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad8:	09db      	lsrs	r3, r3, #7
 8006ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ade:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ae0:	d8f0      	bhi.n	8006ac4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006aea:	b2d2      	uxtb	r2, r2
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006af6:	4b34      	ldr	r3, [pc, #208]	@ (8006bc8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	623b      	str	r3, [r7, #32]
 8006afc:	e00b      	b.n	8006b16 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b04:	1c59      	adds	r1, r3, #1
 8006b06:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b08:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	09db      	lsrs	r3, r3, #7
 8006b14:	623b      	str	r3, [r7, #32]
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b1a:	d8f0      	bhi.n	8006afe <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b22:	6a3a      	ldr	r2, [r7, #32]
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	701a      	strb	r2, [r3, #0]
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	61fb      	str	r3, [r7, #28]
 8006b30:	4b25      	ldr	r3, [pc, #148]	@ (8006bc8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	e00b      	b.n	8006b50 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	1c59      	adds	r1, r3, #1
 8006b40:	61f9      	str	r1, [r7, #28]
 8006b42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	09db      	lsrs	r3, r3, #7
 8006b4e:	61bb      	str	r3, [r7, #24]
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b54:	d8f0      	bhi.n	8006b38 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	61fa      	str	r2, [r7, #28]
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	613b      	str	r3, [r7, #16]
 8006b6e:	e00b      	b.n	8006b88 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	1c59      	adds	r1, r3, #1
 8006b78:	6179      	str	r1, [r7, #20]
 8006b7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	701a      	strb	r2, [r3, #0]
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	09db      	lsrs	r3, r3, #7
 8006b86:	613b      	str	r3, [r7, #16]
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b8c:	d8f0      	bhi.n	8006b70 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	617a      	str	r2, [r7, #20]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006b9e:	2218      	movs	r2, #24
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	68b8      	ldr	r0, [r7, #8]
 8006ba4:	f7fe ff54 	bl	8005a50 <_SendPacket>
  RECORD_END();
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006bae:	4b06      	ldr	r3, [pc, #24]	@ (8006bc8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006bb6:	4b04      	ldr	r3, [pc, #16]	@ (8006bc8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bba:	4798      	blx	r3
  }
}
 8006bbc:	bf00      	nop
 8006bbe:	3730      	adds	r7, #48	@ 0x30
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	200140ec 	.word	0x200140ec
 8006bc8:	200140bc 	.word	0x200140bc

08006bcc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b092      	sub	sp, #72	@ 0x48
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006bd4:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd8:	f04f 0120 	mov.w	r1, #32
 8006bdc:	f381 8811 	msr	BASEPRI, r1
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	486a      	ldr	r0, [pc, #424]	@ (8006d8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006be4:	f7fe fe45 	bl	8005872 <_PreparePacket>
 8006be8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	4b66      	ldr	r3, [pc, #408]	@ (8006d90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bfe:	e00b      	b.n	8006c18 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c06:	1c59      	adds	r1, r3, #1
 8006c08:	6479      	str	r1, [r7, #68]	@ 0x44
 8006c0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c14:	09db      	lsrs	r3, r3, #7
 8006c16:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c1c:	d8f0      	bhi.n	8006c00 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c38:	e00b      	b.n	8006c52 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c40:	1c59      	adds	r1, r3, #1
 8006c42:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006c44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	701a      	strb	r2, [r3, #0]
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4e:	09db      	lsrs	r3, r3, #7
 8006c50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c54:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c56:	d8f0      	bhi.n	8006c3a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c60:	b2d2      	uxtb	r2, r2
 8006c62:	701a      	strb	r2, [r3, #0]
 8006c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c66:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	4619      	mov	r1, r3
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f7fe fdc5 	bl	8005800 <_EncodeStr>
 8006c76:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006c78:	2209      	movs	r2, #9
 8006c7a:	68f9      	ldr	r1, [r7, #12]
 8006c7c:	6938      	ldr	r0, [r7, #16]
 8006c7e:	f7fe fee7 	bl	8005a50 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b40      	ldr	r3, [pc, #256]	@ (8006d90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c96:	e00b      	b.n	8006cb0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c9e:	1c59      	adds	r1, r3, #1
 8006ca0:	6379      	str	r1, [r7, #52]	@ 0x34
 8006ca2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cac:	09db      	lsrs	r3, r3, #7
 8006cae:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cb4:	d8f0      	bhi.n	8006c98 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	637a      	str	r2, [r7, #52]	@ 0x34
 8006cbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cd0:	e00b      	b.n	8006cea <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd8:	1c59      	adds	r1, r3, #1
 8006cda:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006cdc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce6:	09db      	lsrs	r3, r3, #7
 8006ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cec:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cee:	d8f0      	bhi.n	8006cd2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cfe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	623b      	str	r3, [r7, #32]
 8006d0a:	e00b      	b.n	8006d24 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d12:	1c59      	adds	r1, r3, #1
 8006d14:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d1a:	b2d2      	uxtb	r2, r2
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	09db      	lsrs	r3, r3, #7
 8006d22:	623b      	str	r3, [r7, #32]
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d28:	d8f0      	bhi.n	8006d0c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d30:	6a3a      	ldr	r2, [r7, #32]
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	61bb      	str	r3, [r7, #24]
 8006d44:	e00b      	b.n	8006d5e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	1c59      	adds	r1, r3, #1
 8006d4e:	61f9      	str	r1, [r7, #28]
 8006d50:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	09db      	lsrs	r3, r3, #7
 8006d5c:	61bb      	str	r3, [r7, #24]
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d62:	d8f0      	bhi.n	8006d46 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	61fa      	str	r2, [r7, #28]
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	b2d2      	uxtb	r2, r2
 8006d6e:	701a      	strb	r2, [r3, #0]
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006d74:	2215      	movs	r2, #21
 8006d76:	68f9      	ldr	r1, [r7, #12]
 8006d78:	6938      	ldr	r0, [r7, #16]
 8006d7a:	f7fe fe69 	bl	8005a50 <_SendPacket>
  RECORD_END();
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f383 8811 	msr	BASEPRI, r3
}
 8006d84:	bf00      	nop
 8006d86:	3748      	adds	r7, #72	@ 0x48
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	200140ec 	.word	0x200140ec
 8006d90:	200140bc 	.word	0x200140bc

08006d94 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006d98:	4b07      	ldr	r3, [pc, #28]	@ (8006db8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d008      	beq.n	8006db2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006da0:	4b05      	ldr	r3, [pc, #20]	@ (8006db8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006daa:	4b03      	ldr	r3, [pc, #12]	@ (8006db8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	4798      	blx	r3
  }
}
 8006db2:	bf00      	nop
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	200140bc 	.word	0x200140bc

08006dbc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dc4:	f3ef 8311 	mrs	r3, BASEPRI
 8006dc8:	f04f 0120 	mov.w	r1, #32
 8006dcc:	f381 8811 	msr	BASEPRI, r1
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	480b      	ldr	r0, [pc, #44]	@ (8006e00 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006dd4:	f7fe fd4d 	bl	8005872 <_PreparePacket>
 8006dd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dda:	2280      	movs	r2, #128	@ 0x80
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	6938      	ldr	r0, [r7, #16]
 8006de0:	f7fe fd0e 	bl	8005800 <_EncodeStr>
 8006de4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006de6:	220e      	movs	r2, #14
 8006de8:	68f9      	ldr	r1, [r7, #12]
 8006dea:	6938      	ldr	r0, [r7, #16]
 8006dec:	f7fe fe30 	bl	8005a50 <_SendPacket>
  RECORD_END();
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f383 8811 	msr	BASEPRI, r3
}
 8006df6:	bf00      	nop
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	200140ec 	.word	0x200140ec

08006e04 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006e04:	b590      	push	{r4, r7, lr}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006e0a:	4b15      	ldr	r3, [pc, #84]	@ (8006e60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d01a      	beq.n	8006e48 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006e12:	4b13      	ldr	r3, [pc, #76]	@ (8006e60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d015      	beq.n	8006e48 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006e1c:	4b10      	ldr	r3, [pc, #64]	@ (8006e60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4798      	blx	r3
 8006e24:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e28:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006e2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e2e:	f04f 0200 	mov.w	r2, #0
 8006e32:	f04f 0300 	mov.w	r3, #0
 8006e36:	000a      	movs	r2, r1
 8006e38:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	4621      	mov	r1, r4
 8006e40:	200d      	movs	r0, #13
 8006e42:	f7ff fbe5 	bl	8006610 <SEGGER_SYSVIEW_RecordU32x2>
 8006e46:	e006      	b.n	8006e56 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006e48:	4b06      	ldr	r3, [pc, #24]	@ (8006e64 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	200c      	movs	r0, #12
 8006e50:	f7ff fba2 	bl	8006598 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd90      	pop	{r4, r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	200140bc 	.word	0x200140bc
 8006e64:	e0001004 	.word	0xe0001004

08006e68 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006e72:	f04f 0120 	mov.w	r1, #32
 8006e76:	f381 8811 	msr	BASEPRI, r1
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	4819      	ldr	r0, [pc, #100]	@ (8006ee4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006e7e:	f7fe fcf8 	bl	8005872 <_PreparePacket>
 8006e82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006e88:	4b17      	ldr	r3, [pc, #92]	@ (8006ee8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e90:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	e00b      	b.n	8006eb4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	1c59      	adds	r1, r3, #1
 8006ea4:	6179      	str	r1, [r7, #20]
 8006ea6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	09db      	lsrs	r3, r3, #7
 8006eb2:	613b      	str	r3, [r7, #16]
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006eb8:	d8f0      	bhi.n	8006e9c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	617a      	str	r2, [r7, #20]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	701a      	strb	r2, [r3, #0]
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006eca:	2202      	movs	r2, #2
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	68b8      	ldr	r0, [r7, #8]
 8006ed0:	f7fe fdbe 	bl	8005a50 <_SendPacket>
  RECORD_END();
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f383 8811 	msr	BASEPRI, r3
}
 8006eda:	bf00      	nop
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	200140ec 	.word	0x200140ec
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ef2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ef6:	f04f 0120 	mov.w	r1, #32
 8006efa:	f381 8811 	msr	BASEPRI, r1
 8006efe:	607b      	str	r3, [r7, #4]
 8006f00:	4807      	ldr	r0, [pc, #28]	@ (8006f20 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006f02:	f7fe fcb6 	bl	8005872 <_PreparePacket>
 8006f06:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006f08:	2203      	movs	r2, #3
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6838      	ldr	r0, [r7, #0]
 8006f0e:	f7fe fd9f 	bl	8005a50 <_SendPacket>
  RECORD_END();
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f383 8811 	msr	BASEPRI, r3
}
 8006f18:	bf00      	nop
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	200140ec 	.word	0x200140ec

08006f24 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f2e:	f04f 0120 	mov.w	r1, #32
 8006f32:	f381 8811 	msr	BASEPRI, r1
 8006f36:	607b      	str	r3, [r7, #4]
 8006f38:	4807      	ldr	r0, [pc, #28]	@ (8006f58 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006f3a:	f7fe fc9a 	bl	8005872 <_PreparePacket>
 8006f3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006f40:	2212      	movs	r2, #18
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	6838      	ldr	r0, [r7, #0]
 8006f46:	f7fe fd83 	bl	8005a50 <_SendPacket>
  RECORD_END();
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f383 8811 	msr	BASEPRI, r3
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	200140ec 	.word	0x200140ec

08006f5c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f62:	f3ef 8311 	mrs	r3, BASEPRI
 8006f66:	f04f 0120 	mov.w	r1, #32
 8006f6a:	f381 8811 	msr	BASEPRI, r1
 8006f6e:	607b      	str	r3, [r7, #4]
 8006f70:	4807      	ldr	r0, [pc, #28]	@ (8006f90 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006f72:	f7fe fc7e 	bl	8005872 <_PreparePacket>
 8006f76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006f78:	2211      	movs	r2, #17
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6838      	ldr	r0, [r7, #0]
 8006f7e:	f7fe fd67 	bl	8005a50 <_SendPacket>
  RECORD_END();
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f383 8811 	msr	BASEPRI, r3
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	200140ec 	.word	0x200140ec

08006f94 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa0:	f04f 0120 	mov.w	r1, #32
 8006fa4:	f381 8811 	msr	BASEPRI, r1
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	4819      	ldr	r0, [pc, #100]	@ (8007010 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006fac:	f7fe fc61 	bl	8005872 <_PreparePacket>
 8006fb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006fb6:	4b17      	ldr	r3, [pc, #92]	@ (8007014 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	61fb      	str	r3, [r7, #28]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	61bb      	str	r3, [r7, #24]
 8006fc8:	e00b      	b.n	8006fe2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	1c59      	adds	r1, r3, #1
 8006fd2:	61f9      	str	r1, [r7, #28]
 8006fd4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fd8:	b2d2      	uxtb	r2, r2
 8006fda:	701a      	strb	r2, [r3, #0]
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	09db      	lsrs	r3, r3, #7
 8006fe0:	61bb      	str	r3, [r7, #24]
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fe6:	d8f0      	bhi.n	8006fca <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	61fa      	str	r2, [r7, #28]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	b2d2      	uxtb	r2, r2
 8006ff2:	701a      	strb	r2, [r3, #0]
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	68f9      	ldr	r1, [r7, #12]
 8006ffc:	6938      	ldr	r0, [r7, #16]
 8006ffe:	f7fe fd27 	bl	8005a50 <_SendPacket>
  RECORD_END();
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f383 8811 	msr	BASEPRI, r3
}
 8007008:	bf00      	nop
 800700a:	3720      	adds	r7, #32
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	200140ec 	.word	0x200140ec
 8007014:	200140bc 	.word	0x200140bc

08007018 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007020:	f3ef 8311 	mrs	r3, BASEPRI
 8007024:	f04f 0120 	mov.w	r1, #32
 8007028:	f381 8811 	msr	BASEPRI, r1
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	4819      	ldr	r0, [pc, #100]	@ (8007094 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007030:	f7fe fc1f 	bl	8005872 <_PreparePacket>
 8007034:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800703a:	4b17      	ldr	r3, [pc, #92]	@ (8007098 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	61fb      	str	r3, [r7, #28]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	61bb      	str	r3, [r7, #24]
 800704c:	e00b      	b.n	8007066 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	b2da      	uxtb	r2, r3
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	1c59      	adds	r1, r3, #1
 8007056:	61f9      	str	r1, [r7, #28]
 8007058:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800705c:	b2d2      	uxtb	r2, r2
 800705e:	701a      	strb	r2, [r3, #0]
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	09db      	lsrs	r3, r3, #7
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b7f      	cmp	r3, #127	@ 0x7f
 800706a:	d8f0      	bhi.n	800704e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	61fa      	str	r2, [r7, #28]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	b2d2      	uxtb	r2, r2
 8007076:	701a      	strb	r2, [r3, #0]
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800707c:	2204      	movs	r2, #4
 800707e:	68f9      	ldr	r1, [r7, #12]
 8007080:	6938      	ldr	r0, [r7, #16]
 8007082:	f7fe fce5 	bl	8005a50 <_SendPacket>
  RECORD_END();
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f383 8811 	msr	BASEPRI, r3
}
 800708c:	bf00      	nop
 800708e:	3720      	adds	r7, #32
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	200140ec 	.word	0x200140ec
 8007098:	200140bc 	.word	0x200140bc

0800709c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070a4:	f3ef 8311 	mrs	r3, BASEPRI
 80070a8:	f04f 0120 	mov.w	r1, #32
 80070ac:	f381 8811 	msr	BASEPRI, r1
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	4819      	ldr	r0, [pc, #100]	@ (8007118 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80070b4:	f7fe fbdd 	bl	8005872 <_PreparePacket>
 80070b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80070be:	4b17      	ldr	r3, [pc, #92]	@ (800711c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	61fb      	str	r3, [r7, #28]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	e00b      	b.n	80070ea <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	1c59      	adds	r1, r3, #1
 80070da:	61f9      	str	r1, [r7, #28]
 80070dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	09db      	lsrs	r3, r3, #7
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80070ee:	d8f0      	bhi.n	80070d2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	61fa      	str	r2, [r7, #28]
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	701a      	strb	r2, [r3, #0]
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007100:	2206      	movs	r2, #6
 8007102:	68f9      	ldr	r1, [r7, #12]
 8007104:	6938      	ldr	r0, [r7, #16]
 8007106:	f7fe fca3 	bl	8005a50 <_SendPacket>
  RECORD_END();
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	f383 8811 	msr	BASEPRI, r3
}
 8007110:	bf00      	nop
 8007112:	3720      	adds	r7, #32
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	200140ec 	.word	0x200140ec
 800711c:	200140bc 	.word	0x200140bc

08007120 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007120:	b580      	push	{r7, lr}
 8007122:	b08a      	sub	sp, #40	@ 0x28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800712a:	f3ef 8311 	mrs	r3, BASEPRI
 800712e:	f04f 0120 	mov.w	r1, #32
 8007132:	f381 8811 	msr	BASEPRI, r1
 8007136:	617b      	str	r3, [r7, #20]
 8007138:	4827      	ldr	r0, [pc, #156]	@ (80071d8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800713a:	f7fe fb9a 	bl	8005872 <_PreparePacket>
 800713e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007144:	4b25      	ldr	r3, [pc, #148]	@ (80071dc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	627b      	str	r3, [r7, #36]	@ 0x24
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	623b      	str	r3, [r7, #32]
 8007156:	e00b      	b.n	8007170 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	b2da      	uxtb	r2, r3
 800715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715e:	1c59      	adds	r1, r3, #1
 8007160:	6279      	str	r1, [r7, #36]	@ 0x24
 8007162:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	09db      	lsrs	r3, r3, #7
 800716e:	623b      	str	r3, [r7, #32]
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	2b7f      	cmp	r3, #127	@ 0x7f
 8007174:	d8f0      	bhi.n	8007158 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	627a      	str	r2, [r7, #36]	@ 0x24
 800717c:	6a3a      	ldr	r2, [r7, #32]
 800717e:	b2d2      	uxtb	r2, r2
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	61fb      	str	r3, [r7, #28]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	61bb      	str	r3, [r7, #24]
 800718e:	e00b      	b.n	80071a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	b2da      	uxtb	r2, r3
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	1c59      	adds	r1, r3, #1
 8007198:	61f9      	str	r1, [r7, #28]
 800719a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	09db      	lsrs	r3, r3, #7
 80071a6:	61bb      	str	r3, [r7, #24]
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ac:	d8f0      	bhi.n	8007190 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	61fa      	str	r2, [r7, #28]
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	701a      	strb	r2, [r3, #0]
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80071be:	2207      	movs	r2, #7
 80071c0:	68f9      	ldr	r1, [r7, #12]
 80071c2:	6938      	ldr	r0, [r7, #16]
 80071c4:	f7fe fc44 	bl	8005a50 <_SendPacket>
  RECORD_END();
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f383 8811 	msr	BASEPRI, r3
}
 80071ce:	bf00      	nop
 80071d0:	3728      	adds	r7, #40	@ 0x28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	200140ec 	.word	0x200140ec
 80071dc:	200140bc 	.word	0x200140bc

080071e0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80071e8:	4b04      	ldr	r3, [pc, #16]	@ (80071fc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	1ad3      	subs	r3, r2, r3
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	200140bc 	.word	0x200140bc

08007200 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007200:	b580      	push	{r7, lr}
 8007202:	b08c      	sub	sp, #48	@ 0x30
 8007204:	af00      	add	r7, sp, #0
 8007206:	4603      	mov	r3, r0
 8007208:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800720a:	4b40      	ldr	r3, [pc, #256]	@ (800730c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d077      	beq.n	8007302 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007212:	4b3e      	ldr	r3, [pc, #248]	@ (800730c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007218:	2300      	movs	r3, #0
 800721a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800721c:	e008      	b.n	8007230 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800721e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d007      	beq.n	800723a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800722a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722c:	3301      	adds	r3, #1
 800722e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007230:	79fb      	ldrb	r3, [r7, #7]
 8007232:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007234:	429a      	cmp	r2, r3
 8007236:	d3f2      	bcc.n	800721e <SEGGER_SYSVIEW_SendModule+0x1e>
 8007238:	e000      	b.n	800723c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800723a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800723c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d055      	beq.n	80072ee <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007242:	f3ef 8311 	mrs	r3, BASEPRI
 8007246:	f04f 0120 	mov.w	r1, #32
 800724a:	f381 8811 	msr	BASEPRI, r1
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	482f      	ldr	r0, [pc, #188]	@ (8007310 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007252:	f7fe fb0e 	bl	8005872 <_PreparePacket>
 8007256:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007260:	79fb      	ldrb	r3, [r7, #7]
 8007262:	623b      	str	r3, [r7, #32]
 8007264:	e00b      	b.n	800727e <SEGGER_SYSVIEW_SendModule+0x7e>
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	b2da      	uxtb	r2, r3
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	1c59      	adds	r1, r3, #1
 800726e:	6279      	str	r1, [r7, #36]	@ 0x24
 8007270:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007274:	b2d2      	uxtb	r2, r2
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	09db      	lsrs	r3, r3, #7
 800727c:	623b      	str	r3, [r7, #32]
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	2b7f      	cmp	r3, #127	@ 0x7f
 8007282:	d8f0      	bhi.n	8007266 <SEGGER_SYSVIEW_SendModule+0x66>
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	627a      	str	r2, [r7, #36]	@ 0x24
 800728a:	6a3a      	ldr	r2, [r7, #32]
 800728c:	b2d2      	uxtb	r2, r2
 800728e:	701a      	strb	r2, [r3, #0]
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007292:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	61bb      	str	r3, [r7, #24]
 800729e:	e00b      	b.n	80072b8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	1c59      	adds	r1, r3, #1
 80072a8:	61f9      	str	r1, [r7, #28]
 80072aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	09db      	lsrs	r3, r3, #7
 80072b6:	61bb      	str	r3, [r7, #24]
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80072bc:	d8f0      	bhi.n	80072a0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	61fa      	str	r2, [r7, #28]
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	b2d2      	uxtb	r2, r2
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2280      	movs	r2, #128	@ 0x80
 80072d4:	4619      	mov	r1, r3
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f7fe fa92 	bl	8005800 <_EncodeStr>
 80072dc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80072de:	2216      	movs	r2, #22
 80072e0:	68f9      	ldr	r1, [r7, #12]
 80072e2:	6938      	ldr	r0, [r7, #16]
 80072e4:	f7fe fbb4 	bl	8005a50 <_SendPacket>
      RECORD_END();
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80072ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d006      	beq.n	8007302 <SEGGER_SYSVIEW_SendModule+0x102>
 80072f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80072fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	4798      	blx	r3
    }
  }
}
 8007302:	bf00      	nop
 8007304:	3730      	adds	r7, #48	@ 0x30
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	200140e4 	.word	0x200140e4
 8007310:	200140ec 	.word	0x200140ec

08007314 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800731a:	4b0c      	ldr	r3, [pc, #48]	@ (800734c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00f      	beq.n	8007342 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007322:	4b0a      	ldr	r3, [pc, #40]	@ (800734c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1f2      	bne.n	8007328 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007342:	bf00      	nop
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	200140e4 	.word	0x200140e4

08007350 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007356:	f3ef 8311 	mrs	r3, BASEPRI
 800735a:	f04f 0120 	mov.w	r1, #32
 800735e:	f381 8811 	msr	BASEPRI, r1
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	4817      	ldr	r0, [pc, #92]	@ (80073c4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007366:	f7fe fa84 	bl	8005872 <_PreparePacket>
 800736a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	617b      	str	r3, [r7, #20]
 8007374:	4b14      	ldr	r3, [pc, #80]	@ (80073c8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	613b      	str	r3, [r7, #16]
 800737a:	e00b      	b.n	8007394 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	b2da      	uxtb	r2, r3
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	1c59      	adds	r1, r3, #1
 8007384:	6179      	str	r1, [r7, #20]
 8007386:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	09db      	lsrs	r3, r3, #7
 8007392:	613b      	str	r3, [r7, #16]
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	2b7f      	cmp	r3, #127	@ 0x7f
 8007398:	d8f0      	bhi.n	800737c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	617a      	str	r2, [r7, #20]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	701a      	strb	r2, [r3, #0]
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80073aa:	221b      	movs	r2, #27
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	68b8      	ldr	r0, [r7, #8]
 80073b0:	f7fe fb4e 	bl	8005a50 <_SendPacket>
  RECORD_END();
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f383 8811 	msr	BASEPRI, r3
}
 80073ba:	bf00      	nop
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	200140ec 	.word	0x200140ec
 80073c8:	200140e8 	.word	0x200140e8

080073cc <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80073cc:	b40f      	push	{r0, r1, r2, r3}
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b082      	sub	sp, #8
 80073d2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80073d4:	f107 0314 	add.w	r3, r7, #20
 80073d8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80073da:	1d3b      	adds	r3, r7, #4
 80073dc:	461a      	mov	r2, r3
 80073de:	2100      	movs	r1, #0
 80073e0:	6938      	ldr	r0, [r7, #16]
 80073e2:	f7fe fe47 	bl	8006074 <_VPrintTarget>
  va_end(ParamList);
}
 80073e6:	bf00      	nop
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073f0:	b004      	add	sp, #16
 80073f2:	4770      	bx	lr

080073f4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	@ 0x28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007400:	f04f 0120 	mov.w	r1, #32
 8007404:	f381 8811 	msr	BASEPRI, r1
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	4827      	ldr	r0, [pc, #156]	@ (80074a8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800740c:	f7fe fa31 	bl	8005872 <_PreparePacket>
 8007410:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007412:	2280      	movs	r2, #128	@ 0x80
 8007414:	6879      	ldr	r1, [r7, #4]
 8007416:	6938      	ldr	r0, [r7, #16]
 8007418:	f7fe f9f2 	bl	8005800 <_EncodeStr>
 800741c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	627b      	str	r3, [r7, #36]	@ 0x24
 8007422:	2301      	movs	r3, #1
 8007424:	623b      	str	r3, [r7, #32]
 8007426:	e00b      	b.n	8007440 <SEGGER_SYSVIEW_Warn+0x4c>
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	b2da      	uxtb	r2, r3
 800742c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742e:	1c59      	adds	r1, r3, #1
 8007430:	6279      	str	r1, [r7, #36]	@ 0x24
 8007432:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	701a      	strb	r2, [r3, #0]
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	09db      	lsrs	r3, r3, #7
 800743e:	623b      	str	r3, [r7, #32]
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	2b7f      	cmp	r3, #127	@ 0x7f
 8007444:	d8f0      	bhi.n	8007428 <SEGGER_SYSVIEW_Warn+0x34>
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	627a      	str	r2, [r7, #36]	@ 0x24
 800744c:	6a3a      	ldr	r2, [r7, #32]
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	701a      	strb	r2, [r3, #0]
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	61fb      	str	r3, [r7, #28]
 800745a:	2300      	movs	r3, #0
 800745c:	61bb      	str	r3, [r7, #24]
 800745e:	e00b      	b.n	8007478 <SEGGER_SYSVIEW_Warn+0x84>
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	b2da      	uxtb	r2, r3
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	1c59      	adds	r1, r3, #1
 8007468:	61f9      	str	r1, [r7, #28]
 800746a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	701a      	strb	r2, [r3, #0]
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	09db      	lsrs	r3, r3, #7
 8007476:	61bb      	str	r3, [r7, #24]
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b7f      	cmp	r3, #127	@ 0x7f
 800747c:	d8f0      	bhi.n	8007460 <SEGGER_SYSVIEW_Warn+0x6c>
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	61fa      	str	r2, [r7, #28]
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800748e:	221a      	movs	r2, #26
 8007490:	68f9      	ldr	r1, [r7, #12]
 8007492:	6938      	ldr	r0, [r7, #16]
 8007494:	f7fe fadc 	bl	8005a50 <_SendPacket>
  RECORD_END();
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f383 8811 	msr	BASEPRI, r3
}
 800749e:	bf00      	nop
 80074a0:	3728      	adds	r7, #40	@ 0x28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	200140ec 	.word	0x200140ec

080074ac <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80074b0:	4b13      	ldr	r3, [pc, #76]	@ (8007500 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80074b2:	7e1b      	ldrb	r3, [r3, #24]
 80074b4:	4619      	mov	r1, r3
 80074b6:	4a13      	ldr	r2, [pc, #76]	@ (8007504 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80074b8:	460b      	mov	r3, r1
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	440b      	add	r3, r1
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	4413      	add	r3, r2
 80074c2:	336c      	adds	r3, #108	@ 0x6c
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007500 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80074c8:	7e1b      	ldrb	r3, [r3, #24]
 80074ca:	4618      	mov	r0, r3
 80074cc:	490d      	ldr	r1, [pc, #52]	@ (8007504 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80074ce:	4603      	mov	r3, r0
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	4403      	add	r3, r0
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	440b      	add	r3, r1
 80074d8:	3370      	adds	r3, #112	@ 0x70
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d00b      	beq.n	80074f8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80074e0:	4b07      	ldr	r3, [pc, #28]	@ (8007500 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80074e2:	789b      	ldrb	r3, [r3, #2]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d107      	bne.n	80074f8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80074e8:	4b05      	ldr	r3, [pc, #20]	@ (8007500 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80074ee:	f7fe f9cd 	bl	800588c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80074f2:	4b03      	ldr	r3, [pc, #12]	@ (8007500 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80074f8:	4b01      	ldr	r3, [pc, #4]	@ (8007500 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	200140bc 	.word	0x200140bc
 8007504:	20012ffc 	.word	0x20012ffc

08007508 <sniprintf>:
 8007508:	b40c      	push	{r2, r3}
 800750a:	b530      	push	{r4, r5, lr}
 800750c:	4b17      	ldr	r3, [pc, #92]	@ (800756c <sniprintf+0x64>)
 800750e:	1e0c      	subs	r4, r1, #0
 8007510:	681d      	ldr	r5, [r3, #0]
 8007512:	b09d      	sub	sp, #116	@ 0x74
 8007514:	da08      	bge.n	8007528 <sniprintf+0x20>
 8007516:	238b      	movs	r3, #139	@ 0x8b
 8007518:	602b      	str	r3, [r5, #0]
 800751a:	f04f 30ff 	mov.w	r0, #4294967295
 800751e:	b01d      	add	sp, #116	@ 0x74
 8007520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007524:	b002      	add	sp, #8
 8007526:	4770      	bx	lr
 8007528:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800752c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007530:	bf14      	ite	ne
 8007532:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007536:	4623      	moveq	r3, r4
 8007538:	9304      	str	r3, [sp, #16]
 800753a:	9307      	str	r3, [sp, #28]
 800753c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007540:	9002      	str	r0, [sp, #8]
 8007542:	9006      	str	r0, [sp, #24]
 8007544:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007548:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800754a:	ab21      	add	r3, sp, #132	@ 0x84
 800754c:	a902      	add	r1, sp, #8
 800754e:	4628      	mov	r0, r5
 8007550:	9301      	str	r3, [sp, #4]
 8007552:	f000 f9ad 	bl	80078b0 <_svfiprintf_r>
 8007556:	1c43      	adds	r3, r0, #1
 8007558:	bfbc      	itt	lt
 800755a:	238b      	movlt	r3, #139	@ 0x8b
 800755c:	602b      	strlt	r3, [r5, #0]
 800755e:	2c00      	cmp	r4, #0
 8007560:	d0dd      	beq.n	800751e <sniprintf+0x16>
 8007562:	9b02      	ldr	r3, [sp, #8]
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	e7d9      	b.n	800751e <sniprintf+0x16>
 800756a:	bf00      	nop
 800756c:	2000001c 	.word	0x2000001c

08007570 <memcmp>:
 8007570:	b510      	push	{r4, lr}
 8007572:	3901      	subs	r1, #1
 8007574:	4402      	add	r2, r0
 8007576:	4290      	cmp	r0, r2
 8007578:	d101      	bne.n	800757e <memcmp+0xe>
 800757a:	2000      	movs	r0, #0
 800757c:	e005      	b.n	800758a <memcmp+0x1a>
 800757e:	7803      	ldrb	r3, [r0, #0]
 8007580:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007584:	42a3      	cmp	r3, r4
 8007586:	d001      	beq.n	800758c <memcmp+0x1c>
 8007588:	1b18      	subs	r0, r3, r4
 800758a:	bd10      	pop	{r4, pc}
 800758c:	3001      	adds	r0, #1
 800758e:	e7f2      	b.n	8007576 <memcmp+0x6>

08007590 <memset>:
 8007590:	4402      	add	r2, r0
 8007592:	4603      	mov	r3, r0
 8007594:	4293      	cmp	r3, r2
 8007596:	d100      	bne.n	800759a <memset+0xa>
 8007598:	4770      	bx	lr
 800759a:	f803 1b01 	strb.w	r1, [r3], #1
 800759e:	e7f9      	b.n	8007594 <memset+0x4>

080075a0 <__libc_init_array>:
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	4d0d      	ldr	r5, [pc, #52]	@ (80075d8 <__libc_init_array+0x38>)
 80075a4:	4c0d      	ldr	r4, [pc, #52]	@ (80075dc <__libc_init_array+0x3c>)
 80075a6:	1b64      	subs	r4, r4, r5
 80075a8:	10a4      	asrs	r4, r4, #2
 80075aa:	2600      	movs	r6, #0
 80075ac:	42a6      	cmp	r6, r4
 80075ae:	d109      	bne.n	80075c4 <__libc_init_array+0x24>
 80075b0:	4d0b      	ldr	r5, [pc, #44]	@ (80075e0 <__libc_init_array+0x40>)
 80075b2:	4c0c      	ldr	r4, [pc, #48]	@ (80075e4 <__libc_init_array+0x44>)
 80075b4:	f000 fc74 	bl	8007ea0 <_init>
 80075b8:	1b64      	subs	r4, r4, r5
 80075ba:	10a4      	asrs	r4, r4, #2
 80075bc:	2600      	movs	r6, #0
 80075be:	42a6      	cmp	r6, r4
 80075c0:	d105      	bne.n	80075ce <__libc_init_array+0x2e>
 80075c2:	bd70      	pop	{r4, r5, r6, pc}
 80075c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075c8:	4798      	blx	r3
 80075ca:	3601      	adds	r6, #1
 80075cc:	e7ee      	b.n	80075ac <__libc_init_array+0xc>
 80075ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d2:	4798      	blx	r3
 80075d4:	3601      	adds	r6, #1
 80075d6:	e7f2      	b.n	80075be <__libc_init_array+0x1e>
 80075d8:	0800804c 	.word	0x0800804c
 80075dc:	0800804c 	.word	0x0800804c
 80075e0:	0800804c 	.word	0x0800804c
 80075e4:	08008050 	.word	0x08008050

080075e8 <__retarget_lock_acquire_recursive>:
 80075e8:	4770      	bx	lr

080075ea <__retarget_lock_release_recursive>:
 80075ea:	4770      	bx	lr

080075ec <memcpy>:
 80075ec:	440a      	add	r2, r1
 80075ee:	4291      	cmp	r1, r2
 80075f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80075f4:	d100      	bne.n	80075f8 <memcpy+0xc>
 80075f6:	4770      	bx	lr
 80075f8:	b510      	push	{r4, lr}
 80075fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007602:	4291      	cmp	r1, r2
 8007604:	d1f9      	bne.n	80075fa <memcpy+0xe>
 8007606:	bd10      	pop	{r4, pc}

08007608 <_free_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	4605      	mov	r5, r0
 800760c:	2900      	cmp	r1, #0
 800760e:	d041      	beq.n	8007694 <_free_r+0x8c>
 8007610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007614:	1f0c      	subs	r4, r1, #4
 8007616:	2b00      	cmp	r3, #0
 8007618:	bfb8      	it	lt
 800761a:	18e4      	addlt	r4, r4, r3
 800761c:	f000 f8e0 	bl	80077e0 <__malloc_lock>
 8007620:	4a1d      	ldr	r2, [pc, #116]	@ (8007698 <_free_r+0x90>)
 8007622:	6813      	ldr	r3, [r2, #0]
 8007624:	b933      	cbnz	r3, 8007634 <_free_r+0x2c>
 8007626:	6063      	str	r3, [r4, #4]
 8007628:	6014      	str	r4, [r2, #0]
 800762a:	4628      	mov	r0, r5
 800762c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007630:	f000 b8dc 	b.w	80077ec <__malloc_unlock>
 8007634:	42a3      	cmp	r3, r4
 8007636:	d908      	bls.n	800764a <_free_r+0x42>
 8007638:	6820      	ldr	r0, [r4, #0]
 800763a:	1821      	adds	r1, r4, r0
 800763c:	428b      	cmp	r3, r1
 800763e:	bf01      	itttt	eq
 8007640:	6819      	ldreq	r1, [r3, #0]
 8007642:	685b      	ldreq	r3, [r3, #4]
 8007644:	1809      	addeq	r1, r1, r0
 8007646:	6021      	streq	r1, [r4, #0]
 8007648:	e7ed      	b.n	8007626 <_free_r+0x1e>
 800764a:	461a      	mov	r2, r3
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	b10b      	cbz	r3, 8007654 <_free_r+0x4c>
 8007650:	42a3      	cmp	r3, r4
 8007652:	d9fa      	bls.n	800764a <_free_r+0x42>
 8007654:	6811      	ldr	r1, [r2, #0]
 8007656:	1850      	adds	r0, r2, r1
 8007658:	42a0      	cmp	r0, r4
 800765a:	d10b      	bne.n	8007674 <_free_r+0x6c>
 800765c:	6820      	ldr	r0, [r4, #0]
 800765e:	4401      	add	r1, r0
 8007660:	1850      	adds	r0, r2, r1
 8007662:	4283      	cmp	r3, r0
 8007664:	6011      	str	r1, [r2, #0]
 8007666:	d1e0      	bne.n	800762a <_free_r+0x22>
 8007668:	6818      	ldr	r0, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	6053      	str	r3, [r2, #4]
 800766e:	4408      	add	r0, r1
 8007670:	6010      	str	r0, [r2, #0]
 8007672:	e7da      	b.n	800762a <_free_r+0x22>
 8007674:	d902      	bls.n	800767c <_free_r+0x74>
 8007676:	230c      	movs	r3, #12
 8007678:	602b      	str	r3, [r5, #0]
 800767a:	e7d6      	b.n	800762a <_free_r+0x22>
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	1821      	adds	r1, r4, r0
 8007680:	428b      	cmp	r3, r1
 8007682:	bf04      	itt	eq
 8007684:	6819      	ldreq	r1, [r3, #0]
 8007686:	685b      	ldreq	r3, [r3, #4]
 8007688:	6063      	str	r3, [r4, #4]
 800768a:	bf04      	itt	eq
 800768c:	1809      	addeq	r1, r1, r0
 800768e:	6021      	streq	r1, [r4, #0]
 8007690:	6054      	str	r4, [r2, #4]
 8007692:	e7ca      	b.n	800762a <_free_r+0x22>
 8007694:	bd38      	pop	{r3, r4, r5, pc}
 8007696:	bf00      	nop
 8007698:	20014314 	.word	0x20014314

0800769c <sbrk_aligned>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	4e0f      	ldr	r6, [pc, #60]	@ (80076dc <sbrk_aligned+0x40>)
 80076a0:	460c      	mov	r4, r1
 80076a2:	6831      	ldr	r1, [r6, #0]
 80076a4:	4605      	mov	r5, r0
 80076a6:	b911      	cbnz	r1, 80076ae <sbrk_aligned+0x12>
 80076a8:	f000 fba6 	bl	8007df8 <_sbrk_r>
 80076ac:	6030      	str	r0, [r6, #0]
 80076ae:	4621      	mov	r1, r4
 80076b0:	4628      	mov	r0, r5
 80076b2:	f000 fba1 	bl	8007df8 <_sbrk_r>
 80076b6:	1c43      	adds	r3, r0, #1
 80076b8:	d103      	bne.n	80076c2 <sbrk_aligned+0x26>
 80076ba:	f04f 34ff 	mov.w	r4, #4294967295
 80076be:	4620      	mov	r0, r4
 80076c0:	bd70      	pop	{r4, r5, r6, pc}
 80076c2:	1cc4      	adds	r4, r0, #3
 80076c4:	f024 0403 	bic.w	r4, r4, #3
 80076c8:	42a0      	cmp	r0, r4
 80076ca:	d0f8      	beq.n	80076be <sbrk_aligned+0x22>
 80076cc:	1a21      	subs	r1, r4, r0
 80076ce:	4628      	mov	r0, r5
 80076d0:	f000 fb92 	bl	8007df8 <_sbrk_r>
 80076d4:	3001      	adds	r0, #1
 80076d6:	d1f2      	bne.n	80076be <sbrk_aligned+0x22>
 80076d8:	e7ef      	b.n	80076ba <sbrk_aligned+0x1e>
 80076da:	bf00      	nop
 80076dc:	20014310 	.word	0x20014310

080076e0 <_malloc_r>:
 80076e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e4:	1ccd      	adds	r5, r1, #3
 80076e6:	f025 0503 	bic.w	r5, r5, #3
 80076ea:	3508      	adds	r5, #8
 80076ec:	2d0c      	cmp	r5, #12
 80076ee:	bf38      	it	cc
 80076f0:	250c      	movcc	r5, #12
 80076f2:	2d00      	cmp	r5, #0
 80076f4:	4606      	mov	r6, r0
 80076f6:	db01      	blt.n	80076fc <_malloc_r+0x1c>
 80076f8:	42a9      	cmp	r1, r5
 80076fa:	d904      	bls.n	8007706 <_malloc_r+0x26>
 80076fc:	230c      	movs	r3, #12
 80076fe:	6033      	str	r3, [r6, #0]
 8007700:	2000      	movs	r0, #0
 8007702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007706:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077dc <_malloc_r+0xfc>
 800770a:	f000 f869 	bl	80077e0 <__malloc_lock>
 800770e:	f8d8 3000 	ldr.w	r3, [r8]
 8007712:	461c      	mov	r4, r3
 8007714:	bb44      	cbnz	r4, 8007768 <_malloc_r+0x88>
 8007716:	4629      	mov	r1, r5
 8007718:	4630      	mov	r0, r6
 800771a:	f7ff ffbf 	bl	800769c <sbrk_aligned>
 800771e:	1c43      	adds	r3, r0, #1
 8007720:	4604      	mov	r4, r0
 8007722:	d158      	bne.n	80077d6 <_malloc_r+0xf6>
 8007724:	f8d8 4000 	ldr.w	r4, [r8]
 8007728:	4627      	mov	r7, r4
 800772a:	2f00      	cmp	r7, #0
 800772c:	d143      	bne.n	80077b6 <_malloc_r+0xd6>
 800772e:	2c00      	cmp	r4, #0
 8007730:	d04b      	beq.n	80077ca <_malloc_r+0xea>
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	4639      	mov	r1, r7
 8007736:	4630      	mov	r0, r6
 8007738:	eb04 0903 	add.w	r9, r4, r3
 800773c:	f000 fb5c 	bl	8007df8 <_sbrk_r>
 8007740:	4581      	cmp	r9, r0
 8007742:	d142      	bne.n	80077ca <_malloc_r+0xea>
 8007744:	6821      	ldr	r1, [r4, #0]
 8007746:	1a6d      	subs	r5, r5, r1
 8007748:	4629      	mov	r1, r5
 800774a:	4630      	mov	r0, r6
 800774c:	f7ff ffa6 	bl	800769c <sbrk_aligned>
 8007750:	3001      	adds	r0, #1
 8007752:	d03a      	beq.n	80077ca <_malloc_r+0xea>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	442b      	add	r3, r5
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	f8d8 3000 	ldr.w	r3, [r8]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	bb62      	cbnz	r2, 80077bc <_malloc_r+0xdc>
 8007762:	f8c8 7000 	str.w	r7, [r8]
 8007766:	e00f      	b.n	8007788 <_malloc_r+0xa8>
 8007768:	6822      	ldr	r2, [r4, #0]
 800776a:	1b52      	subs	r2, r2, r5
 800776c:	d420      	bmi.n	80077b0 <_malloc_r+0xd0>
 800776e:	2a0b      	cmp	r2, #11
 8007770:	d917      	bls.n	80077a2 <_malloc_r+0xc2>
 8007772:	1961      	adds	r1, r4, r5
 8007774:	42a3      	cmp	r3, r4
 8007776:	6025      	str	r5, [r4, #0]
 8007778:	bf18      	it	ne
 800777a:	6059      	strne	r1, [r3, #4]
 800777c:	6863      	ldr	r3, [r4, #4]
 800777e:	bf08      	it	eq
 8007780:	f8c8 1000 	streq.w	r1, [r8]
 8007784:	5162      	str	r2, [r4, r5]
 8007786:	604b      	str	r3, [r1, #4]
 8007788:	4630      	mov	r0, r6
 800778a:	f000 f82f 	bl	80077ec <__malloc_unlock>
 800778e:	f104 000b 	add.w	r0, r4, #11
 8007792:	1d23      	adds	r3, r4, #4
 8007794:	f020 0007 	bic.w	r0, r0, #7
 8007798:	1ac2      	subs	r2, r0, r3
 800779a:	bf1c      	itt	ne
 800779c:	1a1b      	subne	r3, r3, r0
 800779e:	50a3      	strne	r3, [r4, r2]
 80077a0:	e7af      	b.n	8007702 <_malloc_r+0x22>
 80077a2:	6862      	ldr	r2, [r4, #4]
 80077a4:	42a3      	cmp	r3, r4
 80077a6:	bf0c      	ite	eq
 80077a8:	f8c8 2000 	streq.w	r2, [r8]
 80077ac:	605a      	strne	r2, [r3, #4]
 80077ae:	e7eb      	b.n	8007788 <_malloc_r+0xa8>
 80077b0:	4623      	mov	r3, r4
 80077b2:	6864      	ldr	r4, [r4, #4]
 80077b4:	e7ae      	b.n	8007714 <_malloc_r+0x34>
 80077b6:	463c      	mov	r4, r7
 80077b8:	687f      	ldr	r7, [r7, #4]
 80077ba:	e7b6      	b.n	800772a <_malloc_r+0x4a>
 80077bc:	461a      	mov	r2, r3
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	42a3      	cmp	r3, r4
 80077c2:	d1fb      	bne.n	80077bc <_malloc_r+0xdc>
 80077c4:	2300      	movs	r3, #0
 80077c6:	6053      	str	r3, [r2, #4]
 80077c8:	e7de      	b.n	8007788 <_malloc_r+0xa8>
 80077ca:	230c      	movs	r3, #12
 80077cc:	6033      	str	r3, [r6, #0]
 80077ce:	4630      	mov	r0, r6
 80077d0:	f000 f80c 	bl	80077ec <__malloc_unlock>
 80077d4:	e794      	b.n	8007700 <_malloc_r+0x20>
 80077d6:	6005      	str	r5, [r0, #0]
 80077d8:	e7d6      	b.n	8007788 <_malloc_r+0xa8>
 80077da:	bf00      	nop
 80077dc:	20014314 	.word	0x20014314

080077e0 <__malloc_lock>:
 80077e0:	4801      	ldr	r0, [pc, #4]	@ (80077e8 <__malloc_lock+0x8>)
 80077e2:	f7ff bf01 	b.w	80075e8 <__retarget_lock_acquire_recursive>
 80077e6:	bf00      	nop
 80077e8:	2001430c 	.word	0x2001430c

080077ec <__malloc_unlock>:
 80077ec:	4801      	ldr	r0, [pc, #4]	@ (80077f4 <__malloc_unlock+0x8>)
 80077ee:	f7ff befc 	b.w	80075ea <__retarget_lock_release_recursive>
 80077f2:	bf00      	nop
 80077f4:	2001430c 	.word	0x2001430c

080077f8 <__ssputs_r>:
 80077f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077fc:	688e      	ldr	r6, [r1, #8]
 80077fe:	461f      	mov	r7, r3
 8007800:	42be      	cmp	r6, r7
 8007802:	680b      	ldr	r3, [r1, #0]
 8007804:	4682      	mov	sl, r0
 8007806:	460c      	mov	r4, r1
 8007808:	4690      	mov	r8, r2
 800780a:	d82d      	bhi.n	8007868 <__ssputs_r+0x70>
 800780c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007810:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007814:	d026      	beq.n	8007864 <__ssputs_r+0x6c>
 8007816:	6965      	ldr	r5, [r4, #20]
 8007818:	6909      	ldr	r1, [r1, #16]
 800781a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800781e:	eba3 0901 	sub.w	r9, r3, r1
 8007822:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007826:	1c7b      	adds	r3, r7, #1
 8007828:	444b      	add	r3, r9
 800782a:	106d      	asrs	r5, r5, #1
 800782c:	429d      	cmp	r5, r3
 800782e:	bf38      	it	cc
 8007830:	461d      	movcc	r5, r3
 8007832:	0553      	lsls	r3, r2, #21
 8007834:	d527      	bpl.n	8007886 <__ssputs_r+0x8e>
 8007836:	4629      	mov	r1, r5
 8007838:	f7ff ff52 	bl	80076e0 <_malloc_r>
 800783c:	4606      	mov	r6, r0
 800783e:	b360      	cbz	r0, 800789a <__ssputs_r+0xa2>
 8007840:	6921      	ldr	r1, [r4, #16]
 8007842:	464a      	mov	r2, r9
 8007844:	f7ff fed2 	bl	80075ec <memcpy>
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800784e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007852:	81a3      	strh	r3, [r4, #12]
 8007854:	6126      	str	r6, [r4, #16]
 8007856:	6165      	str	r5, [r4, #20]
 8007858:	444e      	add	r6, r9
 800785a:	eba5 0509 	sub.w	r5, r5, r9
 800785e:	6026      	str	r6, [r4, #0]
 8007860:	60a5      	str	r5, [r4, #8]
 8007862:	463e      	mov	r6, r7
 8007864:	42be      	cmp	r6, r7
 8007866:	d900      	bls.n	800786a <__ssputs_r+0x72>
 8007868:	463e      	mov	r6, r7
 800786a:	6820      	ldr	r0, [r4, #0]
 800786c:	4632      	mov	r2, r6
 800786e:	4641      	mov	r1, r8
 8007870:	f000 faa8 	bl	8007dc4 <memmove>
 8007874:	68a3      	ldr	r3, [r4, #8]
 8007876:	1b9b      	subs	r3, r3, r6
 8007878:	60a3      	str	r3, [r4, #8]
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	4433      	add	r3, r6
 800787e:	6023      	str	r3, [r4, #0]
 8007880:	2000      	movs	r0, #0
 8007882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007886:	462a      	mov	r2, r5
 8007888:	f000 fac6 	bl	8007e18 <_realloc_r>
 800788c:	4606      	mov	r6, r0
 800788e:	2800      	cmp	r0, #0
 8007890:	d1e0      	bne.n	8007854 <__ssputs_r+0x5c>
 8007892:	6921      	ldr	r1, [r4, #16]
 8007894:	4650      	mov	r0, sl
 8007896:	f7ff feb7 	bl	8007608 <_free_r>
 800789a:	230c      	movs	r3, #12
 800789c:	f8ca 3000 	str.w	r3, [sl]
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ac:	e7e9      	b.n	8007882 <__ssputs_r+0x8a>
	...

080078b0 <_svfiprintf_r>:
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	4698      	mov	r8, r3
 80078b6:	898b      	ldrh	r3, [r1, #12]
 80078b8:	061b      	lsls	r3, r3, #24
 80078ba:	b09d      	sub	sp, #116	@ 0x74
 80078bc:	4607      	mov	r7, r0
 80078be:	460d      	mov	r5, r1
 80078c0:	4614      	mov	r4, r2
 80078c2:	d510      	bpl.n	80078e6 <_svfiprintf_r+0x36>
 80078c4:	690b      	ldr	r3, [r1, #16]
 80078c6:	b973      	cbnz	r3, 80078e6 <_svfiprintf_r+0x36>
 80078c8:	2140      	movs	r1, #64	@ 0x40
 80078ca:	f7ff ff09 	bl	80076e0 <_malloc_r>
 80078ce:	6028      	str	r0, [r5, #0]
 80078d0:	6128      	str	r0, [r5, #16]
 80078d2:	b930      	cbnz	r0, 80078e2 <_svfiprintf_r+0x32>
 80078d4:	230c      	movs	r3, #12
 80078d6:	603b      	str	r3, [r7, #0]
 80078d8:	f04f 30ff 	mov.w	r0, #4294967295
 80078dc:	b01d      	add	sp, #116	@ 0x74
 80078de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e2:	2340      	movs	r3, #64	@ 0x40
 80078e4:	616b      	str	r3, [r5, #20]
 80078e6:	2300      	movs	r3, #0
 80078e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80078ea:	2320      	movs	r3, #32
 80078ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80078f4:	2330      	movs	r3, #48	@ 0x30
 80078f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a94 <_svfiprintf_r+0x1e4>
 80078fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078fe:	f04f 0901 	mov.w	r9, #1
 8007902:	4623      	mov	r3, r4
 8007904:	469a      	mov	sl, r3
 8007906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800790a:	b10a      	cbz	r2, 8007910 <_svfiprintf_r+0x60>
 800790c:	2a25      	cmp	r2, #37	@ 0x25
 800790e:	d1f9      	bne.n	8007904 <_svfiprintf_r+0x54>
 8007910:	ebba 0b04 	subs.w	fp, sl, r4
 8007914:	d00b      	beq.n	800792e <_svfiprintf_r+0x7e>
 8007916:	465b      	mov	r3, fp
 8007918:	4622      	mov	r2, r4
 800791a:	4629      	mov	r1, r5
 800791c:	4638      	mov	r0, r7
 800791e:	f7ff ff6b 	bl	80077f8 <__ssputs_r>
 8007922:	3001      	adds	r0, #1
 8007924:	f000 80a7 	beq.w	8007a76 <_svfiprintf_r+0x1c6>
 8007928:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800792a:	445a      	add	r2, fp
 800792c:	9209      	str	r2, [sp, #36]	@ 0x24
 800792e:	f89a 3000 	ldrb.w	r3, [sl]
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 809f 	beq.w	8007a76 <_svfiprintf_r+0x1c6>
 8007938:	2300      	movs	r3, #0
 800793a:	f04f 32ff 	mov.w	r2, #4294967295
 800793e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007942:	f10a 0a01 	add.w	sl, sl, #1
 8007946:	9304      	str	r3, [sp, #16]
 8007948:	9307      	str	r3, [sp, #28]
 800794a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800794e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007950:	4654      	mov	r4, sl
 8007952:	2205      	movs	r2, #5
 8007954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007958:	484e      	ldr	r0, [pc, #312]	@ (8007a94 <_svfiprintf_r+0x1e4>)
 800795a:	f7f8 fca9 	bl	80002b0 <memchr>
 800795e:	9a04      	ldr	r2, [sp, #16]
 8007960:	b9d8      	cbnz	r0, 800799a <_svfiprintf_r+0xea>
 8007962:	06d0      	lsls	r0, r2, #27
 8007964:	bf44      	itt	mi
 8007966:	2320      	movmi	r3, #32
 8007968:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800796c:	0711      	lsls	r1, r2, #28
 800796e:	bf44      	itt	mi
 8007970:	232b      	movmi	r3, #43	@ 0x2b
 8007972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007976:	f89a 3000 	ldrb.w	r3, [sl]
 800797a:	2b2a      	cmp	r3, #42	@ 0x2a
 800797c:	d015      	beq.n	80079aa <_svfiprintf_r+0xfa>
 800797e:	9a07      	ldr	r2, [sp, #28]
 8007980:	4654      	mov	r4, sl
 8007982:	2000      	movs	r0, #0
 8007984:	f04f 0c0a 	mov.w	ip, #10
 8007988:	4621      	mov	r1, r4
 800798a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800798e:	3b30      	subs	r3, #48	@ 0x30
 8007990:	2b09      	cmp	r3, #9
 8007992:	d94b      	bls.n	8007a2c <_svfiprintf_r+0x17c>
 8007994:	b1b0      	cbz	r0, 80079c4 <_svfiprintf_r+0x114>
 8007996:	9207      	str	r2, [sp, #28]
 8007998:	e014      	b.n	80079c4 <_svfiprintf_r+0x114>
 800799a:	eba0 0308 	sub.w	r3, r0, r8
 800799e:	fa09 f303 	lsl.w	r3, r9, r3
 80079a2:	4313      	orrs	r3, r2
 80079a4:	9304      	str	r3, [sp, #16]
 80079a6:	46a2      	mov	sl, r4
 80079a8:	e7d2      	b.n	8007950 <_svfiprintf_r+0xa0>
 80079aa:	9b03      	ldr	r3, [sp, #12]
 80079ac:	1d19      	adds	r1, r3, #4
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	9103      	str	r1, [sp, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	bfbb      	ittet	lt
 80079b6:	425b      	neglt	r3, r3
 80079b8:	f042 0202 	orrlt.w	r2, r2, #2
 80079bc:	9307      	strge	r3, [sp, #28]
 80079be:	9307      	strlt	r3, [sp, #28]
 80079c0:	bfb8      	it	lt
 80079c2:	9204      	strlt	r2, [sp, #16]
 80079c4:	7823      	ldrb	r3, [r4, #0]
 80079c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80079c8:	d10a      	bne.n	80079e0 <_svfiprintf_r+0x130>
 80079ca:	7863      	ldrb	r3, [r4, #1]
 80079cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80079ce:	d132      	bne.n	8007a36 <_svfiprintf_r+0x186>
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	1d1a      	adds	r2, r3, #4
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	9203      	str	r2, [sp, #12]
 80079d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079dc:	3402      	adds	r4, #2
 80079de:	9305      	str	r3, [sp, #20]
 80079e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007aa4 <_svfiprintf_r+0x1f4>
 80079e4:	7821      	ldrb	r1, [r4, #0]
 80079e6:	2203      	movs	r2, #3
 80079e8:	4650      	mov	r0, sl
 80079ea:	f7f8 fc61 	bl	80002b0 <memchr>
 80079ee:	b138      	cbz	r0, 8007a00 <_svfiprintf_r+0x150>
 80079f0:	9b04      	ldr	r3, [sp, #16]
 80079f2:	eba0 000a 	sub.w	r0, r0, sl
 80079f6:	2240      	movs	r2, #64	@ 0x40
 80079f8:	4082      	lsls	r2, r0
 80079fa:	4313      	orrs	r3, r2
 80079fc:	3401      	adds	r4, #1
 80079fe:	9304      	str	r3, [sp, #16]
 8007a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a04:	4824      	ldr	r0, [pc, #144]	@ (8007a98 <_svfiprintf_r+0x1e8>)
 8007a06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a0a:	2206      	movs	r2, #6
 8007a0c:	f7f8 fc50 	bl	80002b0 <memchr>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d036      	beq.n	8007a82 <_svfiprintf_r+0x1d2>
 8007a14:	4b21      	ldr	r3, [pc, #132]	@ (8007a9c <_svfiprintf_r+0x1ec>)
 8007a16:	bb1b      	cbnz	r3, 8007a60 <_svfiprintf_r+0x1b0>
 8007a18:	9b03      	ldr	r3, [sp, #12]
 8007a1a:	3307      	adds	r3, #7
 8007a1c:	f023 0307 	bic.w	r3, r3, #7
 8007a20:	3308      	adds	r3, #8
 8007a22:	9303      	str	r3, [sp, #12]
 8007a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a26:	4433      	add	r3, r6
 8007a28:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a2a:	e76a      	b.n	8007902 <_svfiprintf_r+0x52>
 8007a2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a30:	460c      	mov	r4, r1
 8007a32:	2001      	movs	r0, #1
 8007a34:	e7a8      	b.n	8007988 <_svfiprintf_r+0xd8>
 8007a36:	2300      	movs	r3, #0
 8007a38:	3401      	adds	r4, #1
 8007a3a:	9305      	str	r3, [sp, #20]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	f04f 0c0a 	mov.w	ip, #10
 8007a42:	4620      	mov	r0, r4
 8007a44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a48:	3a30      	subs	r2, #48	@ 0x30
 8007a4a:	2a09      	cmp	r2, #9
 8007a4c:	d903      	bls.n	8007a56 <_svfiprintf_r+0x1a6>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d0c6      	beq.n	80079e0 <_svfiprintf_r+0x130>
 8007a52:	9105      	str	r1, [sp, #20]
 8007a54:	e7c4      	b.n	80079e0 <_svfiprintf_r+0x130>
 8007a56:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e7f0      	b.n	8007a42 <_svfiprintf_r+0x192>
 8007a60:	ab03      	add	r3, sp, #12
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	462a      	mov	r2, r5
 8007a66:	4b0e      	ldr	r3, [pc, #56]	@ (8007aa0 <_svfiprintf_r+0x1f0>)
 8007a68:	a904      	add	r1, sp, #16
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	f3af 8000 	nop.w
 8007a70:	1c42      	adds	r2, r0, #1
 8007a72:	4606      	mov	r6, r0
 8007a74:	d1d6      	bne.n	8007a24 <_svfiprintf_r+0x174>
 8007a76:	89ab      	ldrh	r3, [r5, #12]
 8007a78:	065b      	lsls	r3, r3, #25
 8007a7a:	f53f af2d 	bmi.w	80078d8 <_svfiprintf_r+0x28>
 8007a7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a80:	e72c      	b.n	80078dc <_svfiprintf_r+0x2c>
 8007a82:	ab03      	add	r3, sp, #12
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	462a      	mov	r2, r5
 8007a88:	4b05      	ldr	r3, [pc, #20]	@ (8007aa0 <_svfiprintf_r+0x1f0>)
 8007a8a:	a904      	add	r1, sp, #16
 8007a8c:	4638      	mov	r0, r7
 8007a8e:	f000 f879 	bl	8007b84 <_printf_i>
 8007a92:	e7ed      	b.n	8007a70 <_svfiprintf_r+0x1c0>
 8007a94:	08008010 	.word	0x08008010
 8007a98:	0800801a 	.word	0x0800801a
 8007a9c:	00000000 	.word	0x00000000
 8007aa0:	080077f9 	.word	0x080077f9
 8007aa4:	08008016 	.word	0x08008016

08007aa8 <_printf_common>:
 8007aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aac:	4616      	mov	r6, r2
 8007aae:	4698      	mov	r8, r3
 8007ab0:	688a      	ldr	r2, [r1, #8]
 8007ab2:	690b      	ldr	r3, [r1, #16]
 8007ab4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	bfb8      	it	lt
 8007abc:	4613      	movlt	r3, r2
 8007abe:	6033      	str	r3, [r6, #0]
 8007ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ac4:	4607      	mov	r7, r0
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	b10a      	cbz	r2, 8007ace <_printf_common+0x26>
 8007aca:	3301      	adds	r3, #1
 8007acc:	6033      	str	r3, [r6, #0]
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	0699      	lsls	r1, r3, #26
 8007ad2:	bf42      	ittt	mi
 8007ad4:	6833      	ldrmi	r3, [r6, #0]
 8007ad6:	3302      	addmi	r3, #2
 8007ad8:	6033      	strmi	r3, [r6, #0]
 8007ada:	6825      	ldr	r5, [r4, #0]
 8007adc:	f015 0506 	ands.w	r5, r5, #6
 8007ae0:	d106      	bne.n	8007af0 <_printf_common+0x48>
 8007ae2:	f104 0a19 	add.w	sl, r4, #25
 8007ae6:	68e3      	ldr	r3, [r4, #12]
 8007ae8:	6832      	ldr	r2, [r6, #0]
 8007aea:	1a9b      	subs	r3, r3, r2
 8007aec:	42ab      	cmp	r3, r5
 8007aee:	dc26      	bgt.n	8007b3e <_printf_common+0x96>
 8007af0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007af4:	6822      	ldr	r2, [r4, #0]
 8007af6:	3b00      	subs	r3, #0
 8007af8:	bf18      	it	ne
 8007afa:	2301      	movne	r3, #1
 8007afc:	0692      	lsls	r2, r2, #26
 8007afe:	d42b      	bmi.n	8007b58 <_printf_common+0xb0>
 8007b00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b04:	4641      	mov	r1, r8
 8007b06:	4638      	mov	r0, r7
 8007b08:	47c8      	blx	r9
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	d01e      	beq.n	8007b4c <_printf_common+0xa4>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	6922      	ldr	r2, [r4, #16]
 8007b12:	f003 0306 	and.w	r3, r3, #6
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	bf02      	ittt	eq
 8007b1a:	68e5      	ldreq	r5, [r4, #12]
 8007b1c:	6833      	ldreq	r3, [r6, #0]
 8007b1e:	1aed      	subeq	r5, r5, r3
 8007b20:	68a3      	ldr	r3, [r4, #8]
 8007b22:	bf0c      	ite	eq
 8007b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b28:	2500      	movne	r5, #0
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	bfc4      	itt	gt
 8007b2e:	1a9b      	subgt	r3, r3, r2
 8007b30:	18ed      	addgt	r5, r5, r3
 8007b32:	2600      	movs	r6, #0
 8007b34:	341a      	adds	r4, #26
 8007b36:	42b5      	cmp	r5, r6
 8007b38:	d11a      	bne.n	8007b70 <_printf_common+0xc8>
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	e008      	b.n	8007b50 <_printf_common+0xa8>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	4652      	mov	r2, sl
 8007b42:	4641      	mov	r1, r8
 8007b44:	4638      	mov	r0, r7
 8007b46:	47c8      	blx	r9
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d103      	bne.n	8007b54 <_printf_common+0xac>
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b54:	3501      	adds	r5, #1
 8007b56:	e7c6      	b.n	8007ae6 <_printf_common+0x3e>
 8007b58:	18e1      	adds	r1, r4, r3
 8007b5a:	1c5a      	adds	r2, r3, #1
 8007b5c:	2030      	movs	r0, #48	@ 0x30
 8007b5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b62:	4422      	add	r2, r4
 8007b64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b6c:	3302      	adds	r3, #2
 8007b6e:	e7c7      	b.n	8007b00 <_printf_common+0x58>
 8007b70:	2301      	movs	r3, #1
 8007b72:	4622      	mov	r2, r4
 8007b74:	4641      	mov	r1, r8
 8007b76:	4638      	mov	r0, r7
 8007b78:	47c8      	blx	r9
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	d0e6      	beq.n	8007b4c <_printf_common+0xa4>
 8007b7e:	3601      	adds	r6, #1
 8007b80:	e7d9      	b.n	8007b36 <_printf_common+0x8e>
	...

08007b84 <_printf_i>:
 8007b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b88:	7e0f      	ldrb	r7, [r1, #24]
 8007b8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b8c:	2f78      	cmp	r7, #120	@ 0x78
 8007b8e:	4691      	mov	r9, r2
 8007b90:	4680      	mov	r8, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	469a      	mov	sl, r3
 8007b96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b9a:	d807      	bhi.n	8007bac <_printf_i+0x28>
 8007b9c:	2f62      	cmp	r7, #98	@ 0x62
 8007b9e:	d80a      	bhi.n	8007bb6 <_printf_i+0x32>
 8007ba0:	2f00      	cmp	r7, #0
 8007ba2:	f000 80d2 	beq.w	8007d4a <_printf_i+0x1c6>
 8007ba6:	2f58      	cmp	r7, #88	@ 0x58
 8007ba8:	f000 80b9 	beq.w	8007d1e <_printf_i+0x19a>
 8007bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007bb4:	e03a      	b.n	8007c2c <_printf_i+0xa8>
 8007bb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007bba:	2b15      	cmp	r3, #21
 8007bbc:	d8f6      	bhi.n	8007bac <_printf_i+0x28>
 8007bbe:	a101      	add	r1, pc, #4	@ (adr r1, 8007bc4 <_printf_i+0x40>)
 8007bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bc4:	08007c1d 	.word	0x08007c1d
 8007bc8:	08007c31 	.word	0x08007c31
 8007bcc:	08007bad 	.word	0x08007bad
 8007bd0:	08007bad 	.word	0x08007bad
 8007bd4:	08007bad 	.word	0x08007bad
 8007bd8:	08007bad 	.word	0x08007bad
 8007bdc:	08007c31 	.word	0x08007c31
 8007be0:	08007bad 	.word	0x08007bad
 8007be4:	08007bad 	.word	0x08007bad
 8007be8:	08007bad 	.word	0x08007bad
 8007bec:	08007bad 	.word	0x08007bad
 8007bf0:	08007d31 	.word	0x08007d31
 8007bf4:	08007c5b 	.word	0x08007c5b
 8007bf8:	08007ceb 	.word	0x08007ceb
 8007bfc:	08007bad 	.word	0x08007bad
 8007c00:	08007bad 	.word	0x08007bad
 8007c04:	08007d53 	.word	0x08007d53
 8007c08:	08007bad 	.word	0x08007bad
 8007c0c:	08007c5b 	.word	0x08007c5b
 8007c10:	08007bad 	.word	0x08007bad
 8007c14:	08007bad 	.word	0x08007bad
 8007c18:	08007cf3 	.word	0x08007cf3
 8007c1c:	6833      	ldr	r3, [r6, #0]
 8007c1e:	1d1a      	adds	r2, r3, #4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6032      	str	r2, [r6, #0]
 8007c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e09d      	b.n	8007d6c <_printf_i+0x1e8>
 8007c30:	6833      	ldr	r3, [r6, #0]
 8007c32:	6820      	ldr	r0, [r4, #0]
 8007c34:	1d19      	adds	r1, r3, #4
 8007c36:	6031      	str	r1, [r6, #0]
 8007c38:	0606      	lsls	r6, r0, #24
 8007c3a:	d501      	bpl.n	8007c40 <_printf_i+0xbc>
 8007c3c:	681d      	ldr	r5, [r3, #0]
 8007c3e:	e003      	b.n	8007c48 <_printf_i+0xc4>
 8007c40:	0645      	lsls	r5, r0, #25
 8007c42:	d5fb      	bpl.n	8007c3c <_printf_i+0xb8>
 8007c44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c48:	2d00      	cmp	r5, #0
 8007c4a:	da03      	bge.n	8007c54 <_printf_i+0xd0>
 8007c4c:	232d      	movs	r3, #45	@ 0x2d
 8007c4e:	426d      	negs	r5, r5
 8007c50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c54:	4859      	ldr	r0, [pc, #356]	@ (8007dbc <_printf_i+0x238>)
 8007c56:	230a      	movs	r3, #10
 8007c58:	e011      	b.n	8007c7e <_printf_i+0xfa>
 8007c5a:	6821      	ldr	r1, [r4, #0]
 8007c5c:	6833      	ldr	r3, [r6, #0]
 8007c5e:	0608      	lsls	r0, r1, #24
 8007c60:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c64:	d402      	bmi.n	8007c6c <_printf_i+0xe8>
 8007c66:	0649      	lsls	r1, r1, #25
 8007c68:	bf48      	it	mi
 8007c6a:	b2ad      	uxthmi	r5, r5
 8007c6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c6e:	4853      	ldr	r0, [pc, #332]	@ (8007dbc <_printf_i+0x238>)
 8007c70:	6033      	str	r3, [r6, #0]
 8007c72:	bf14      	ite	ne
 8007c74:	230a      	movne	r3, #10
 8007c76:	2308      	moveq	r3, #8
 8007c78:	2100      	movs	r1, #0
 8007c7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c7e:	6866      	ldr	r6, [r4, #4]
 8007c80:	60a6      	str	r6, [r4, #8]
 8007c82:	2e00      	cmp	r6, #0
 8007c84:	bfa2      	ittt	ge
 8007c86:	6821      	ldrge	r1, [r4, #0]
 8007c88:	f021 0104 	bicge.w	r1, r1, #4
 8007c8c:	6021      	strge	r1, [r4, #0]
 8007c8e:	b90d      	cbnz	r5, 8007c94 <_printf_i+0x110>
 8007c90:	2e00      	cmp	r6, #0
 8007c92:	d04b      	beq.n	8007d2c <_printf_i+0x1a8>
 8007c94:	4616      	mov	r6, r2
 8007c96:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c9a:	fb03 5711 	mls	r7, r3, r1, r5
 8007c9e:	5dc7      	ldrb	r7, [r0, r7]
 8007ca0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ca4:	462f      	mov	r7, r5
 8007ca6:	42bb      	cmp	r3, r7
 8007ca8:	460d      	mov	r5, r1
 8007caa:	d9f4      	bls.n	8007c96 <_printf_i+0x112>
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d10b      	bne.n	8007cc8 <_printf_i+0x144>
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	07df      	lsls	r7, r3, #31
 8007cb4:	d508      	bpl.n	8007cc8 <_printf_i+0x144>
 8007cb6:	6923      	ldr	r3, [r4, #16]
 8007cb8:	6861      	ldr	r1, [r4, #4]
 8007cba:	4299      	cmp	r1, r3
 8007cbc:	bfde      	ittt	le
 8007cbe:	2330      	movle	r3, #48	@ 0x30
 8007cc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cc8:	1b92      	subs	r2, r2, r6
 8007cca:	6122      	str	r2, [r4, #16]
 8007ccc:	f8cd a000 	str.w	sl, [sp]
 8007cd0:	464b      	mov	r3, r9
 8007cd2:	aa03      	add	r2, sp, #12
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	f7ff fee6 	bl	8007aa8 <_printf_common>
 8007cdc:	3001      	adds	r0, #1
 8007cde:	d14a      	bne.n	8007d76 <_printf_i+0x1f2>
 8007ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce4:	b004      	add	sp, #16
 8007ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	f043 0320 	orr.w	r3, r3, #32
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	4833      	ldr	r0, [pc, #204]	@ (8007dc0 <_printf_i+0x23c>)
 8007cf4:	2778      	movs	r7, #120	@ 0x78
 8007cf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	6831      	ldr	r1, [r6, #0]
 8007cfe:	061f      	lsls	r7, r3, #24
 8007d00:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d04:	d402      	bmi.n	8007d0c <_printf_i+0x188>
 8007d06:	065f      	lsls	r7, r3, #25
 8007d08:	bf48      	it	mi
 8007d0a:	b2ad      	uxthmi	r5, r5
 8007d0c:	6031      	str	r1, [r6, #0]
 8007d0e:	07d9      	lsls	r1, r3, #31
 8007d10:	bf44      	itt	mi
 8007d12:	f043 0320 	orrmi.w	r3, r3, #32
 8007d16:	6023      	strmi	r3, [r4, #0]
 8007d18:	b11d      	cbz	r5, 8007d22 <_printf_i+0x19e>
 8007d1a:	2310      	movs	r3, #16
 8007d1c:	e7ac      	b.n	8007c78 <_printf_i+0xf4>
 8007d1e:	4827      	ldr	r0, [pc, #156]	@ (8007dbc <_printf_i+0x238>)
 8007d20:	e7e9      	b.n	8007cf6 <_printf_i+0x172>
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	f023 0320 	bic.w	r3, r3, #32
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	e7f6      	b.n	8007d1a <_printf_i+0x196>
 8007d2c:	4616      	mov	r6, r2
 8007d2e:	e7bd      	b.n	8007cac <_printf_i+0x128>
 8007d30:	6833      	ldr	r3, [r6, #0]
 8007d32:	6825      	ldr	r5, [r4, #0]
 8007d34:	6961      	ldr	r1, [r4, #20]
 8007d36:	1d18      	adds	r0, r3, #4
 8007d38:	6030      	str	r0, [r6, #0]
 8007d3a:	062e      	lsls	r6, r5, #24
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	d501      	bpl.n	8007d44 <_printf_i+0x1c0>
 8007d40:	6019      	str	r1, [r3, #0]
 8007d42:	e002      	b.n	8007d4a <_printf_i+0x1c6>
 8007d44:	0668      	lsls	r0, r5, #25
 8007d46:	d5fb      	bpl.n	8007d40 <_printf_i+0x1bc>
 8007d48:	8019      	strh	r1, [r3, #0]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	6123      	str	r3, [r4, #16]
 8007d4e:	4616      	mov	r6, r2
 8007d50:	e7bc      	b.n	8007ccc <_printf_i+0x148>
 8007d52:	6833      	ldr	r3, [r6, #0]
 8007d54:	1d1a      	adds	r2, r3, #4
 8007d56:	6032      	str	r2, [r6, #0]
 8007d58:	681e      	ldr	r6, [r3, #0]
 8007d5a:	6862      	ldr	r2, [r4, #4]
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f7f8 faa6 	bl	80002b0 <memchr>
 8007d64:	b108      	cbz	r0, 8007d6a <_printf_i+0x1e6>
 8007d66:	1b80      	subs	r0, r0, r6
 8007d68:	6060      	str	r0, [r4, #4]
 8007d6a:	6863      	ldr	r3, [r4, #4]
 8007d6c:	6123      	str	r3, [r4, #16]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d74:	e7aa      	b.n	8007ccc <_printf_i+0x148>
 8007d76:	6923      	ldr	r3, [r4, #16]
 8007d78:	4632      	mov	r2, r6
 8007d7a:	4649      	mov	r1, r9
 8007d7c:	4640      	mov	r0, r8
 8007d7e:	47d0      	blx	sl
 8007d80:	3001      	adds	r0, #1
 8007d82:	d0ad      	beq.n	8007ce0 <_printf_i+0x15c>
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	079b      	lsls	r3, r3, #30
 8007d88:	d413      	bmi.n	8007db2 <_printf_i+0x22e>
 8007d8a:	68e0      	ldr	r0, [r4, #12]
 8007d8c:	9b03      	ldr	r3, [sp, #12]
 8007d8e:	4298      	cmp	r0, r3
 8007d90:	bfb8      	it	lt
 8007d92:	4618      	movlt	r0, r3
 8007d94:	e7a6      	b.n	8007ce4 <_printf_i+0x160>
 8007d96:	2301      	movs	r3, #1
 8007d98:	4632      	mov	r2, r6
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	4640      	mov	r0, r8
 8007d9e:	47d0      	blx	sl
 8007da0:	3001      	adds	r0, #1
 8007da2:	d09d      	beq.n	8007ce0 <_printf_i+0x15c>
 8007da4:	3501      	adds	r5, #1
 8007da6:	68e3      	ldr	r3, [r4, #12]
 8007da8:	9903      	ldr	r1, [sp, #12]
 8007daa:	1a5b      	subs	r3, r3, r1
 8007dac:	42ab      	cmp	r3, r5
 8007dae:	dcf2      	bgt.n	8007d96 <_printf_i+0x212>
 8007db0:	e7eb      	b.n	8007d8a <_printf_i+0x206>
 8007db2:	2500      	movs	r5, #0
 8007db4:	f104 0619 	add.w	r6, r4, #25
 8007db8:	e7f5      	b.n	8007da6 <_printf_i+0x222>
 8007dba:	bf00      	nop
 8007dbc:	08008021 	.word	0x08008021
 8007dc0:	08008032 	.word	0x08008032

08007dc4 <memmove>:
 8007dc4:	4288      	cmp	r0, r1
 8007dc6:	b510      	push	{r4, lr}
 8007dc8:	eb01 0402 	add.w	r4, r1, r2
 8007dcc:	d902      	bls.n	8007dd4 <memmove+0x10>
 8007dce:	4284      	cmp	r4, r0
 8007dd0:	4623      	mov	r3, r4
 8007dd2:	d807      	bhi.n	8007de4 <memmove+0x20>
 8007dd4:	1e43      	subs	r3, r0, #1
 8007dd6:	42a1      	cmp	r1, r4
 8007dd8:	d008      	beq.n	8007dec <memmove+0x28>
 8007dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007de2:	e7f8      	b.n	8007dd6 <memmove+0x12>
 8007de4:	4402      	add	r2, r0
 8007de6:	4601      	mov	r1, r0
 8007de8:	428a      	cmp	r2, r1
 8007dea:	d100      	bne.n	8007dee <memmove+0x2a>
 8007dec:	bd10      	pop	{r4, pc}
 8007dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007df6:	e7f7      	b.n	8007de8 <memmove+0x24>

08007df8 <_sbrk_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	4d06      	ldr	r5, [pc, #24]	@ (8007e14 <_sbrk_r+0x1c>)
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	4604      	mov	r4, r0
 8007e00:	4608      	mov	r0, r1
 8007e02:	602b      	str	r3, [r5, #0]
 8007e04:	f000 f83e 	bl	8007e84 <_sbrk>
 8007e08:	1c43      	adds	r3, r0, #1
 8007e0a:	d102      	bne.n	8007e12 <_sbrk_r+0x1a>
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	b103      	cbz	r3, 8007e12 <_sbrk_r+0x1a>
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	20014308 	.word	0x20014308

08007e18 <_realloc_r>:
 8007e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1c:	4680      	mov	r8, r0
 8007e1e:	4615      	mov	r5, r2
 8007e20:	460c      	mov	r4, r1
 8007e22:	b921      	cbnz	r1, 8007e2e <_realloc_r+0x16>
 8007e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e28:	4611      	mov	r1, r2
 8007e2a:	f7ff bc59 	b.w	80076e0 <_malloc_r>
 8007e2e:	b92a      	cbnz	r2, 8007e3c <_realloc_r+0x24>
 8007e30:	f7ff fbea 	bl	8007608 <_free_r>
 8007e34:	2400      	movs	r4, #0
 8007e36:	4620      	mov	r0, r4
 8007e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e3c:	f000 f81a 	bl	8007e74 <_malloc_usable_size_r>
 8007e40:	4285      	cmp	r5, r0
 8007e42:	4606      	mov	r6, r0
 8007e44:	d802      	bhi.n	8007e4c <_realloc_r+0x34>
 8007e46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007e4a:	d8f4      	bhi.n	8007e36 <_realloc_r+0x1e>
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	4640      	mov	r0, r8
 8007e50:	f7ff fc46 	bl	80076e0 <_malloc_r>
 8007e54:	4607      	mov	r7, r0
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d0ec      	beq.n	8007e34 <_realloc_r+0x1c>
 8007e5a:	42b5      	cmp	r5, r6
 8007e5c:	462a      	mov	r2, r5
 8007e5e:	4621      	mov	r1, r4
 8007e60:	bf28      	it	cs
 8007e62:	4632      	movcs	r2, r6
 8007e64:	f7ff fbc2 	bl	80075ec <memcpy>
 8007e68:	4621      	mov	r1, r4
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	f7ff fbcc 	bl	8007608 <_free_r>
 8007e70:	463c      	mov	r4, r7
 8007e72:	e7e0      	b.n	8007e36 <_realloc_r+0x1e>

08007e74 <_malloc_usable_size_r>:
 8007e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e78:	1f18      	subs	r0, r3, #4
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	bfbc      	itt	lt
 8007e7e:	580b      	ldrlt	r3, [r1, r0]
 8007e80:	18c0      	addlt	r0, r0, r3
 8007e82:	4770      	bx	lr

08007e84 <_sbrk>:
 8007e84:	4a04      	ldr	r2, [pc, #16]	@ (8007e98 <_sbrk+0x14>)
 8007e86:	6811      	ldr	r1, [r2, #0]
 8007e88:	4603      	mov	r3, r0
 8007e8a:	b909      	cbnz	r1, 8007e90 <_sbrk+0xc>
 8007e8c:	4903      	ldr	r1, [pc, #12]	@ (8007e9c <_sbrk+0x18>)
 8007e8e:	6011      	str	r1, [r2, #0]
 8007e90:	6810      	ldr	r0, [r2, #0]
 8007e92:	4403      	add	r3, r0
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	4770      	bx	lr
 8007e98:	20014318 	.word	0x20014318
 8007e9c:	20014320 	.word	0x20014320

08007ea0 <_init>:
 8007ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea2:	bf00      	nop
 8007ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ea6:	bc08      	pop	{r3}
 8007ea8:	469e      	mov	lr, r3
 8007eaa:	4770      	bx	lr

08007eac <_fini>:
 8007eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eae:	bf00      	nop
 8007eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb2:	bc08      	pop	{r3}
 8007eb4:	469e      	mov	lr, r3
 8007eb6:	4770      	bx	lr
